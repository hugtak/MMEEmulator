/*************************************************************/
/* Copyright (C) 2023 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* Generated for: Linuxlab Solucoes e Sistemas LTDA - Named User Subscription, 1 User, Expiration: April 2, 2024, License 17532 17532,
 * only for project "ANY PROJECT - only for use by Claudio Reis Lacerda". */
/* Abstract syntax: sbcap */
/* Created: Tue Jul 18 11:40:33 2023 */
/* ASN.1/C++ compiler version: 7.2 */
/* Code generated for runtime version 7.2 or later */
/* Compiler operating system: Linux with 64-bit support */
/* Compiler machine type: x86-64 */
/* Target operating system: Linux with 64-bit support */
/* Target machine type: x86-64 */
/* C++ compiler options required: -m64 */
/* ASN.1 compiler options and file names specified:
 * -per -root -autoencdec
 * ../../../../asn1studio/linux-x86-64bit/Asn1Standards/3GPP/29-series/SBCAP/v16.0.0/sbcap.asn
 */

#define OSS_COMPILER_API_LEVEL 42
#define _OSS_CODE_FILE
#define OSS_TOED_PER
#include "sbcap.h"
#include "string.h"

#include "osstype.h"

#if OSSDEBUG > 1
#define OSS_CNTX_INIT _Context_Element _element;  _element._occurrence = 0;
#define OSS_CNTX_INITZERO _Context_Element _element = {NULL, NULL, 0};
#define OSS_CNTX_ZEROOCC  _element._occurrence = 0;
#define OSS_CNTX_INCOCC  _element._occurrence++;
#define OSS_CNTX_SETOCC(OCC) _element._occurrence = OCC;
#define OSS_CNTX_DEF _Context_Element _element;
#define OSS_CNTX_POP(OSSCNAME) OSSCNAME->_oss_context_anchor._last = _element._parent;
#define OSS_CNTX_PUSH(OSSCNAME,CNTXID) _element._id = (_Context_Id *)&_context_id[CNTXID];\
    _element._parent = OSSCNAME->_oss_context_anchor._last;\
    OSSCNAME->_oss_context_anchor._last = &_element;
#define OSS_CNTX_SET(CNTXID) _element._id = (_Context_Id *)&_context_id[CNTXID];
#define OSS_CNTX_NEW(OSSCNAME,CNTXID) _Context_Element _element;\
    _element._occurrence = 0;\
    _element._id = (_Context_Id *)&_context_id[CNTXID];\
    _element._parent = OSSCNAME->_oss_context_anchor._last;\
    OSSCNAME->_oss_context_anchor._last = &_element;
#define OSS_CNTX_ANCHOR_SET(PDU,CNTXID) \
    _element._parent = _oss_c->_oss_context_anchor._last;\
    _element._id = (_Context_Id *)&_context_id[CNTXID];\
    _oss_c->_oss_context_anchor._last = &_element;\
    if (!_oss_c->_oss_context_anchor._pdu_number) {\
        _oss_c->_oss_context_anchor._pdu_number = PDU;\
        _oss_c->_oss_context_anchor._pdu_id = _element._id;\
    }
#define OSS_CNTX_OSSC_DEF _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#else
#define OSS_CNTX_INIT
#define OSS_CNTX_INITZERO
#define OSS_CNTX_ZEROOCC
#define OSS_CNTX_INCOCC
#define OSS_CNTX_SETOCC(OCC)
#define OSS_CNTX_DEF
#define OSS_CNTX_POP(OSSCNAME)
#define OSS_CNTX_PUSH(OSSCNAME,CNTXID)
#define OSS_CNTX_SET(CNTXID)
#define OSS_CNTX_NEW(OSSCNAME,CNTXID)
#define OSS_CNTX_ANCHOR_SET(PDU,CNTXID) _oss_c->_oss_context_anchor._pdu_number = 0;
#endif
#if OSS_TOED_API_LEVEL >= 37
#define PER_CHECK_E(w)  (((w)->encodingFlags & STRICTER_ENCODING_DECODING_RULES) != 0)
#define PER_CHECK_D(w)  (((w)->decodingFlags & STRICTER_ENCODING_DECODING_RULES) != 0)
#else
#define PER_CHECK_E(w)  0
#define PER_CHECK_D(w)  0
#define EXTENSION_BIT   0
#endif
/* Control table object */

class sbcap_TableType : public OssControlTable {
public:
    static void *internal;
    sbcap_TableType();
    int destroy(void *data, OssTypeIndex typeindex);
    int copy(void *src, void **dst, OssTypeIndex typeindex);
    int equal(void *data1, void *data2, OssTypeIndex typeindex);
};

sbcap_TableType::sbcap_TableType() : OssControlTable(internal) {
}

int sbcap_TableType::destroy(void *data, OssTypeIndex typeindex) {
    switch (typeindex) {
	case 1:
	    delete (SBC_AP_PDU *)data;
	    break;
	case 2:
	    delete (Write_Replace_Warning_Request *)data;
	    break;
	case 3:
	    delete (Write_Replace_Warning_Response *)data;
	    break;
	case 4:
	    delete (Stop_Warning_Request *)data;
	    break;
	case 5:
	    delete (Stop_Warning_Response *)data;
	    break;
	case 6:
	    delete (Write_Replace_Warning_Indication *)data;
	    break;
	case 7:
	    delete (Stop_Warning_Indication *)data;
	    break;
	case 8:
	    delete (PWS_Restart_Indication *)data;
	    break;
	case 9:
	    delete (PWS_Failure_Indication *)data;
	    break;
	case 10:
	    delete (Error_Indication *)data;
	    break;
	case 11:
	    delete (Broadcast_Scheduled_Area_List *)data;
	    break;
	case 12:
	    delete (Broadcast_Scheduled_Area_List_5GS *)data;
	    break;
	case 13:
	    delete (Broadcast_Cancelled_Area_List *)data;
	    break;
	case 14:
	    delete (Broadcast_Cancelled_Area_List_5GS *)data;
	    break;
	case 15:
	    delete (Broadcast_Empty_Area_List *)data;
	    break;
	case 16:
	    delete (Broadcast_Empty_Area_List_5GS *)data;
	    break;
	case 17:
	    asn1Free(data);
	    break;
	case 18:
	    asn1Free(data);
	    break;
	case 19:
	    delete (Criticality_Diagnostics *)data;
	    break;
	case 20:
	    delete (Data_Coding_Scheme *)data;
	    break;
	case 21:
	    asn1Free(data);
	    break;
	case 22:
	    delete (Failed_Cell_List *)data;
	    break;
	case 23:
	    delete (Failed_Cell_List_NR *)data;
	    break;
	case 24:
	    delete (Global_ENB_ID *)data;
	    break;
	case 25:
	    delete (Global_RAN_Node_ID *)data;
	    break;
	case 26:
	    delete (Global_GNB_ID *)data;
	    break;
	case 27:
	    delete (List_of_TAIs *)data;
	    break;
	case 28:
	    delete (List_of_TAIs_Restart *)data;
	    break;
	case 29:
	    delete (List_of_EAIs_Restart *)data;
	    break;
	case 30:
	    delete (List_of_5GS_TAIs *)data;
	    break;
	case 31:
	    delete (List_of_5GS_Cells_for_Failure *)data;
	    break;
	case 32:
	    delete (List_of_5GS_TAI_for_Restart *)data;
	    break;
	case 33:
	    delete (Message_Identifier *)data;
	    break;
	case 34:
	    asn1Free(data);
	    break;
	case 35:
	    delete (NgENB_ID *)data;
	    break;
	case 36:
	    delete (Omc_Id *)data;
	    break;
	case 37:
	    asn1Free(data);
	    break;
	case 38:
	    delete (Restarted_Cell_List *)data;
	    break;
	case 39:
	    asn1Free(data);
	    break;
	case 40:
	    delete (Restarted_Cell_List_NR *)data;
	    break;
	case 41:
	    asn1Free(data);
	    break;
	case 42:
	    asn1Free(data);
	    break;
	case 43:
	    delete (Serial_Number *)data;
	    break;
	case 44:
	    asn1Free(data);
	    break;
	case 45:
	    delete (Unknown_Tracking_Area_List *)data;
	    break;
	case 46:
	    delete (Unknown_5GS_Tracking_Area_List *)data;
	    break;
	case 47:
	    delete (Warning_Area_List *)data;
	    break;
	case 48:
	    delete (Warning_Message_Content *)data;
	    break;
	case 49:
	    delete (Warning_Area_Coordinates *)data;
	    break;
	case 50:
	    delete (Warning_Security_Information *)data;
	    break;
	case 51:
	    delete (Warning_Type *)data;
	    break;
	case 52:
	    delete (Warning_Area_List_5GS *)data;
	    break;
	default:
	    return oss_call_error(OSS_UNKNOWN_TYPE);
    }
    return 0;
}

int sbcap_TableType::copy(void *src, void **dst, OssTypeIndex typeindex) {
    switch (typeindex) {
	case 1:
	    *dst = new SBC_AP_PDU(*(SBC_AP_PDU *)src);
	    break;
	case 2:
	    *dst = new Write_Replace_Warning_Request(*(Write_Replace_Warning_Request *)src);
	    break;
	case 3:
	    *dst = new Write_Replace_Warning_Response(*(Write_Replace_Warning_Response *)src);
	    break;
	case 4:
	    *dst = new Stop_Warning_Request(*(Stop_Warning_Request *)src);
	    break;
	case 5:
	    *dst = new Stop_Warning_Response(*(Stop_Warning_Response *)src);
	    break;
	case 6:
	    *dst = new Write_Replace_Warning_Indication(*(Write_Replace_Warning_Indication *)src);
	    break;
	case 7:
	    *dst = new Stop_Warning_Indication(*(Stop_Warning_Indication *)src);
	    break;
	case 8:
	    *dst = new PWS_Restart_Indication(*(PWS_Restart_Indication *)src);
	    break;
	case 9:
	    *dst = new PWS_Failure_Indication(*(PWS_Failure_Indication *)src);
	    break;
	case 10:
	    *dst = new Error_Indication(*(Error_Indication *)src);
	    break;
	case 11:
	    *dst = new Broadcast_Scheduled_Area_List(*(Broadcast_Scheduled_Area_List *)src);
	    break;
	case 12:
	    *dst = new Broadcast_Scheduled_Area_List_5GS(*(Broadcast_Scheduled_Area_List_5GS *)src);
	    break;
	case 13:
	    *dst = new Broadcast_Cancelled_Area_List(*(Broadcast_Cancelled_Area_List *)src);
	    break;
	case 14:
	    *dst = new Broadcast_Cancelled_Area_List_5GS(*(Broadcast_Cancelled_Area_List_5GS *)src);
	    break;
	case 15:
	    *dst = new Broadcast_Empty_Area_List(*(Broadcast_Empty_Area_List *)src);
	    break;
	case 16:
	    *dst = new Broadcast_Empty_Area_List_5GS(*(Broadcast_Empty_Area_List_5GS *)src);
	    break;
	case 17:
	    *dst = osscppMalloc(sizeof(Cause));
	    if (*dst)
		**(Cause **)dst = *(Cause *)src;
	    break;
	case 18:
	    *dst = osscppMalloc(sizeof(Concurrent_Warning_Message_Indicator));
	    if (*dst)
		**(Concurrent_Warning_Message_Indicator **)dst = *(Concurrent_Warning_Message_Indicator *)src;
	    break;
	case 19:
	    *dst = new Criticality_Diagnostics(*(Criticality_Diagnostics *)src);
	    break;
	case 20:
	    *dst = new Data_Coding_Scheme(*(Data_Coding_Scheme *)src);
	    break;
	case 21:
	    *dst = osscppMalloc(sizeof(Extended_Repetition_Period));
	    if (*dst)
		**(Extended_Repetition_Period **)dst = *(Extended_Repetition_Period *)src;
	    break;
	case 22:
	    *dst = new Failed_Cell_List(*(Failed_Cell_List *)src);
	    break;
	case 23:
	    *dst = new Failed_Cell_List_NR(*(Failed_Cell_List_NR *)src);
	    break;
	case 24:
	    *dst = new Global_ENB_ID(*(Global_ENB_ID *)src);
	    break;
	case 25:
	    *dst = new Global_RAN_Node_ID(*(Global_RAN_Node_ID *)src);
	    break;
	case 26:
	    *dst = new Global_GNB_ID(*(Global_GNB_ID *)src);
	    break;
	case 27:
	    *dst = new List_of_TAIs(*(List_of_TAIs *)src);
	    break;
	case 28:
	    *dst = new List_of_TAIs_Restart(*(List_of_TAIs_Restart *)src);
	    break;
	case 29:
	    *dst = new List_of_EAIs_Restart(*(List_of_EAIs_Restart *)src);
	    break;
	case 30:
	    *dst = new List_of_5GS_TAIs(*(List_of_5GS_TAIs *)src);
	    break;
	case 31:
	    *dst = new List_of_5GS_Cells_for_Failure(*(List_of_5GS_Cells_for_Failure *)src);
	    break;
	case 32:
	    *dst = new List_of_5GS_TAI_for_Restart(*(List_of_5GS_TAI_for_Restart *)src);
	    break;
	case 33:
	    *dst = new Message_Identifier(*(Message_Identifier *)src);
	    break;
	case 34:
	    *dst = osscppMalloc(sizeof(Number_of_Broadcasts_Requested));
	    if (*dst)
		**(Number_of_Broadcasts_Requested **)dst = *(Number_of_Broadcasts_Requested *)src;
	    break;
	case 35:
	    *dst = new NgENB_ID(*(NgENB_ID *)src);
	    break;
	case 36:
	    *dst = new Omc_Id(*(Omc_Id *)src);
	    break;
	case 37:
	    *dst = osscppMalloc(sizeof(Repetition_Period));
	    if (*dst)
		**(Repetition_Period **)dst = *(Repetition_Period *)src;
	    break;
	case 38:
	    *dst = new Restarted_Cell_List(*(Restarted_Cell_List *)src);
	    break;
	case 39:
	    *dst = osscppMalloc(sizeof(RAT_Selector_5GS));
	    if (*dst)
		**(RAT_Selector_5GS **)dst = *(RAT_Selector_5GS *)src;
	    break;
	case 40:
	    *dst = new Restarted_Cell_List_NR(*(Restarted_Cell_List_NR *)src);
	    break;
	case 41:
	    *dst = osscppMalloc(sizeof(Send_Write_Replace_Warning_Indication));
	    if (*dst)
		**(Send_Write_Replace_Warning_Indication **)dst = *(Send_Write_Replace_Warning_Indication *)src;
	    break;
	case 42:
	    *dst = osscppMalloc(sizeof(Send_Stop_Warning_Indication));
	    if (*dst)
		**(Send_Stop_Warning_Indication **)dst = *(Send_Stop_Warning_Indication *)src;
	    break;
	case 43:
	    *dst = new Serial_Number(*(Serial_Number *)src);
	    break;
	case 44:
	    *dst = osscppMalloc(sizeof(Stop_All_Indicator));
	    if (*dst)
		**(Stop_All_Indicator **)dst = *(Stop_All_Indicator *)src;
	    break;
	case 45:
	    *dst = new Unknown_Tracking_Area_List(*(Unknown_Tracking_Area_List *)src);
	    break;
	case 46:
	    *dst = new Unknown_5GS_Tracking_Area_List(*(Unknown_5GS_Tracking_Area_List *)src);
	    break;
	case 47:
	    *dst = new Warning_Area_List(*(Warning_Area_List *)src);
	    break;
	case 48:
	    *dst = new Warning_Message_Content(*(Warning_Message_Content *)src);
	    break;
	case 49:
	    *dst = new Warning_Area_Coordinates(*(Warning_Area_Coordinates *)src);
	    break;
	case 50:
	    *dst = new Warning_Security_Information(*(Warning_Security_Information *)src);
	    break;
	case 51:
	    *dst = new Warning_Type(*(Warning_Type *)src);
	    break;
	case 52:
	    *dst = new Warning_Area_List_5GS(*(Warning_Area_List_5GS *)src);
	    break;
	default:
	    return oss_call_error(OSS_UNKNOWN_TYPE);
    }
    if (*dst == 0)
	return OSS_NO_MEMORY;
    return 0;
}

int sbcap_TableType::equal(void *data1, void *data2, OssTypeIndex typeindex) {
    switch (typeindex) {
	case 1:
	    return *(SBC_AP_PDU *)data1 == *(SBC_AP_PDU *)data2;
	case 2:
	    return *(Write_Replace_Warning_Request *)data1 == *(Write_Replace_Warning_Request *)data2;
	case 3:
	    return *(Write_Replace_Warning_Response *)data1 == *(Write_Replace_Warning_Response *)data2;
	case 4:
	    return *(Stop_Warning_Request *)data1 == *(Stop_Warning_Request *)data2;
	case 5:
	    return *(Stop_Warning_Response *)data1 == *(Stop_Warning_Response *)data2;
	case 6:
	    return *(Write_Replace_Warning_Indication *)data1 == *(Write_Replace_Warning_Indication *)data2;
	case 7:
	    return *(Stop_Warning_Indication *)data1 == *(Stop_Warning_Indication *)data2;
	case 8:
	    return *(PWS_Restart_Indication *)data1 == *(PWS_Restart_Indication *)data2;
	case 9:
	    return *(PWS_Failure_Indication *)data1 == *(PWS_Failure_Indication *)data2;
	case 10:
	    return *(Error_Indication *)data1 == *(Error_Indication *)data2;
	case 11:
	    return *(Broadcast_Scheduled_Area_List *)data1 == *(Broadcast_Scheduled_Area_List *)data2;
	case 12:
	    return *(Broadcast_Scheduled_Area_List_5GS *)data1 == *(Broadcast_Scheduled_Area_List_5GS *)data2;
	case 13:
	    return *(Broadcast_Cancelled_Area_List *)data1 == *(Broadcast_Cancelled_Area_List *)data2;
	case 14:
	    return *(Broadcast_Cancelled_Area_List_5GS *)data1 == *(Broadcast_Cancelled_Area_List_5GS *)data2;
	case 15:
	    return *(Broadcast_Empty_Area_List *)data1 == *(Broadcast_Empty_Area_List *)data2;
	case 16:
	    return *(Broadcast_Empty_Area_List_5GS *)data1 == *(Broadcast_Empty_Area_List_5GS *)data2;
	case 17:
	    return *(Cause *)data1 == *(Cause *)data2;
	case 18:
	    return *(Concurrent_Warning_Message_Indicator *)data1 == *(Concurrent_Warning_Message_Indicator *)data2;
	case 19:
	    return *(Criticality_Diagnostics *)data1 == *(Criticality_Diagnostics *)data2;
	case 20:
	    return *(Data_Coding_Scheme *)data1 == *(Data_Coding_Scheme *)data2;
	case 21:
	    return *(Extended_Repetition_Period *)data1 == *(Extended_Repetition_Period *)data2;
	case 22:
	    return *(Failed_Cell_List *)data1 == *(Failed_Cell_List *)data2;
	case 23:
	    return *(Failed_Cell_List_NR *)data1 == *(Failed_Cell_List_NR *)data2;
	case 24:
	    return *(Global_ENB_ID *)data1 == *(Global_ENB_ID *)data2;
	case 25:
	    return *(Global_RAN_Node_ID *)data1 == *(Global_RAN_Node_ID *)data2;
	case 26:
	    return *(Global_GNB_ID *)data1 == *(Global_GNB_ID *)data2;
	case 27:
	    return *(List_of_TAIs *)data1 == *(List_of_TAIs *)data2;
	case 28:
	    return *(List_of_TAIs_Restart *)data1 == *(List_of_TAIs_Restart *)data2;
	case 29:
	    return *(List_of_EAIs_Restart *)data1 == *(List_of_EAIs_Restart *)data2;
	case 30:
	    return *(List_of_5GS_TAIs *)data1 == *(List_of_5GS_TAIs *)data2;
	case 31:
	    return *(List_of_5GS_Cells_for_Failure *)data1 == *(List_of_5GS_Cells_for_Failure *)data2;
	case 32:
	    return *(List_of_5GS_TAI_for_Restart *)data1 == *(List_of_5GS_TAI_for_Restart *)data2;
	case 33:
	    return *(Message_Identifier *)data1 == *(Message_Identifier *)data2;
	case 34:
	    return *(Number_of_Broadcasts_Requested *)data1 == *(Number_of_Broadcasts_Requested *)data2;
	case 35:
	    return *(NgENB_ID *)data1 == *(NgENB_ID *)data2;
	case 36:
	    return *(Omc_Id *)data1 == *(Omc_Id *)data2;
	case 37:
	    return *(Repetition_Period *)data1 == *(Repetition_Period *)data2;
	case 38:
	    return *(Restarted_Cell_List *)data1 == *(Restarted_Cell_List *)data2;
	case 39:
	    return *(RAT_Selector_5GS *)data1 == *(RAT_Selector_5GS *)data2;
	case 40:
	    return *(Restarted_Cell_List_NR *)data1 == *(Restarted_Cell_List_NR *)data2;
	case 41:
	    return *(Send_Write_Replace_Warning_Indication *)data1 == *(Send_Write_Replace_Warning_Indication *)data2;
	case 42:
	    return *(Send_Stop_Warning_Indication *)data1 == *(Send_Stop_Warning_Indication *)data2;
	case 43:
	    return *(Serial_Number *)data1 == *(Serial_Number *)data2;
	case 44:
	    return *(Stop_All_Indicator *)data1 == *(Stop_All_Indicator *)data2;
	case 45:
	    return *(Unknown_Tracking_Area_List *)data1 == *(Unknown_Tracking_Area_List *)data2;
	case 46:
	    return *(Unknown_5GS_Tracking_Area_List *)data1 == *(Unknown_5GS_Tracking_Area_List *)data2;
	case 47:
	    return *(Warning_Area_List *)data1 == *(Warning_Area_List *)data2;
	case 48:
	    return *(Warning_Message_Content *)data1 == *(Warning_Message_Content *)data2;
	case 49:
	    return *(Warning_Area_Coordinates *)data1 == *(Warning_Area_Coordinates *)data2;
	case 50:
	    return *(Warning_Security_Information *)data1 == *(Warning_Security_Information *)data2;
	case 51:
	    return *(Warning_Type *)data1 == *(Warning_Type *)data2;
	case 52:
	    return *(Warning_Area_List_5GS *)data1 == *(Warning_Area_List_5GS *)data2;
    }
    return 0;
}

static sbcap_TableType sbcap_Table;

/* Representation types */

/* Auxiliary data structures and functions for class __seqof1 */

class __seqof1_member {
public:
    __seqof1_member *next;
    __seqof1::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof1_member();
    __seqof1_member(const __seqof1::component & val);
};

void *__seqof1_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof1_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof1_member::__seqof1_member() {
}

__seqof1_member::__seqof1_member(const __seqof1::component & val) {
    value = val;
}

static void *__seqof1_copy(void *that) {
    return new __seqof1_member(((__seqof1_member *)that)->value);
}

static void __seqof1_destroy(void *that) {
    delete (__seqof1_member *)that;
}

static int __seqof1_compare(void *val1, void *val2) {
    return (((__seqof1_member *)val1)->value == ((__seqof1_member *)val2)->value);
}

/* Constructors */

__seqof1::__seqof1() {
}

__seqof1::__seqof1(const __seqof1 & that) {
    OSSTRY {
	do_copy(that, &__seqof1_copy);
    } OSSCLEAN(__seqof1)
}

/* Destructor */

__seqof1::~__seqof1() {
    do_destroy(&__seqof1_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof1 & __seqof1::operator = (const __seqof1 & that) {
    do_destroy(&__seqof1_destroy);
    do_copy(that, &__seqof1_copy);
    return *this;
}

int __seqof1::operator == (const __seqof1 & that) const {
    return do_compare(that, &__seqof1_compare);
}

int __seqof1::operator != (const __seqof1 & that) const {
    return !do_compare(that, &__seqof1_compare);
}

/* Locate ("At" etc) methods */

__seqof1::component *__seqof1::at(OssIndex pos) {
    return &((__seqof1_member *)pos)->value;
}

const __seqof1::component *__seqof1::at(OssIndex pos) const {
    return &((__seqof1_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof1::prepend(const component & val) {
    __seqof1_member *newrec = new __seqof1_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof1::prepend(__seqof1 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof1::insert_after(OssIndex pos, const component & val) {
    __seqof1_member *newrec = new __seqof1_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof1::insert_after(OssIndex pos, __seqof1 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof1::remove_front() {
    __seqof1_member *extr = (__seqof1_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof1_destroy(extr);
    return 0;
}

int __seqof1::remove_after(OssIndex pos) {
    __seqof1_member *extr = (__seqof1_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof1_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof1 *__seqof1::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof1 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __seqof2 */

class __seqof2_member {
public:
    __seqof2_member *next;
    __seqof2::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof2_member();
    __seqof2_member(const __seqof2::component & val);
};

void *__seqof2_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof2_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof2_member::__seqof2_member() {
}

__seqof2_member::__seqof2_member(const __seqof2::component & val) {
    value = val;
}

static void *__seqof2_copy(void *that) {
    return new __seqof2_member(((__seqof2_member *)that)->value);
}

static void __seqof2_destroy(void *that) {
    delete (__seqof2_member *)that;
}

static int __seqof2_compare(void *val1, void *val2) {
    return (((__seqof2_member *)val1)->value == ((__seqof2_member *)val2)->value);
}

/* Constructors */

__seqof2::__seqof2() {
}

__seqof2::__seqof2(const __seqof2 & that) {
    OSSTRY {
	do_copy(that, &__seqof2_copy);
    } OSSCLEAN(__seqof2)
}

/* Destructor */

__seqof2::~__seqof2() {
    do_destroy(&__seqof2_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof2 & __seqof2::operator = (const __seqof2 & that) {
    do_destroy(&__seqof2_destroy);
    do_copy(that, &__seqof2_copy);
    return *this;
}

int __seqof2::operator == (const __seqof2 & that) const {
    return do_compare(that, &__seqof2_compare);
}

int __seqof2::operator != (const __seqof2 & that) const {
    return !do_compare(that, &__seqof2_compare);
}

/* Locate ("At" etc) methods */

__seqof2::component *__seqof2::at(OssIndex pos) {
    return &((__seqof2_member *)pos)->value;
}

const __seqof2::component *__seqof2::at(OssIndex pos) const {
    return &((__seqof2_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof2::prepend(const component & val) {
    __seqof2_member *newrec = new __seqof2_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof2::prepend(__seqof2 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof2::insert_after(OssIndex pos, const component & val) {
    __seqof2_member *newrec = new __seqof2_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof2::insert_after(OssIndex pos, __seqof2 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof2::remove_front() {
    __seqof2_member *extr = (__seqof2_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof2_destroy(extr);
    return 0;
}

int __seqof2::remove_after(OssIndex pos) {
    __seqof2_member *extr = (__seqof2_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof2_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof2 *__seqof2::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof2 *)do_extract_after(begin, end);
}

void *Write_Replace_Warning_Request::operator new(size_t size) {
    return ossNewFunc(size);
}

void Write_Replace_Warning_Request::operator delete(void *ptr) {
    asn1Free(ptr);
}

Write_Replace_Warning_Request::Write_Replace_Warning_Request() {
    memset(this, 0, sizeof(Write_Replace_Warning_Request));
}

Write_Replace_Warning_Request::Write_Replace_Warning_Request(const Write_Replace_Warning_Request & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	protocolIEs_field = that.protocolIEs_field;
	protocolExtensions_field = that.protocolExtensions_field;
    } OSSCLEAN(Write_Replace_Warning_Request)
}

Write_Replace_Warning_Request::Write_Replace_Warning_Request(const protocolIEs & protocolIEs_val, 
    const protocolExtensions & protocolExtensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	protocolIEs_field = protocolIEs_val;
	protocolExtensions_field = protocolExtensions_val;
    } OSSCLEAN(Write_Replace_Warning_Request)
}

Write_Replace_Warning_Request::Write_Replace_Warning_Request(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	bit_mask = 0;
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(Write_Replace_Warning_Request)
}

Write_Replace_Warning_Request & Write_Replace_Warning_Request::operator = (const Write_Replace_Warning_Request & that) {
    if (this == &that)
	return *this;
    this->~Write_Replace_Warning_Request();
    bit_mask = that.bit_mask;
    protocolIEs_field = that.protocolIEs_field;
    protocolExtensions_field = that.protocolExtensions_field;
    return *this;
}

int Write_Replace_Warning_Request::operator == (const Write_Replace_Warning_Request & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (protocolExtensions_field != that.protocolExtensions_field)
	    return 0;
    }
    return 1;
}

int Write_Replace_Warning_Request::operator != (const Write_Replace_Warning_Request & that) const {
    return !(operator ==(that));
}

Write_Replace_Warning_Request::protocolIEs & Write_Replace_Warning_Request::get_protocolIEs() {
    return protocolIEs_field;
}

const Write_Replace_Warning_Request::protocolIEs & Write_Replace_Warning_Request::get_protocolIEs() const {
    return protocolIEs_field;
}

void Write_Replace_Warning_Request::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

Write_Replace_Warning_Request::protocolExtensions *Write_Replace_Warning_Request::get_protocolExtensions() {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

const Write_Replace_Warning_Request::protocolExtensions *Write_Replace_Warning_Request::get_protocolExtensions() const {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

void Write_Replace_Warning_Request::set_protocolExtensions(const protocolExtensions & protocolExtensions_val) {
    bit_mask |= 0x80000000;
    protocolExtensions_field = protocolExtensions_val;
}

int Write_Replace_Warning_Request::protocolExtensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Write_Replace_Warning_Request::omit_protocolExtensions() {
    protocolExtensions_field.~__seqof2();
    bit_mask &= ~0x80000000;
}

/* Auxiliary data structures and functions for class __seqof5 */

class __seqof5_member {
public:
    __seqof5_member *next;
    __seqof5::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof5_member();
    __seqof5_member(const __seqof5::component & val);
};

void *__seqof5_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof5_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof5_member::__seqof5_member() {
}

__seqof5_member::__seqof5_member(const __seqof5::component & val) {
    value = val;
}

static void *__seqof5_copy(void *that) {
    return new __seqof5_member(((__seqof5_member *)that)->value);
}

static void __seqof5_destroy(void *that) {
    delete (__seqof5_member *)that;
}

static int __seqof5_compare(void *val1, void *val2) {
    return (((__seqof5_member *)val1)->value == ((__seqof5_member *)val2)->value);
}

/* Constructors */

__seqof5::__seqof5() {
}

__seqof5::__seqof5(const __seqof5 & that) {
    OSSTRY {
	do_copy(that, &__seqof5_copy);
    } OSSCLEAN(__seqof5)
}

/* Destructor */

__seqof5::~__seqof5() {
    do_destroy(&__seqof5_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof5 & __seqof5::operator = (const __seqof5 & that) {
    do_destroy(&__seqof5_destroy);
    do_copy(that, &__seqof5_copy);
    return *this;
}

int __seqof5::operator == (const __seqof5 & that) const {
    return do_compare(that, &__seqof5_compare);
}

int __seqof5::operator != (const __seqof5 & that) const {
    return !do_compare(that, &__seqof5_compare);
}

/* Locate ("At" etc) methods */

__seqof5::component *__seqof5::at(OssIndex pos) {
    return &((__seqof5_member *)pos)->value;
}

const __seqof5::component *__seqof5::at(OssIndex pos) const {
    return &((__seqof5_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof5::prepend(const component & val) {
    __seqof5_member *newrec = new __seqof5_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof5::prepend(__seqof5 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof5::insert_after(OssIndex pos, const component & val) {
    __seqof5_member *newrec = new __seqof5_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof5::insert_after(OssIndex pos, __seqof5 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof5::remove_front() {
    __seqof5_member *extr = (__seqof5_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof5_destroy(extr);
    return 0;
}

int __seqof5::remove_after(OssIndex pos) {
    __seqof5_member *extr = (__seqof5_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof5_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof5 *__seqof5::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof5 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __seqof6 */

class __seqof6_member {
public:
    __seqof6_member *next;
    __seqof6::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof6_member();
    __seqof6_member(const __seqof6::component & val);
};

void *__seqof6_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof6_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof6_member::__seqof6_member() {
}

__seqof6_member::__seqof6_member(const __seqof6::component & val) {
    value = val;
}

static void *__seqof6_copy(void *that) {
    return new __seqof6_member(((__seqof6_member *)that)->value);
}

static void __seqof6_destroy(void *that) {
    delete (__seqof6_member *)that;
}

static int __seqof6_compare(void *val1, void *val2) {
    return (((__seqof6_member *)val1)->value == ((__seqof6_member *)val2)->value);
}

/* Constructors */

__seqof6::__seqof6() {
}

__seqof6::__seqof6(const __seqof6 & that) {
    OSSTRY {
	do_copy(that, &__seqof6_copy);
    } OSSCLEAN(__seqof6)
}

/* Destructor */

__seqof6::~__seqof6() {
    do_destroy(&__seqof6_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof6 & __seqof6::operator = (const __seqof6 & that) {
    do_destroy(&__seqof6_destroy);
    do_copy(that, &__seqof6_copy);
    return *this;
}

int __seqof6::operator == (const __seqof6 & that) const {
    return do_compare(that, &__seqof6_compare);
}

int __seqof6::operator != (const __seqof6 & that) const {
    return !do_compare(that, &__seqof6_compare);
}

/* Locate ("At" etc) methods */

__seqof6::component *__seqof6::at(OssIndex pos) {
    return &((__seqof6_member *)pos)->value;
}

const __seqof6::component *__seqof6::at(OssIndex pos) const {
    return &((__seqof6_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof6::prepend(const component & val) {
    __seqof6_member *newrec = new __seqof6_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof6::prepend(__seqof6 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof6::insert_after(OssIndex pos, const component & val) {
    __seqof6_member *newrec = new __seqof6_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof6::insert_after(OssIndex pos, __seqof6 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof6::remove_front() {
    __seqof6_member *extr = (__seqof6_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof6_destroy(extr);
    return 0;
}

int __seqof6::remove_after(OssIndex pos) {
    __seqof6_member *extr = (__seqof6_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof6_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof6 *__seqof6::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof6 *)do_extract_after(begin, end);
}

void *Stop_Warning_Request::operator new(size_t size) {
    return ossNewFunc(size);
}

void Stop_Warning_Request::operator delete(void *ptr) {
    asn1Free(ptr);
}

Stop_Warning_Request::Stop_Warning_Request() {
    memset(this, 0, sizeof(Stop_Warning_Request));
}

Stop_Warning_Request::Stop_Warning_Request(const Stop_Warning_Request & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	protocolIEs_field = that.protocolIEs_field;
	protocolExtensions_field = that.protocolExtensions_field;
    } OSSCLEAN(Stop_Warning_Request)
}

Stop_Warning_Request::Stop_Warning_Request(const protocolIEs & protocolIEs_val, const protocolExtensions & protocolExtensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	protocolIEs_field = protocolIEs_val;
	protocolExtensions_field = protocolExtensions_val;
    } OSSCLEAN(Stop_Warning_Request)
}

Stop_Warning_Request::Stop_Warning_Request(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	bit_mask = 0;
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(Stop_Warning_Request)
}

Stop_Warning_Request & Stop_Warning_Request::operator = (const Stop_Warning_Request & that) {
    if (this == &that)
	return *this;
    this->~Stop_Warning_Request();
    bit_mask = that.bit_mask;
    protocolIEs_field = that.protocolIEs_field;
    protocolExtensions_field = that.protocolExtensions_field;
    return *this;
}

int Stop_Warning_Request::operator == (const Stop_Warning_Request & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (protocolExtensions_field != that.protocolExtensions_field)
	    return 0;
    }
    return 1;
}

int Stop_Warning_Request::operator != (const Stop_Warning_Request & that) const {
    return !(operator ==(that));
}

Stop_Warning_Request::protocolIEs & Stop_Warning_Request::get_protocolIEs() {
    return protocolIEs_field;
}

const Stop_Warning_Request::protocolIEs & Stop_Warning_Request::get_protocolIEs() const {
    return protocolIEs_field;
}

void Stop_Warning_Request::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

Stop_Warning_Request::protocolExtensions *Stop_Warning_Request::get_protocolExtensions() {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

const Stop_Warning_Request::protocolExtensions *Stop_Warning_Request::get_protocolExtensions() const {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

void Stop_Warning_Request::set_protocolExtensions(const protocolExtensions & protocolExtensions_val) {
    bit_mask |= 0x80000000;
    protocolExtensions_field = protocolExtensions_val;
}

int Stop_Warning_Request::protocolExtensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Stop_Warning_Request::omit_protocolExtensions() {
    protocolExtensions_field.~__seqof6();
    bit_mask &= ~0x80000000;
}

/* Auxiliary data structures and functions for class __seqof17 */

class __seqof17_member {
public:
    __seqof17_member *next;
    __seqof17::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof17_member();
    __seqof17_member(const __seqof17::component & val);
};

void *__seqof17_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof17_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof17_member::__seqof17_member() {
}

__seqof17_member::__seqof17_member(const __seqof17::component & val) {
    value = val;
}

static void *__seqof17_copy(void *that) {
    return new __seqof17_member(((__seqof17_member *)that)->value);
}

static void __seqof17_destroy(void *that) {
    delete (__seqof17_member *)that;
}

static int __seqof17_compare(void *val1, void *val2) {
    return (((__seqof17_member *)val1)->value == ((__seqof17_member *)val2)->value);
}

/* Constructors */

__seqof17::__seqof17() {
}

__seqof17::__seqof17(const __seqof17 & that) {
    OSSTRY {
	do_copy(that, &__seqof17_copy);
    } OSSCLEAN(__seqof17)
}

/* Destructor */

__seqof17::~__seqof17() {
    do_destroy(&__seqof17_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof17 & __seqof17::operator = (const __seqof17 & that) {
    do_destroy(&__seqof17_destroy);
    do_copy(that, &__seqof17_copy);
    return *this;
}

int __seqof17::operator == (const __seqof17 & that) const {
    return do_compare(that, &__seqof17_compare);
}

int __seqof17::operator != (const __seqof17 & that) const {
    return !do_compare(that, &__seqof17_compare);
}

/* Locate ("At" etc) methods */

__seqof17::component *__seqof17::at(OssIndex pos) {
    return &((__seqof17_member *)pos)->value;
}

const __seqof17::component *__seqof17::at(OssIndex pos) const {
    return &((__seqof17_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof17::prepend(const component & val) {
    __seqof17_member *newrec = new __seqof17_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof17::prepend(__seqof17 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof17::insert_after(OssIndex pos, const component & val) {
    __seqof17_member *newrec = new __seqof17_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof17::insert_after(OssIndex pos, __seqof17 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof17::remove_front() {
    __seqof17_member *extr = (__seqof17_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof17_destroy(extr);
    return 0;
}

int __seqof17::remove_after(OssIndex pos) {
    __seqof17_member *extr = (__seqof17_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof17_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof17 *__seqof17::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof17 *)do_extract_after(begin, end);
}

void *Error_Indication::operator new(size_t size) {
    return ossNewFunc(size);
}

void Error_Indication::operator delete(void *ptr) {
    asn1Free(ptr);
}

Error_Indication::Error_Indication() {
    memset(this, 0, sizeof(Error_Indication));
}

Error_Indication::Error_Indication(const Error_Indication & that) {
    OSSTRY {
	protocolIEs_field = that.protocolIEs_field;
    } OSSCLEAN(Error_Indication)
}

Error_Indication::Error_Indication(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(Error_Indication)
}

Error_Indication & Error_Indication::operator = (const Error_Indication & that) {
    if (this == &that)
	return *this;
    protocolIEs_field = that.protocolIEs_field;
    return *this;
}

int Error_Indication::operator == (const Error_Indication & that) const {
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    return 1;
}

int Error_Indication::operator != (const Error_Indication & that) const {
    return !(operator ==(that));
}

Error_Indication::protocolIEs & Error_Indication::get_protocolIEs() {
    return protocolIEs_field;
}

const Error_Indication::protocolIEs & Error_Indication::get_protocolIEs() const {
    return protocolIEs_field;
}

void Error_Indication::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

/* Auxiliary data structures and functions for class __seqof9 */

class __seqof9_member {
public:
    __seqof9_member *next;
    __seqof9::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof9_member();
    __seqof9_member(const __seqof9::component & val);
};

void *__seqof9_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof9_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof9_member::__seqof9_member() {
}

__seqof9_member::__seqof9_member(const __seqof9::component & val) {
    value = val;
}

static void *__seqof9_copy(void *that) {
    return new __seqof9_member(((__seqof9_member *)that)->value);
}

static void __seqof9_destroy(void *that) {
    delete (__seqof9_member *)that;
}

static int __seqof9_compare(void *val1, void *val2) {
    return (((__seqof9_member *)val1)->value == ((__seqof9_member *)val2)->value);
}

/* Constructors */

__seqof9::__seqof9() {
}

__seqof9::__seqof9(const __seqof9 & that) {
    OSSTRY {
	do_copy(that, &__seqof9_copy);
    } OSSCLEAN(__seqof9)
}

/* Destructor */

__seqof9::~__seqof9() {
    do_destroy(&__seqof9_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof9 & __seqof9::operator = (const __seqof9 & that) {
    do_destroy(&__seqof9_destroy);
    do_copy(that, &__seqof9_copy);
    return *this;
}

int __seqof9::operator == (const __seqof9 & that) const {
    return do_compare(that, &__seqof9_compare);
}

int __seqof9::operator != (const __seqof9 & that) const {
    return !do_compare(that, &__seqof9_compare);
}

/* Locate ("At" etc) methods */

__seqof9::component *__seqof9::at(OssIndex pos) {
    return &((__seqof9_member *)pos)->value;
}

const __seqof9::component *__seqof9::at(OssIndex pos) const {
    return &((__seqof9_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof9::prepend(const component & val) {
    __seqof9_member *newrec = new __seqof9_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof9::prepend(__seqof9 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof9::insert_after(OssIndex pos, const component & val) {
    __seqof9_member *newrec = new __seqof9_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof9::insert_after(OssIndex pos, __seqof9 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof9::remove_front() {
    __seqof9_member *extr = (__seqof9_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof9_destroy(extr);
    return 0;
}

int __seqof9::remove_after(OssIndex pos) {
    __seqof9_member *extr = (__seqof9_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof9_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof9 *__seqof9::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof9 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __seqof10 */

class __seqof10_member {
public:
    __seqof10_member *next;
    __seqof10::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof10_member();
    __seqof10_member(const __seqof10::component & val);
};

void *__seqof10_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof10_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof10_member::__seqof10_member() {
}

__seqof10_member::__seqof10_member(const __seqof10::component & val) {
    value = val;
}

static void *__seqof10_copy(void *that) {
    return new __seqof10_member(((__seqof10_member *)that)->value);
}

static void __seqof10_destroy(void *that) {
    delete (__seqof10_member *)that;
}

static int __seqof10_compare(void *val1, void *val2) {
    return (((__seqof10_member *)val1)->value == ((__seqof10_member *)val2)->value);
}

/* Constructors */

__seqof10::__seqof10() {
}

__seqof10::__seqof10(const __seqof10 & that) {
    OSSTRY {
	do_copy(that, &__seqof10_copy);
    } OSSCLEAN(__seqof10)
}

/* Destructor */

__seqof10::~__seqof10() {
    do_destroy(&__seqof10_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof10 & __seqof10::operator = (const __seqof10 & that) {
    do_destroy(&__seqof10_destroy);
    do_copy(that, &__seqof10_copy);
    return *this;
}

int __seqof10::operator == (const __seqof10 & that) const {
    return do_compare(that, &__seqof10_compare);
}

int __seqof10::operator != (const __seqof10 & that) const {
    return !do_compare(that, &__seqof10_compare);
}

/* Locate ("At" etc) methods */

__seqof10::component *__seqof10::at(OssIndex pos) {
    return &((__seqof10_member *)pos)->value;
}

const __seqof10::component *__seqof10::at(OssIndex pos) const {
    return &((__seqof10_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof10::prepend(const component & val) {
    __seqof10_member *newrec = new __seqof10_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof10::prepend(__seqof10 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof10::insert_after(OssIndex pos, const component & val) {
    __seqof10_member *newrec = new __seqof10_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof10::insert_after(OssIndex pos, __seqof10 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof10::remove_front() {
    __seqof10_member *extr = (__seqof10_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof10_destroy(extr);
    return 0;
}

int __seqof10::remove_after(OssIndex pos) {
    __seqof10_member *extr = (__seqof10_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof10_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof10 *__seqof10::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof10 *)do_extract_after(begin, end);
}

void *Write_Replace_Warning_Indication::operator new(size_t size) {
    return ossNewFunc(size);
}

void Write_Replace_Warning_Indication::operator delete(void *ptr) {
    asn1Free(ptr);
}

Write_Replace_Warning_Indication::Write_Replace_Warning_Indication() {
    memset(this, 0, sizeof(Write_Replace_Warning_Indication));
}

Write_Replace_Warning_Indication::Write_Replace_Warning_Indication(const Write_Replace_Warning_Indication & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	protocolIEs_field = that.protocolIEs_field;
	protocolExtensions_field = that.protocolExtensions_field;
    } OSSCLEAN(Write_Replace_Warning_Indication)
}

Write_Replace_Warning_Indication::Write_Replace_Warning_Indication(const protocolIEs & protocolIEs_val, 
    const protocolExtensions & protocolExtensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	protocolIEs_field = protocolIEs_val;
	protocolExtensions_field = protocolExtensions_val;
    } OSSCLEAN(Write_Replace_Warning_Indication)
}

Write_Replace_Warning_Indication::Write_Replace_Warning_Indication(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	bit_mask = 0;
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(Write_Replace_Warning_Indication)
}

Write_Replace_Warning_Indication & Write_Replace_Warning_Indication::operator = (const Write_Replace_Warning_Indication & that) {
    if (this == &that)
	return *this;
    this->~Write_Replace_Warning_Indication();
    bit_mask = that.bit_mask;
    protocolIEs_field = that.protocolIEs_field;
    protocolExtensions_field = that.protocolExtensions_field;
    return *this;
}

int Write_Replace_Warning_Indication::operator == (const Write_Replace_Warning_Indication & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (protocolExtensions_field != that.protocolExtensions_field)
	    return 0;
    }
    return 1;
}

int Write_Replace_Warning_Indication::operator != (const Write_Replace_Warning_Indication & that) const {
    return !(operator ==(that));
}

Write_Replace_Warning_Indication::protocolIEs & Write_Replace_Warning_Indication::get_protocolIEs() {
    return protocolIEs_field;
}

const Write_Replace_Warning_Indication::protocolIEs & Write_Replace_Warning_Indication::get_protocolIEs() const {
    return protocolIEs_field;
}

void Write_Replace_Warning_Indication::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

Write_Replace_Warning_Indication::protocolExtensions *Write_Replace_Warning_Indication::get_protocolExtensions() {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

const Write_Replace_Warning_Indication::protocolExtensions *Write_Replace_Warning_Indication::get_protocolExtensions() const {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

void Write_Replace_Warning_Indication::set_protocolExtensions(const protocolExtensions & protocolExtensions_val) {
    bit_mask |= 0x80000000;
    protocolExtensions_field = protocolExtensions_val;
}

int Write_Replace_Warning_Indication::protocolExtensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Write_Replace_Warning_Indication::omit_protocolExtensions() {
    protocolExtensions_field.~__seqof10();
    bit_mask &= ~0x80000000;
}

/* Auxiliary data structures and functions for class __seqof11 */

class __seqof11_member {
public:
    __seqof11_member *next;
    __seqof11::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof11_member();
    __seqof11_member(const __seqof11::component & val);
};

void *__seqof11_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof11_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof11_member::__seqof11_member() {
}

__seqof11_member::__seqof11_member(const __seqof11::component & val) {
    value = val;
}

static void *__seqof11_copy(void *that) {
    return new __seqof11_member(((__seqof11_member *)that)->value);
}

static void __seqof11_destroy(void *that) {
    delete (__seqof11_member *)that;
}

static int __seqof11_compare(void *val1, void *val2) {
    return (((__seqof11_member *)val1)->value == ((__seqof11_member *)val2)->value);
}

/* Constructors */

__seqof11::__seqof11() {
}

__seqof11::__seqof11(const __seqof11 & that) {
    OSSTRY {
	do_copy(that, &__seqof11_copy);
    } OSSCLEAN(__seqof11)
}

/* Destructor */

__seqof11::~__seqof11() {
    do_destroy(&__seqof11_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof11 & __seqof11::operator = (const __seqof11 & that) {
    do_destroy(&__seqof11_destroy);
    do_copy(that, &__seqof11_copy);
    return *this;
}

int __seqof11::operator == (const __seqof11 & that) const {
    return do_compare(that, &__seqof11_compare);
}

int __seqof11::operator != (const __seqof11 & that) const {
    return !do_compare(that, &__seqof11_compare);
}

/* Locate ("At" etc) methods */

__seqof11::component *__seqof11::at(OssIndex pos) {
    return &((__seqof11_member *)pos)->value;
}

const __seqof11::component *__seqof11::at(OssIndex pos) const {
    return &((__seqof11_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof11::prepend(const component & val) {
    __seqof11_member *newrec = new __seqof11_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof11::prepend(__seqof11 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof11::insert_after(OssIndex pos, const component & val) {
    __seqof11_member *newrec = new __seqof11_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof11::insert_after(OssIndex pos, __seqof11 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof11::remove_front() {
    __seqof11_member *extr = (__seqof11_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof11_destroy(extr);
    return 0;
}

int __seqof11::remove_after(OssIndex pos) {
    __seqof11_member *extr = (__seqof11_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof11_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof11 *__seqof11::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof11 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __seqof12 */

class __seqof12_member {
public:
    __seqof12_member *next;
    __seqof12::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof12_member();
    __seqof12_member(const __seqof12::component & val);
};

void *__seqof12_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof12_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof12_member::__seqof12_member() {
}

__seqof12_member::__seqof12_member(const __seqof12::component & val) {
    value = val;
}

static void *__seqof12_copy(void *that) {
    return new __seqof12_member(((__seqof12_member *)that)->value);
}

static void __seqof12_destroy(void *that) {
    delete (__seqof12_member *)that;
}

static int __seqof12_compare(void *val1, void *val2) {
    return (((__seqof12_member *)val1)->value == ((__seqof12_member *)val2)->value);
}

/* Constructors */

__seqof12::__seqof12() {
}

__seqof12::__seqof12(const __seqof12 & that) {
    OSSTRY {
	do_copy(that, &__seqof12_copy);
    } OSSCLEAN(__seqof12)
}

/* Destructor */

__seqof12::~__seqof12() {
    do_destroy(&__seqof12_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof12 & __seqof12::operator = (const __seqof12 & that) {
    do_destroy(&__seqof12_destroy);
    do_copy(that, &__seqof12_copy);
    return *this;
}

int __seqof12::operator == (const __seqof12 & that) const {
    return do_compare(that, &__seqof12_compare);
}

int __seqof12::operator != (const __seqof12 & that) const {
    return !do_compare(that, &__seqof12_compare);
}

/* Locate ("At" etc) methods */

__seqof12::component *__seqof12::at(OssIndex pos) {
    return &((__seqof12_member *)pos)->value;
}

const __seqof12::component *__seqof12::at(OssIndex pos) const {
    return &((__seqof12_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof12::prepend(const component & val) {
    __seqof12_member *newrec = new __seqof12_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof12::prepend(__seqof12 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof12::insert_after(OssIndex pos, const component & val) {
    __seqof12_member *newrec = new __seqof12_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof12::insert_after(OssIndex pos, __seqof12 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof12::remove_front() {
    __seqof12_member *extr = (__seqof12_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof12_destroy(extr);
    return 0;
}

int __seqof12::remove_after(OssIndex pos) {
    __seqof12_member *extr = (__seqof12_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof12_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof12 *__seqof12::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof12 *)do_extract_after(begin, end);
}

void *Stop_Warning_Indication::operator new(size_t size) {
    return ossNewFunc(size);
}

void Stop_Warning_Indication::operator delete(void *ptr) {
    asn1Free(ptr);
}

Stop_Warning_Indication::Stop_Warning_Indication() {
    memset(this, 0, sizeof(Stop_Warning_Indication));
}

Stop_Warning_Indication::Stop_Warning_Indication(const Stop_Warning_Indication & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	protocolIEs_field = that.protocolIEs_field;
	protocolExtensions_field = that.protocolExtensions_field;
    } OSSCLEAN(Stop_Warning_Indication)
}

Stop_Warning_Indication::Stop_Warning_Indication(const protocolIEs & protocolIEs_val, 
    const protocolExtensions & protocolExtensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	protocolIEs_field = protocolIEs_val;
	protocolExtensions_field = protocolExtensions_val;
    } OSSCLEAN(Stop_Warning_Indication)
}

Stop_Warning_Indication::Stop_Warning_Indication(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	bit_mask = 0;
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(Stop_Warning_Indication)
}

Stop_Warning_Indication & Stop_Warning_Indication::operator = (const Stop_Warning_Indication & that) {
    if (this == &that)
	return *this;
    this->~Stop_Warning_Indication();
    bit_mask = that.bit_mask;
    protocolIEs_field = that.protocolIEs_field;
    protocolExtensions_field = that.protocolExtensions_field;
    return *this;
}

int Stop_Warning_Indication::operator == (const Stop_Warning_Indication & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (protocolExtensions_field != that.protocolExtensions_field)
	    return 0;
    }
    return 1;
}

int Stop_Warning_Indication::operator != (const Stop_Warning_Indication & that) const {
    return !(operator ==(that));
}

Stop_Warning_Indication::protocolIEs & Stop_Warning_Indication::get_protocolIEs() {
    return protocolIEs_field;
}

const Stop_Warning_Indication::protocolIEs & Stop_Warning_Indication::get_protocolIEs() const {
    return protocolIEs_field;
}

void Stop_Warning_Indication::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

Stop_Warning_Indication::protocolExtensions *Stop_Warning_Indication::get_protocolExtensions() {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

const Stop_Warning_Indication::protocolExtensions *Stop_Warning_Indication::get_protocolExtensions() const {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

void Stop_Warning_Indication::set_protocolExtensions(const protocolExtensions & protocolExtensions_val) {
    bit_mask |= 0x80000000;
    protocolExtensions_field = protocolExtensions_val;
}

int Stop_Warning_Indication::protocolExtensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Stop_Warning_Indication::omit_protocolExtensions() {
    protocolExtensions_field.~__seqof12();
    bit_mask &= ~0x80000000;
}

/* Auxiliary data structures and functions for class __seqof13 */

class __seqof13_member {
public:
    __seqof13_member *next;
    __seqof13::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof13_member();
    __seqof13_member(const __seqof13::component & val);
};

void *__seqof13_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof13_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof13_member::__seqof13_member() {
}

__seqof13_member::__seqof13_member(const __seqof13::component & val) {
    value = val;
}

static void *__seqof13_copy(void *that) {
    return new __seqof13_member(((__seqof13_member *)that)->value);
}

static void __seqof13_destroy(void *that) {
    delete (__seqof13_member *)that;
}

static int __seqof13_compare(void *val1, void *val2) {
    return (((__seqof13_member *)val1)->value == ((__seqof13_member *)val2)->value);
}

/* Constructors */

__seqof13::__seqof13() {
}

__seqof13::__seqof13(const __seqof13 & that) {
    OSSTRY {
	do_copy(that, &__seqof13_copy);
    } OSSCLEAN(__seqof13)
}

/* Destructor */

__seqof13::~__seqof13() {
    do_destroy(&__seqof13_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof13 & __seqof13::operator = (const __seqof13 & that) {
    do_destroy(&__seqof13_destroy);
    do_copy(that, &__seqof13_copy);
    return *this;
}

int __seqof13::operator == (const __seqof13 & that) const {
    return do_compare(that, &__seqof13_compare);
}

int __seqof13::operator != (const __seqof13 & that) const {
    return !do_compare(that, &__seqof13_compare);
}

/* Locate ("At" etc) methods */

__seqof13::component *__seqof13::at(OssIndex pos) {
    return &((__seqof13_member *)pos)->value;
}

const __seqof13::component *__seqof13::at(OssIndex pos) const {
    return &((__seqof13_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof13::prepend(const component & val) {
    __seqof13_member *newrec = new __seqof13_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof13::prepend(__seqof13 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof13::insert_after(OssIndex pos, const component & val) {
    __seqof13_member *newrec = new __seqof13_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof13::insert_after(OssIndex pos, __seqof13 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof13::remove_front() {
    __seqof13_member *extr = (__seqof13_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof13_destroy(extr);
    return 0;
}

int __seqof13::remove_after(OssIndex pos) {
    __seqof13_member *extr = (__seqof13_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof13_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof13 *__seqof13::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof13 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __seqof14 */

class __seqof14_member {
public:
    __seqof14_member *next;
    __seqof14::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof14_member();
    __seqof14_member(const __seqof14::component & val);
};

void *__seqof14_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof14_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof14_member::__seqof14_member() {
}

__seqof14_member::__seqof14_member(const __seqof14::component & val) {
    value = val;
}

static void *__seqof14_copy(void *that) {
    return new __seqof14_member(((__seqof14_member *)that)->value);
}

static void __seqof14_destroy(void *that) {
    delete (__seqof14_member *)that;
}

static int __seqof14_compare(void *val1, void *val2) {
    return (((__seqof14_member *)val1)->value == ((__seqof14_member *)val2)->value);
}

/* Constructors */

__seqof14::__seqof14() {
}

__seqof14::__seqof14(const __seqof14 & that) {
    OSSTRY {
	do_copy(that, &__seqof14_copy);
    } OSSCLEAN(__seqof14)
}

/* Destructor */

__seqof14::~__seqof14() {
    do_destroy(&__seqof14_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof14 & __seqof14::operator = (const __seqof14 & that) {
    do_destroy(&__seqof14_destroy);
    do_copy(that, &__seqof14_copy);
    return *this;
}

int __seqof14::operator == (const __seqof14 & that) const {
    return do_compare(that, &__seqof14_compare);
}

int __seqof14::operator != (const __seqof14 & that) const {
    return !do_compare(that, &__seqof14_compare);
}

/* Locate ("At" etc) methods */

__seqof14::component *__seqof14::at(OssIndex pos) {
    return &((__seqof14_member *)pos)->value;
}

const __seqof14::component *__seqof14::at(OssIndex pos) const {
    return &((__seqof14_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof14::prepend(const component & val) {
    __seqof14_member *newrec = new __seqof14_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof14::prepend(__seqof14 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof14::insert_after(OssIndex pos, const component & val) {
    __seqof14_member *newrec = new __seqof14_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof14::insert_after(OssIndex pos, __seqof14 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof14::remove_front() {
    __seqof14_member *extr = (__seqof14_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof14_destroy(extr);
    return 0;
}

int __seqof14::remove_after(OssIndex pos) {
    __seqof14_member *extr = (__seqof14_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof14_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof14 *__seqof14::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof14 *)do_extract_after(begin, end);
}

void *PWS_Restart_Indication::operator new(size_t size) {
    return ossNewFunc(size);
}

void PWS_Restart_Indication::operator delete(void *ptr) {
    asn1Free(ptr);
}

PWS_Restart_Indication::PWS_Restart_Indication() {
    memset(this, 0, sizeof(PWS_Restart_Indication));
}

PWS_Restart_Indication::PWS_Restart_Indication(const PWS_Restart_Indication & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	protocolIEs_field = that.protocolIEs_field;
	protocolExtensions_field = that.protocolExtensions_field;
    } OSSCLEAN(PWS_Restart_Indication)
}

PWS_Restart_Indication::PWS_Restart_Indication(const protocolIEs & protocolIEs_val, 
    const protocolExtensions & protocolExtensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	protocolIEs_field = protocolIEs_val;
	protocolExtensions_field = protocolExtensions_val;
    } OSSCLEAN(PWS_Restart_Indication)
}

PWS_Restart_Indication::PWS_Restart_Indication(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	bit_mask = 0;
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(PWS_Restart_Indication)
}

PWS_Restart_Indication & PWS_Restart_Indication::operator = (const PWS_Restart_Indication & that) {
    if (this == &that)
	return *this;
    this->~PWS_Restart_Indication();
    bit_mask = that.bit_mask;
    protocolIEs_field = that.protocolIEs_field;
    protocolExtensions_field = that.protocolExtensions_field;
    return *this;
}

int PWS_Restart_Indication::operator == (const PWS_Restart_Indication & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (protocolExtensions_field != that.protocolExtensions_field)
	    return 0;
    }
    return 1;
}

int PWS_Restart_Indication::operator != (const PWS_Restart_Indication & that) const {
    return !(operator ==(that));
}

PWS_Restart_Indication::protocolIEs & PWS_Restart_Indication::get_protocolIEs() {
    return protocolIEs_field;
}

const PWS_Restart_Indication::protocolIEs & PWS_Restart_Indication::get_protocolIEs() const {
    return protocolIEs_field;
}

void PWS_Restart_Indication::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

PWS_Restart_Indication::protocolExtensions *PWS_Restart_Indication::get_protocolExtensions() {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

const PWS_Restart_Indication::protocolExtensions *PWS_Restart_Indication::get_protocolExtensions() const {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

void PWS_Restart_Indication::set_protocolExtensions(const protocolExtensions & protocolExtensions_val) {
    bit_mask |= 0x80000000;
    protocolExtensions_field = protocolExtensions_val;
}

int PWS_Restart_Indication::protocolExtensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void PWS_Restart_Indication::omit_protocolExtensions() {
    protocolExtensions_field.~__seqof14();
    bit_mask &= ~0x80000000;
}

/* Auxiliary data structures and functions for class __seqof15 */

class __seqof15_member {
public:
    __seqof15_member *next;
    __seqof15::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof15_member();
    __seqof15_member(const __seqof15::component & val);
};

void *__seqof15_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof15_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof15_member::__seqof15_member() {
}

__seqof15_member::__seqof15_member(const __seqof15::component & val) {
    value = val;
}

static void *__seqof15_copy(void *that) {
    return new __seqof15_member(((__seqof15_member *)that)->value);
}

static void __seqof15_destroy(void *that) {
    delete (__seqof15_member *)that;
}

static int __seqof15_compare(void *val1, void *val2) {
    return (((__seqof15_member *)val1)->value == ((__seqof15_member *)val2)->value);
}

/* Constructors */

__seqof15::__seqof15() {
}

__seqof15::__seqof15(const __seqof15 & that) {
    OSSTRY {
	do_copy(that, &__seqof15_copy);
    } OSSCLEAN(__seqof15)
}

/* Destructor */

__seqof15::~__seqof15() {
    do_destroy(&__seqof15_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof15 & __seqof15::operator = (const __seqof15 & that) {
    do_destroy(&__seqof15_destroy);
    do_copy(that, &__seqof15_copy);
    return *this;
}

int __seqof15::operator == (const __seqof15 & that) const {
    return do_compare(that, &__seqof15_compare);
}

int __seqof15::operator != (const __seqof15 & that) const {
    return !do_compare(that, &__seqof15_compare);
}

/* Locate ("At" etc) methods */

__seqof15::component *__seqof15::at(OssIndex pos) {
    return &((__seqof15_member *)pos)->value;
}

const __seqof15::component *__seqof15::at(OssIndex pos) const {
    return &((__seqof15_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof15::prepend(const component & val) {
    __seqof15_member *newrec = new __seqof15_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof15::prepend(__seqof15 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof15::insert_after(OssIndex pos, const component & val) {
    __seqof15_member *newrec = new __seqof15_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof15::insert_after(OssIndex pos, __seqof15 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof15::remove_front() {
    __seqof15_member *extr = (__seqof15_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof15_destroy(extr);
    return 0;
}

int __seqof15::remove_after(OssIndex pos) {
    __seqof15_member *extr = (__seqof15_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof15_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof15 *__seqof15::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof15 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __seqof16 */

class __seqof16_member {
public:
    __seqof16_member *next;
    __seqof16::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __seqof16_member();
    __seqof16_member(const __seqof16::component & val);
};

void *__seqof16_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seqof16_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seqof16_member::__seqof16_member() {
}

__seqof16_member::__seqof16_member(const __seqof16::component & val) {
    value = val;
}

static void *__seqof16_copy(void *that) {
    return new __seqof16_member(((__seqof16_member *)that)->value);
}

static void __seqof16_destroy(void *that) {
    delete (__seqof16_member *)that;
}

static int __seqof16_compare(void *val1, void *val2) {
    return (((__seqof16_member *)val1)->value == ((__seqof16_member *)val2)->value);
}

/* Constructors */

__seqof16::__seqof16() {
}

__seqof16::__seqof16(const __seqof16 & that) {
    OSSTRY {
	do_copy(that, &__seqof16_copy);
    } OSSCLEAN(__seqof16)
}

/* Destructor */

__seqof16::~__seqof16() {
    do_destroy(&__seqof16_destroy);
}

/* Operators: assignment, equality, inequality */

__seqof16 & __seqof16::operator = (const __seqof16 & that) {
    do_destroy(&__seqof16_destroy);
    do_copy(that, &__seqof16_copy);
    return *this;
}

int __seqof16::operator == (const __seqof16 & that) const {
    return do_compare(that, &__seqof16_compare);
}

int __seqof16::operator != (const __seqof16 & that) const {
    return !do_compare(that, &__seqof16_compare);
}

/* Locate ("At" etc) methods */

__seqof16::component *__seqof16::at(OssIndex pos) {
    return &((__seqof16_member *)pos)->value;
}

const __seqof16::component *__seqof16::at(OssIndex pos) const {
    return &((__seqof16_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __seqof16::prepend(const component & val) {
    __seqof16_member *newrec = new __seqof16_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __seqof16::prepend(__seqof16 *seq) {
    return do_prepend(seq);
}

OssIndex __seqof16::insert_after(OssIndex pos, const component & val) {
    __seqof16_member *newrec = new __seqof16_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __seqof16::insert_after(OssIndex pos, __seqof16 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __seqof16::remove_front() {
    __seqof16_member *extr = (__seqof16_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof16_destroy(extr);
    return 0;
}

int __seqof16::remove_after(OssIndex pos) {
    __seqof16_member *extr = (__seqof16_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __seqof16_destroy(extr);
    return 0;
}

/* Extract methods */

__seqof16 *__seqof16::extract_after(OssIndex begin, OssIndex end) {
    return (__seqof16 *)do_extract_after(begin, end);
}

void *PWS_Failure_Indication::operator new(size_t size) {
    return ossNewFunc(size);
}

void PWS_Failure_Indication::operator delete(void *ptr) {
    asn1Free(ptr);
}

PWS_Failure_Indication::PWS_Failure_Indication() {
    memset(this, 0, sizeof(PWS_Failure_Indication));
}

PWS_Failure_Indication::PWS_Failure_Indication(const PWS_Failure_Indication & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	protocolIEs_field = that.protocolIEs_field;
	protocolExtensions_field = that.protocolExtensions_field;
    } OSSCLEAN(PWS_Failure_Indication)
}

PWS_Failure_Indication::PWS_Failure_Indication(const protocolIEs & protocolIEs_val, 
    const protocolExtensions & protocolExtensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	protocolIEs_field = protocolIEs_val;
	protocolExtensions_field = protocolExtensions_val;
    } OSSCLEAN(PWS_Failure_Indication)
}

PWS_Failure_Indication::PWS_Failure_Indication(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	bit_mask = 0;
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(PWS_Failure_Indication)
}

PWS_Failure_Indication & PWS_Failure_Indication::operator = (const PWS_Failure_Indication & that) {
    if (this == &that)
	return *this;
    this->~PWS_Failure_Indication();
    bit_mask = that.bit_mask;
    protocolIEs_field = that.protocolIEs_field;
    protocolExtensions_field = that.protocolExtensions_field;
    return *this;
}

int PWS_Failure_Indication::operator == (const PWS_Failure_Indication & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (protocolExtensions_field != that.protocolExtensions_field)
	    return 0;
    }
    return 1;
}

int PWS_Failure_Indication::operator != (const PWS_Failure_Indication & that) const {
    return !(operator ==(that));
}

PWS_Failure_Indication::protocolIEs & PWS_Failure_Indication::get_protocolIEs() {
    return protocolIEs_field;
}

const PWS_Failure_Indication::protocolIEs & PWS_Failure_Indication::get_protocolIEs() const {
    return protocolIEs_field;
}

void PWS_Failure_Indication::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

PWS_Failure_Indication::protocolExtensions *PWS_Failure_Indication::get_protocolExtensions() {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

const PWS_Failure_Indication::protocolExtensions *PWS_Failure_Indication::get_protocolExtensions() const {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

void PWS_Failure_Indication::set_protocolExtensions(const protocolExtensions & protocolExtensions_val) {
    bit_mask |= 0x80000000;
    protocolExtensions_field = protocolExtensions_val;
}

int PWS_Failure_Indication::protocolExtensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void PWS_Failure_Indication::omit_protocolExtensions() {
    protocolExtensions_field.~__seqof16();
    bit_mask &= ~0x80000000;
}

SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage()
{
}

SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage(const SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage & that)
{
    operator =(that);
}

SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::~SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage()
{
    cleanup_decoded();
}

SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage & SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::operator = (const SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::operator == (const SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::operator != (const SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage & that) const
{
    return !(operator ==(that));
}

int SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Write_Replace_Warning_Request *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Write_Replace_Warning_Request()
{
    if (pdunum == 2)
	return (Write_Replace_Warning_Request *)decoded;
    else
	return NULL;
}

const Write_Replace_Warning_Request *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Write_Replace_Warning_Request() const
{
    if (pdunum == 2)
	return (const Write_Replace_Warning_Request *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Write_Replace_Warning_Request(const Write_Replace_Warning_Request & data)
{
    void *copy;

    copy = new Write_Replace_Warning_Request(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 2;
	decoded = copy;
    }
}

Write_Replace_Warning_Request *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::release_Write_Replace_Warning_Request()
{
    Write_Replace_Warning_Request * dvalue = pdunum == 2 ? (Write_Replace_Warning_Request *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Write_Replace_Warning_Request(Write_Replace_Warning_Request *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 2;
    decoded = data;
}

Stop_Warning_Request *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Stop_Warning_Request()
{
    if (pdunum == 4)
	return (Stop_Warning_Request *)decoded;
    else
	return NULL;
}

const Stop_Warning_Request *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Stop_Warning_Request() const
{
    if (pdunum == 4)
	return (const Stop_Warning_Request *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Stop_Warning_Request(const Stop_Warning_Request & data)
{
    void *copy;

    copy = new Stop_Warning_Request(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 4;
	decoded = copy;
    }
}

Stop_Warning_Request *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::release_Stop_Warning_Request()
{
    Stop_Warning_Request * dvalue = pdunum == 4 ? (Stop_Warning_Request *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Stop_Warning_Request(Stop_Warning_Request *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 4;
    decoded = data;
}

Error_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Error_Indication()
{
    if (pdunum == 10)
	return (Error_Indication *)decoded;
    else
	return NULL;
}

const Error_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Error_Indication() const
{
    if (pdunum == 10)
	return (const Error_Indication *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Error_Indication(const Error_Indication & data)
{
    void *copy;

    copy = new Error_Indication(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 10;
	decoded = copy;
    }
}

Error_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::release_Error_Indication()
{
    Error_Indication * dvalue = pdunum == 10 ? (Error_Indication *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Error_Indication(Error_Indication *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 10;
    decoded = data;
}

Write_Replace_Warning_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Write_Replace_Warning_Indication()
{
    if (pdunum == 6)
	return (Write_Replace_Warning_Indication *)decoded;
    else
	return NULL;
}

const Write_Replace_Warning_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Write_Replace_Warning_Indication() const
{
    if (pdunum == 6)
	return (const Write_Replace_Warning_Indication *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Write_Replace_Warning_Indication(const Write_Replace_Warning_Indication & data)
{
    void *copy;

    copy = new Write_Replace_Warning_Indication(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 6;
	decoded = copy;
    }
}

Write_Replace_Warning_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::release_Write_Replace_Warning_Indication()
{
    Write_Replace_Warning_Indication * dvalue = pdunum == 6 ? (Write_Replace_Warning_Indication *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Write_Replace_Warning_Indication(Write_Replace_Warning_Indication *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 6;
    decoded = data;
}

Stop_Warning_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Stop_Warning_Indication()
{
    if (pdunum == 7)
	return (Stop_Warning_Indication *)decoded;
    else
	return NULL;
}

const Stop_Warning_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_Stop_Warning_Indication() const
{
    if (pdunum == 7)
	return (const Stop_Warning_Indication *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Stop_Warning_Indication(const Stop_Warning_Indication & data)
{
    void *copy;

    copy = new Stop_Warning_Indication(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 7;
	decoded = copy;
    }
}

Stop_Warning_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::release_Stop_Warning_Indication()
{
    Stop_Warning_Indication * dvalue = pdunum == 7 ? (Stop_Warning_Indication *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_Stop_Warning_Indication(Stop_Warning_Indication *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 7;
    decoded = data;
}

PWS_Restart_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_PWS_Restart_Indication()
{
    if (pdunum == 8)
	return (PWS_Restart_Indication *)decoded;
    else
	return NULL;
}

const PWS_Restart_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_PWS_Restart_Indication() const
{
    if (pdunum == 8)
	return (const PWS_Restart_Indication *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_PWS_Restart_Indication(const PWS_Restart_Indication & data)
{
    void *copy;

    copy = new PWS_Restart_Indication(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 8;
	decoded = copy;
    }
}

PWS_Restart_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::release_PWS_Restart_Indication()
{
    PWS_Restart_Indication * dvalue = pdunum == 8 ? (PWS_Restart_Indication *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_PWS_Restart_Indication(PWS_Restart_Indication *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 8;
    decoded = data;
}

PWS_Failure_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_PWS_Failure_Indication()
{
    if (pdunum == 9)
	return (PWS_Failure_Indication *)decoded;
    else
	return NULL;
}

const PWS_Failure_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::get_PWS_Failure_Indication() const
{
    if (pdunum == 9)
	return (const PWS_Failure_Indication *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_PWS_Failure_Indication(const PWS_Failure_Indication & data)
{
    void *copy;

    copy = new PWS_Failure_Indication(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 9;
	decoded = copy;
    }
}

PWS_Failure_Indication *SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::release_PWS_Failure_Indication()
{
    PWS_Failure_Indication * dvalue = pdunum == 9 ? (PWS_Failure_Indication *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::set_PWS_Failure_Indication(PWS_Failure_Indication *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 9;
    decoded = data;
}

void SBC_AP_ELEMENTARY_PROCEDURES_InitiatingMessage::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *InitiatingMessage::operator new(size_t size) {
    return ossNewFunc(size);
}

void InitiatingMessage::operator delete(void *ptr) {
    asn1Free(ptr);
}

InitiatingMessage::InitiatingMessage() {
    memset(this, 0, sizeof(InitiatingMessage));
}

InitiatingMessage::InitiatingMessage(const InitiatingMessage & that) {
    OSSTRY {
	procedureCode_field = that.procedureCode_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(InitiatingMessage)
}

InitiatingMessage::InitiatingMessage(procedureCode procedureCode_val, criticality criticality_val, 
    const value & value_val) {
    OSSTRY {
	procedureCode_field = procedureCode_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(InitiatingMessage)
}

InitiatingMessage & InitiatingMessage::operator = (const InitiatingMessage & that) {
    if (this == &that)
	return *this;
    procedureCode_field = that.procedureCode_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int InitiatingMessage::operator == (const InitiatingMessage & that) const {
    if (procedureCode_field != that.procedureCode_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int InitiatingMessage::operator != (const InitiatingMessage & that) const {
    return !(operator ==(that));
}

InitiatingMessage::procedureCode & InitiatingMessage::get_procedureCode() {
    return procedureCode_field;
}

InitiatingMessage::procedureCode InitiatingMessage::get_procedureCode() const {
    return procedureCode_field;
}

void InitiatingMessage::set_procedureCode(procedureCode procedureCode_val) {
    procedureCode_field = procedureCode_val;
}

InitiatingMessage::criticality & InitiatingMessage::get_criticality() {
    return criticality_field;
}

InitiatingMessage::criticality InitiatingMessage::get_criticality() const {
    return criticality_field;
}

void InitiatingMessage::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

InitiatingMessage::value & InitiatingMessage::get_value() {
    return value_field;
}

const InitiatingMessage::value & InitiatingMessage::get_value() const {
    return value_field;
}

void InitiatingMessage::set_value(const value & value_val) {
    value_field = value_val;
}

/* Auxiliary data structures and functions for class __shared25 */

class __shared25_member {
public:
    __shared25_member *next;
    __shared25::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared25_member();
    __shared25_member(const __shared25::component & val);
};

void *__shared25_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared25_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared25_member::__shared25_member() {
}

__shared25_member::__shared25_member(const __shared25::component & val) {
    value = val;
}

static void *__shared25_copy(void *that) {
    return new __shared25_member(((__shared25_member *)that)->value);
}

static void __shared25_destroy(void *that) {
    delete (__shared25_member *)that;
}

static int __shared25_compare(void *val1, void *val2) {
    return (((__shared25_member *)val1)->value == ((__shared25_member *)val2)->value);
}

/* Constructors */

__shared25::__shared25() {
}

__shared25::__shared25(const __shared25 & that) {
    OSSTRY {
	do_copy(that, &__shared25_copy);
    } OSSCLEAN(__shared25)
}

/* Destructor */

__shared25::~__shared25() {
    do_destroy(&__shared25_destroy);
}

/* Operators: assignment, equality, inequality */

__shared25 & __shared25::operator = (const __shared25 & that) {
    do_destroy(&__shared25_destroy);
    do_copy(that, &__shared25_copy);
    return *this;
}

int __shared25::operator == (const __shared25 & that) const {
    return do_compare(that, &__shared25_compare);
}

int __shared25::operator != (const __shared25 & that) const {
    return !do_compare(that, &__shared25_compare);
}

/* Locate ("At" etc) methods */

__shared25::component *__shared25::at(OssIndex pos) {
    return &((__shared25_member *)pos)->value;
}

const __shared25::component *__shared25::at(OssIndex pos) const {
    return &((__shared25_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared25::prepend(const component & val) {
    __shared25_member *newrec = new __shared25_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared25::prepend(__shared25 *seq) {
    return do_prepend(seq);
}

OssIndex __shared25::insert_after(OssIndex pos, const component & val) {
    __shared25_member *newrec = new __shared25_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared25::insert_after(OssIndex pos, __shared25 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared25::remove_front() {
    __shared25_member *extr = (__shared25_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared25_destroy(extr);
    return 0;
}

int __shared25::remove_after(OssIndex pos) {
    __shared25_member *extr = (__shared25_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared25_destroy(extr);
    return 0;
}

/* Extract methods */

__shared25 *__shared25::extract_after(OssIndex begin, OssIndex end) {
    return (__shared25 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared27 */

class __shared27_member {
public:
    __shared27_member *next;
    __shared27::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared27_member();
    __shared27_member(const __shared27::component & val);
};

void *__shared27_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared27_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared27_member::__shared27_member() {
}

__shared27_member::__shared27_member(const __shared27::component & val) {
    value = val;
}

static void *__shared27_copy(void *that) {
    return new __shared27_member(((__shared27_member *)that)->value);
}

static void __shared27_destroy(void *that) {
    delete (__shared27_member *)that;
}

static int __shared27_compare(void *val1, void *val2) {
    return (((__shared27_member *)val1)->value == ((__shared27_member *)val2)->value);
}

/* Constructors */

__shared27::__shared27() {
}

__shared27::__shared27(const __shared27 & that) {
    OSSTRY {
	do_copy(that, &__shared27_copy);
    } OSSCLEAN(__shared27)
}

/* Destructor */

__shared27::~__shared27() {
    do_destroy(&__shared27_destroy);
}

/* Operators: assignment, equality, inequality */

__shared27 & __shared27::operator = (const __shared27 & that) {
    do_destroy(&__shared27_destroy);
    do_copy(that, &__shared27_copy);
    return *this;
}

int __shared27::operator == (const __shared27 & that) const {
    return do_compare(that, &__shared27_compare);
}

int __shared27::operator != (const __shared27 & that) const {
    return !do_compare(that, &__shared27_compare);
}

/* Locate ("At" etc) methods */

__shared27::component *__shared27::at(OssIndex pos) {
    return &((__shared27_member *)pos)->value;
}

const __shared27::component *__shared27::at(OssIndex pos) const {
    return &((__shared27_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared27::prepend(const component & val) {
    __shared27_member *newrec = new __shared27_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared27::prepend(__shared27 *seq) {
    return do_prepend(seq);
}

OssIndex __shared27::insert_after(OssIndex pos, const component & val) {
    __shared27_member *newrec = new __shared27_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared27::insert_after(OssIndex pos, __shared27 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared27::remove_front() {
    __shared27_member *extr = (__shared27_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared27_destroy(extr);
    return 0;
}

int __shared27::remove_after(OssIndex pos) {
    __shared27_member *extr = (__shared27_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared27_destroy(extr);
    return 0;
}

/* Extract methods */

__shared27 *__shared27::extract_after(OssIndex begin, OssIndex end) {
    return (__shared27 *)do_extract_after(begin, end);
}

void *__shared28::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared28::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared28::__shared28() {
    memset(this, 0, sizeof(__shared28));
}

__shared28::__shared28(const __shared28 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	protocolIEs_field = that.protocolIEs_field;
	protocolExtensions_field = that.protocolExtensions_field;
    } OSSCLEAN(__shared28)
}

__shared28::__shared28(const protocolIEs & protocolIEs_val, const protocolExtensions & protocolExtensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	protocolIEs_field = protocolIEs_val;
	protocolExtensions_field = protocolExtensions_val;
    } OSSCLEAN(__shared28)
}

__shared28::__shared28(const protocolIEs & protocolIEs_val) {
    OSSTRY {
	bit_mask = 0;
	protocolIEs_field = protocolIEs_val;
    } OSSCLEAN(__shared28)
}

__shared28 & __shared28::operator = (const __shared28 & that) {
    if (this == &that)
	return *this;
    this->~__shared28();
    bit_mask = that.bit_mask;
    protocolIEs_field = that.protocolIEs_field;
    protocolExtensions_field = that.protocolExtensions_field;
    return *this;
}

int __shared28::operator == (const __shared28 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (protocolIEs_field != that.protocolIEs_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (protocolExtensions_field != that.protocolExtensions_field)
	    return 0;
    }
    return 1;
}

int __shared28::operator != (const __shared28 & that) const {
    return !(operator ==(that));
}

__shared28::protocolIEs & __shared28::get_protocolIEs() {
    return protocolIEs_field;
}

const __shared28::protocolIEs & __shared28::get_protocolIEs() const {
    return protocolIEs_field;
}

void __shared28::set_protocolIEs(const protocolIEs & protocolIEs_val) {
    protocolIEs_field = protocolIEs_val;
}

__shared28::protocolExtensions *__shared28::get_protocolExtensions() {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

const __shared28::protocolExtensions *__shared28::get_protocolExtensions() const {
    if (bit_mask & 0x80000000)
	return &protocolExtensions_field;
    else
	return 0;
}

void __shared28::set_protocolExtensions(const protocolExtensions & protocolExtensions_val) {
    bit_mask |= 0x80000000;
    protocolExtensions_field = protocolExtensions_val;
}

int __shared28::protocolExtensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __shared28::omit_protocolExtensions() {
    protocolExtensions_field.~__shared27();
    bit_mask &= ~0x80000000;
}

SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome()
{
}

SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome(const SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome & that)
{
    operator =(that);
}

SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::~SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome()
{
    cleanup_decoded();
}

SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome & SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::operator = (const SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::operator == (const SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::operator != (const SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome & that) const
{
    return !(operator ==(that));
}

int SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared28 *SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::get_Write_Replace_Warning_Response()
{
    if (pdunum == 3)
	return (__shared28 *)decoded;
    else
	return NULL;
}

const __shared28 *SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::get_Write_Replace_Warning_Response() const
{
    if (pdunum == 3)
	return (const __shared28 *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::set_Write_Replace_Warning_Response(const __shared28 & data)
{
    void *copy;

    copy = new Write_Replace_Warning_Response(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 3;
	decoded = copy;
    }
}

__shared28 *SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::release_Write_Replace_Warning_Response()
{
    __shared28 * dvalue = pdunum == 3 ? (__shared28 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::set_Write_Replace_Warning_Response(__shared28 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 3;
    decoded = data;
}

__shared28 *SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::get_Stop_Warning_Response()
{
    if (pdunum == 5)
	return (__shared28 *)decoded;
    else
	return NULL;
}

const __shared28 *SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::get_Stop_Warning_Response() const
{
    if (pdunum == 5)
	return (const __shared28 *)decoded;
    else
	return NULL;
}

void SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::set_Stop_Warning_Response(const __shared28 & data)
{
    void *copy;

    copy = new Stop_Warning_Response(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 5;
	decoded = copy;
    }
}

__shared28 *SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::release_Stop_Warning_Response()
{
    __shared28 * dvalue = pdunum == 5 ? (__shared28 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::set_Stop_Warning_Response(__shared28 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 5;
    decoded = data;
}

void SBC_AP_ELEMENTARY_PROCEDURES_SuccessfulOutcome::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *SuccessfulOutcome::operator new(size_t size) {
    return ossNewFunc(size);
}

void SuccessfulOutcome::operator delete(void *ptr) {
    asn1Free(ptr);
}

SuccessfulOutcome::SuccessfulOutcome() {
    memset(this, 0, sizeof(SuccessfulOutcome));
}

SuccessfulOutcome::SuccessfulOutcome(const SuccessfulOutcome & that) {
    OSSTRY {
	procedureCode_field = that.procedureCode_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(SuccessfulOutcome)
}

SuccessfulOutcome::SuccessfulOutcome(procedureCode procedureCode_val, criticality criticality_val, 
    const value & value_val) {
    OSSTRY {
	procedureCode_field = procedureCode_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(SuccessfulOutcome)
}

SuccessfulOutcome & SuccessfulOutcome::operator = (const SuccessfulOutcome & that) {
    if (this == &that)
	return *this;
    procedureCode_field = that.procedureCode_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int SuccessfulOutcome::operator == (const SuccessfulOutcome & that) const {
    if (procedureCode_field != that.procedureCode_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int SuccessfulOutcome::operator != (const SuccessfulOutcome & that) const {
    return !(operator ==(that));
}

SuccessfulOutcome::procedureCode & SuccessfulOutcome::get_procedureCode() {
    return procedureCode_field;
}

SuccessfulOutcome::procedureCode SuccessfulOutcome::get_procedureCode() const {
    return procedureCode_field;
}

void SuccessfulOutcome::set_procedureCode(procedureCode procedureCode_val) {
    procedureCode_field = procedureCode_val;
}

SuccessfulOutcome::criticality & SuccessfulOutcome::get_criticality() {
    return criticality_field;
}

SuccessfulOutcome::criticality SuccessfulOutcome::get_criticality() const {
    return criticality_field;
}

void SuccessfulOutcome::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

SuccessfulOutcome::value & SuccessfulOutcome::get_value() {
    return value_field;
}

const SuccessfulOutcome::value & SuccessfulOutcome::get_value() const {
    return value_field;
}

void SuccessfulOutcome::set_value(const value & value_val) {
    value_field = value_val;
}

SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome()
{
}

SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome(const SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome & that)
{
    operator =(that);
}

SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::~SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome()
{
    cleanup_decoded();
}

SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome & SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::operator = (const SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::operator == (const SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::operator != (const SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome & that) const
{
    return !(operator ==(that));
}

int SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

void SBC_AP_ELEMENTARY_PROCEDURES_UnsuccessfulOutcome::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *UnsuccessfulOutcome::operator new(size_t size) {
    return ossNewFunc(size);
}

void UnsuccessfulOutcome::operator delete(void *ptr) {
    asn1Free(ptr);
}

UnsuccessfulOutcome::UnsuccessfulOutcome() {
    memset(this, 0, sizeof(UnsuccessfulOutcome));
}

UnsuccessfulOutcome::UnsuccessfulOutcome(const UnsuccessfulOutcome & that) {
    OSSTRY {
	procedureCode_field = that.procedureCode_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(UnsuccessfulOutcome)
}

UnsuccessfulOutcome::UnsuccessfulOutcome(procedureCode procedureCode_val, criticality criticality_val, 
    const value & value_val) {
    OSSTRY {
	procedureCode_field = procedureCode_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(UnsuccessfulOutcome)
}

UnsuccessfulOutcome & UnsuccessfulOutcome::operator = (const UnsuccessfulOutcome & that) {
    if (this == &that)
	return *this;
    procedureCode_field = that.procedureCode_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int UnsuccessfulOutcome::operator == (const UnsuccessfulOutcome & that) const {
    if (procedureCode_field != that.procedureCode_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int UnsuccessfulOutcome::operator != (const UnsuccessfulOutcome & that) const {
    return !(operator ==(that));
}

UnsuccessfulOutcome::procedureCode & UnsuccessfulOutcome::get_procedureCode() {
    return procedureCode_field;
}

UnsuccessfulOutcome::procedureCode UnsuccessfulOutcome::get_procedureCode() const {
    return procedureCode_field;
}

void UnsuccessfulOutcome::set_procedureCode(procedureCode procedureCode_val) {
    procedureCode_field = procedureCode_val;
}

UnsuccessfulOutcome::criticality & UnsuccessfulOutcome::get_criticality() {
    return criticality_field;
}

UnsuccessfulOutcome::criticality UnsuccessfulOutcome::get_criticality() const {
    return criticality_field;
}

void UnsuccessfulOutcome::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

UnsuccessfulOutcome::value & UnsuccessfulOutcome::get_value() {
    return value_field;
}

const UnsuccessfulOutcome::value & UnsuccessfulOutcome::get_value() const {
    return value_field;
}

void UnsuccessfulOutcome::set_value(const value & value_val) {
    value_field = value_val;
}

SBC_AP_PDU::SBC_AP_PDU() {
    memset(this, 0, sizeof(SBC_AP_PDU));
}

SBC_AP_PDU::SBC_AP_PDU(const SBC_AP_PDU & that) {
    memset(this, 0, sizeof(SBC_AP_PDU));
    operator =(that);
}

SBC_AP_PDU::~SBC_AP_PDU() {
    cleanup();
}

SBC_AP_PDU & SBC_AP_PDU::operator = (const SBC_AP_PDU & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case initiatingMessage_chosen:
	    if (that.initiatingMessage_field)
		initiatingMessage_field = new initiatingMessage(*that.initiatingMessage_field);
	    break;
	case successfulOutcome_chosen:
	    if (that.successfulOutcome_field)
		successfulOutcome_field = new successfulOutcome(*that.successfulOutcome_field);
	    break;
	case unsuccessfulOutcome_chosen:
	    if (that.unsuccessfulOutcome_field)
		unsuccessfulOutcome_field = new unsuccessfulOutcome(*that.unsuccessfulOutcome_field);
	    break;
    }
    return *this;
}

int SBC_AP_PDU::operator == (const SBC_AP_PDU & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case initiatingMessage_chosen:
	    if ((initiatingMessage_field) && (that.initiatingMessage_field))
		return (*initiatingMessage_field == *(that.initiatingMessage_field));
	    else if (!((!initiatingMessage_field) && (!that.initiatingMessage_field)))
		return 0;
	    break;
	case successfulOutcome_chosen:
	    if ((successfulOutcome_field) && (that.successfulOutcome_field))
		return (*successfulOutcome_field == *(that.successfulOutcome_field));
	    else if (!((!successfulOutcome_field) && (!that.successfulOutcome_field)))
		return 0;
	    break;
	case unsuccessfulOutcome_chosen:
	    if ((unsuccessfulOutcome_field) && (that.unsuccessfulOutcome_field))
		return (*unsuccessfulOutcome_field == *(that.unsuccessfulOutcome_field));
	    else if (!((!unsuccessfulOutcome_field) && (!that.unsuccessfulOutcome_field)))
		return 0;
	    break;
    }

    return 1;
}

int SBC_AP_PDU::operator != (const SBC_AP_PDU & that) const {
    return !(operator ==(that));
}

SBC_AP_PDU::initiatingMessage *SBC_AP_PDU::get_initiatingMessage() {
    if (_choice == initiatingMessage_chosen)
	return (initiatingMessage *)initiatingMessage_field;
    else
	return 0;
}

const SBC_AP_PDU::initiatingMessage *SBC_AP_PDU::get_initiatingMessage() const {
    if (_choice == initiatingMessage_chosen)
	return (const initiatingMessage *)initiatingMessage_field;
    else
	return 0;
}

void SBC_AP_PDU::set_initiatingMessage(const initiatingMessage & initiatingMessage_val) {
    cleanup();
    initiatingMessage_field = new initiatingMessage(initiatingMessage_val);
    _choice = initiatingMessage_chosen;
}

SBC_AP_PDU::successfulOutcome *SBC_AP_PDU::get_successfulOutcome() {
    if (_choice == successfulOutcome_chosen)
	return (successfulOutcome *)successfulOutcome_field;
    else
	return 0;
}

const SBC_AP_PDU::successfulOutcome *SBC_AP_PDU::get_successfulOutcome() const {
    if (_choice == successfulOutcome_chosen)
	return (const successfulOutcome *)successfulOutcome_field;
    else
	return 0;
}

void SBC_AP_PDU::set_successfulOutcome(const successfulOutcome & successfulOutcome_val) {
    cleanup();
    successfulOutcome_field = new successfulOutcome(successfulOutcome_val);
    _choice = successfulOutcome_chosen;
}

SBC_AP_PDU::unsuccessfulOutcome *SBC_AP_PDU::get_unsuccessfulOutcome() {
    if (_choice == unsuccessfulOutcome_chosen)
	return (unsuccessfulOutcome *)unsuccessfulOutcome_field;
    else
	return 0;
}

const SBC_AP_PDU::unsuccessfulOutcome *SBC_AP_PDU::get_unsuccessfulOutcome() const {
    if (_choice == unsuccessfulOutcome_chosen)
	return (const unsuccessfulOutcome *)unsuccessfulOutcome_field;
    else
	return 0;
}

void SBC_AP_PDU::set_unsuccessfulOutcome(const unsuccessfulOutcome & unsuccessfulOutcome_val) {
    cleanup();
    unsuccessfulOutcome_field = new unsuccessfulOutcome(unsuccessfulOutcome_val);
    _choice = unsuccessfulOutcome_chosen;
}

void SBC_AP_PDU::cleanup() {
    switch (_choice) {
	case initiatingMessage_chosen:
	    if (initiatingMessage_field)
		delete initiatingMessage_field;
	    break;
	case successfulOutcome_chosen:
	    if (successfulOutcome_field)
		delete successfulOutcome_field;
	    break;
	case unsuccessfulOutcome_chosen:
	    if (unsuccessfulOutcome_field)
		delete unsuccessfulOutcome_field;
	    break;
    }
    memset(this, 0, sizeof(*this));
}

/* Auxiliary data structures and functions for class __shared3 */

class __shared3_member {
public:
    __shared3_member *next;
    __shared3::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared3_member();
    __shared3_member(const __shared3::component & val);
};

void *__shared3_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared3_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared3_member::__shared3_member() {
}

__shared3_member::__shared3_member(const __shared3::component & val) {
    value = val;
}

static void *__shared3_copy(void *that) {
    return new __shared3_member(((__shared3_member *)that)->value);
}

static void __shared3_destroy(void *that) {
    delete (__shared3_member *)that;
}

static int __shared3_compare(void *val1, void *val2) {
    return (((__shared3_member *)val1)->value == ((__shared3_member *)val2)->value);
}

/* Constructors */

__shared3::__shared3() {
}

__shared3::__shared3(const __shared3 & that) {
    OSSTRY {
	do_copy(that, &__shared3_copy);
    } OSSCLEAN(__shared3)
}

/* Destructor */

__shared3::~__shared3() {
    do_destroy(&__shared3_destroy);
}

/* Operators: assignment, equality, inequality */

__shared3 & __shared3::operator = (const __shared3 & that) {
    do_destroy(&__shared3_destroy);
    do_copy(that, &__shared3_copy);
    return *this;
}

int __shared3::operator == (const __shared3 & that) const {
    return do_compare(that, &__shared3_compare);
}

int __shared3::operator != (const __shared3 & that) const {
    return !do_compare(that, &__shared3_compare);
}

/* Locate ("At" etc) methods */

__shared3::component *__shared3::at(OssIndex pos) {
    return &((__shared3_member *)pos)->value;
}

const __shared3::component *__shared3::at(OssIndex pos) const {
    return &((__shared3_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared3::prepend(const component & val) {
    __shared3_member *newrec = new __shared3_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared3::prepend(__shared3 *seq) {
    return do_prepend(seq);
}

OssIndex __shared3::insert_after(OssIndex pos, const component & val) {
    __shared3_member *newrec = new __shared3_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared3::insert_after(OssIndex pos, __shared3 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared3::remove_front() {
    __shared3_member *extr = (__shared3_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared3_destroy(extr);
    return 0;
}

int __shared3::remove_after(OssIndex pos) {
    __shared3_member *extr = (__shared3_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared3_destroy(extr);
    return 0;
}

/* Extract methods */

__shared3 *__shared3::extract_after(OssIndex begin, OssIndex end) {
    return (__shared3 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared4 */

class __shared4_member {
public:
    __shared4_member *next;
    __shared4::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared4_member();
    __shared4_member(const __shared4::component & val);
};

void *__shared4_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared4_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared4_member::__shared4_member() {
}

__shared4_member::__shared4_member(const __shared4::component & val) {
    value = val;
}

static void *__shared4_copy(void *that) {
    return new __shared4_member(((__shared4_member *)that)->value);
}

static void __shared4_destroy(void *that) {
    delete (__shared4_member *)that;
}

static int __shared4_compare(void *val1, void *val2) {
    return (((__shared4_member *)val1)->value == ((__shared4_member *)val2)->value);
}

/* Constructors */

__shared4::__shared4() {
}

__shared4::__shared4(const __shared4 & that) {
    OSSTRY {
	do_copy(that, &__shared4_copy);
    } OSSCLEAN(__shared4)
}

/* Destructor */

__shared4::~__shared4() {
    do_destroy(&__shared4_destroy);
}

/* Operators: assignment, equality, inequality */

__shared4 & __shared4::operator = (const __shared4 & that) {
    do_destroy(&__shared4_destroy);
    do_copy(that, &__shared4_copy);
    return *this;
}

int __shared4::operator == (const __shared4 & that) const {
    return do_compare(that, &__shared4_compare);
}

int __shared4::operator != (const __shared4 & that) const {
    return !do_compare(that, &__shared4_compare);
}

/* Locate ("At" etc) methods */

__shared4::component *__shared4::at(OssIndex pos) {
    return &((__shared4_member *)pos)->value;
}

const __shared4::component *__shared4::at(OssIndex pos) const {
    return &((__shared4_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared4::prepend(const component & val) {
    __shared4_member *newrec = new __shared4_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared4::prepend(__shared4 *seq) {
    return do_prepend(seq);
}

OssIndex __shared4::insert_after(OssIndex pos, const component & val) {
    __shared4_member *newrec = new __shared4_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared4::insert_after(OssIndex pos, __shared4 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared4::remove_front() {
    __shared4_member *extr = (__shared4_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared4_destroy(extr);
    return 0;
}

int __shared4::remove_after(OssIndex pos) {
    __shared4_member *extr = (__shared4_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared4_destroy(extr);
    return 0;
}

/* Extract methods */

__shared4 *__shared4::extract_after(OssIndex begin, OssIndex end) {
    return (__shared4 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared5 */

class __shared5_member {
public:
    __shared5_member *next;
    __shared5::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared5_member();
    __shared5_member(const __shared5::component & val);
};

void *__shared5_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared5_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared5_member::__shared5_member() {
}

__shared5_member::__shared5_member(const __shared5::component & val) {
    value = val;
}

static void *__shared5_copy(void *that) {
    return new __shared5_member(((__shared5_member *)that)->value);
}

static void __shared5_destroy(void *that) {
    delete (__shared5_member *)that;
}

static int __shared5_compare(void *val1, void *val2) {
    return (((__shared5_member *)val1)->value == ((__shared5_member *)val2)->value);
}

/* Constructors */

__shared5::__shared5() {
}

__shared5::__shared5(const __shared5 & that) {
    OSSTRY {
	do_copy(that, &__shared5_copy);
    } OSSCLEAN(__shared5)
}

/* Destructor */

__shared5::~__shared5() {
    do_destroy(&__shared5_destroy);
}

/* Operators: assignment, equality, inequality */

__shared5 & __shared5::operator = (const __shared5 & that) {
    do_destroy(&__shared5_destroy);
    do_copy(that, &__shared5_copy);
    return *this;
}

int __shared5::operator == (const __shared5 & that) const {
    return do_compare(that, &__shared5_compare);
}

int __shared5::operator != (const __shared5 & that) const {
    return !do_compare(that, &__shared5_compare);
}

/* Locate ("At" etc) methods */

__shared5::component *__shared5::at(OssIndex pos) {
    return &((__shared5_member *)pos)->value;
}

const __shared5::component *__shared5::at(OssIndex pos) const {
    return &((__shared5_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared5::prepend(const component & val) {
    __shared5_member *newrec = new __shared5_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared5::prepend(__shared5 *seq) {
    return do_prepend(seq);
}

OssIndex __shared5::insert_after(OssIndex pos, const component & val) {
    __shared5_member *newrec = new __shared5_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared5::insert_after(OssIndex pos, __shared5 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared5::remove_front() {
    __shared5_member *extr = (__shared5_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared5_destroy(extr);
    return 0;
}

int __shared5::remove_after(OssIndex pos) {
    __shared5_member *extr = (__shared5_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared5_destroy(extr);
    return 0;
}

/* Extract methods */

__shared5 *__shared5::extract_after(OssIndex begin, OssIndex end) {
    return (__shared5 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared6 */

class __shared6_member {
public:
    __shared6_member *next;
    __shared6::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared6_member();
    __shared6_member(const __shared6::component & val);
};

void *__shared6_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared6_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared6_member::__shared6_member() {
}

__shared6_member::__shared6_member(const __shared6::component & val) {
    value = val;
}

static void *__shared6_copy(void *that) {
    return new __shared6_member(((__shared6_member *)that)->value);
}

static void __shared6_destroy(void *that) {
    delete (__shared6_member *)that;
}

static int __shared6_compare(void *val1, void *val2) {
    return (((__shared6_member *)val1)->value == ((__shared6_member *)val2)->value);
}

/* Constructors */

__shared6::__shared6() {
}

__shared6::__shared6(const __shared6 & that) {
    OSSTRY {
	do_copy(that, &__shared6_copy);
    } OSSCLEAN(__shared6)
}

/* Destructor */

__shared6::~__shared6() {
    do_destroy(&__shared6_destroy);
}

/* Operators: assignment, equality, inequality */

__shared6 & __shared6::operator = (const __shared6 & that) {
    do_destroy(&__shared6_destroy);
    do_copy(that, &__shared6_copy);
    return *this;
}

int __shared6::operator == (const __shared6 & that) const {
    return do_compare(that, &__shared6_compare);
}

int __shared6::operator != (const __shared6 & that) const {
    return !do_compare(that, &__shared6_compare);
}

/* Locate ("At" etc) methods */

__shared6::component *__shared6::at(OssIndex pos) {
    return &((__shared6_member *)pos)->value;
}

const __shared6::component *__shared6::at(OssIndex pos) const {
    return &((__shared6_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared6::prepend(const component & val) {
    __shared6_member *newrec = new __shared6_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared6::prepend(__shared6 *seq) {
    return do_prepend(seq);
}

OssIndex __shared6::insert_after(OssIndex pos, const component & val) {
    __shared6_member *newrec = new __shared6_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared6::insert_after(OssIndex pos, __shared6 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared6::remove_front() {
    __shared6_member *extr = (__shared6_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared6_destroy(extr);
    return 0;
}

int __shared6::remove_after(OssIndex pos) {
    __shared6_member *extr = (__shared6_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared6_destroy(extr);
    return 0;
}

/* Extract methods */

__shared6 *__shared6::extract_after(OssIndex begin, OssIndex end) {
    return (__shared6 *)do_extract_after(begin, end);
}

Warning_Area_List::Warning_Area_List() {
    memset(this, 0, sizeof(Warning_Area_List));
}

Warning_Area_List::Warning_Area_List(const Warning_Area_List & that) {
    memset(this, 0, sizeof(Warning_Area_List));
    operator =(that);
}

Warning_Area_List::~Warning_Area_List() {
    cleanup();
}

Warning_Area_List & Warning_Area_List::operator = (const Warning_Area_List & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case cell_ID_List_chosen:
	    *(cell_ID_List *)&cell_ID_List_field = *(cell_ID_List *)&that.cell_ID_List_field;
	    break;
	case tracking_Area_List_for_Warning_chosen:
	    *(tracking_Area_List_for_Warning *)&tracking_Area_List_for_Warning_field = *(tracking_Area_List_for_Warning *)&that.tracking_Area_List_for_Warning_field;
	    break;
	case emergency_Area_ID_List_chosen:
	    *(emergency_Area_ID_List *)&emergency_Area_ID_List_field = *(emergency_Area_ID_List *)&that.emergency_Area_ID_List_field;
	    break;
    }
    return *this;
}

int Warning_Area_List::operator == (const Warning_Area_List & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case cell_ID_List_chosen:
	    return *(cell_ID_List *)&cell_ID_List_field == *(cell_ID_List *)&that.cell_ID_List_field;
	case tracking_Area_List_for_Warning_chosen:
	    return *(tracking_Area_List_for_Warning *)&tracking_Area_List_for_Warning_field == *(tracking_Area_List_for_Warning *)&that.tracking_Area_List_for_Warning_field;
	case emergency_Area_ID_List_chosen:
	    return *(emergency_Area_ID_List *)&emergency_Area_ID_List_field == *(emergency_Area_ID_List *)&that.emergency_Area_ID_List_field;
    }

    return 1;
}

int Warning_Area_List::operator != (const Warning_Area_List & that) const {
    return !(operator ==(that));
}

Warning_Area_List::cell_ID_List *Warning_Area_List::get_cell_ID_List() {
    if (_choice == cell_ID_List_chosen)
	return (cell_ID_List *)&cell_ID_List_field;
    else
	return 0;
}

const Warning_Area_List::cell_ID_List *Warning_Area_List::get_cell_ID_List() const {
    if (_choice == cell_ID_List_chosen)
	return (const cell_ID_List *)&cell_ID_List_field;
    else
	return 0;
}

void Warning_Area_List::set_cell_ID_List(const cell_ID_List & cell_ID_List_val) {
    cleanup();
    *(cell_ID_List *)&cell_ID_List_field = cell_ID_List_val;
    _choice = cell_ID_List_chosen;
}

Warning_Area_List::tracking_Area_List_for_Warning *Warning_Area_List::get_tracking_Area_List_for_Warning() {
    if (_choice == tracking_Area_List_for_Warning_chosen)
	return (tracking_Area_List_for_Warning *)&tracking_Area_List_for_Warning_field;
    else
	return 0;
}

const Warning_Area_List::tracking_Area_List_for_Warning *Warning_Area_List::get_tracking_Area_List_for_Warning() const {
    if (_choice == tracking_Area_List_for_Warning_chosen)
	return (const tracking_Area_List_for_Warning *)&tracking_Area_List_for_Warning_field;
    else
	return 0;
}

void Warning_Area_List::set_tracking_Area_List_for_Warning(const tracking_Area_List_for_Warning & tracking_Area_List_for_Warning_val) {
    cleanup();
    *(tracking_Area_List_for_Warning *)&tracking_Area_List_for_Warning_field = tracking_Area_List_for_Warning_val;
    _choice = tracking_Area_List_for_Warning_chosen;
}

Warning_Area_List::emergency_Area_ID_List *Warning_Area_List::get_emergency_Area_ID_List() {
    if (_choice == emergency_Area_ID_List_chosen)
	return (emergency_Area_ID_List *)&emergency_Area_ID_List_field;
    else
	return 0;
}

const Warning_Area_List::emergency_Area_ID_List *Warning_Area_List::get_emergency_Area_ID_List() const {
    if (_choice == emergency_Area_ID_List_chosen)
	return (const emergency_Area_ID_List *)&emergency_Area_ID_List_field;
    else
	return 0;
}

void Warning_Area_List::set_emergency_Area_ID_List(const emergency_Area_ID_List & emergency_Area_ID_List_val) {
    cleanup();
    *(emergency_Area_ID_List *)&emergency_Area_ID_List_field = emergency_Area_ID_List_val;
    _choice = emergency_Area_ID_List_chosen;
}

void Warning_Area_List::cleanup() {
    switch (_choice) {
	case cell_ID_List_chosen:
	    ((cell_ID_List *)&cell_ID_List_field)->~__shared4();
	    break;
	case tracking_Area_List_for_Warning_chosen:
	    ((tracking_Area_List_for_Warning *)&tracking_Area_List_for_Warning_field)->~__shared5();
	    break;
	case emergency_Area_ID_List_chosen:
	    ((emergency_Area_ID_List *)&emergency_Area_ID_List_field)->~__shared6();
	    break;
    }
    memset(this, 0, sizeof(*this));
}

ENB_ID::ENB_ID() {
    memset(this, 0, sizeof(ENB_ID));
}

ENB_ID::ENB_ID(const ENB_ID & that) {
    memset(this, 0, sizeof(ENB_ID));
    operator =(that);
}

ENB_ID::~ENB_ID() {
    cleanup();
}

ENB_ID & ENB_ID::operator = (const ENB_ID & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case macroENB_ID_chosen:
	    *(macroENB_ID *)&macroENB_ID_field = *(macroENB_ID *)&that.macroENB_ID_field;
	    break;
	case homeENB_ID_chosen:
	    *(homeENB_ID *)&homeENB_ID_field = *(homeENB_ID *)&that.homeENB_ID_field;
	    break;
	case short_macroENB_ID_chosen:
	    *(short_macroENB_ID *)&short_macroENB_ID_field = *(short_macroENB_ID *)&that.short_macroENB_ID_field;
	    break;
	case long_macroENB_ID_chosen:
	    *(long_macroENB_ID *)&long_macroENB_ID_field = *(long_macroENB_ID *)&that.long_macroENB_ID_field;
	    break;
    }
    return *this;
}

int ENB_ID::operator == (const ENB_ID & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case macroENB_ID_chosen:
	    return *(macroENB_ID *)&macroENB_ID_field == *(macroENB_ID *)&that.macroENB_ID_field;
	case homeENB_ID_chosen:
	    return *(homeENB_ID *)&homeENB_ID_field == *(homeENB_ID *)&that.homeENB_ID_field;
	case short_macroENB_ID_chosen:
	    return *(short_macroENB_ID *)&short_macroENB_ID_field == *(short_macroENB_ID *)&that.short_macroENB_ID_field;
	case long_macroENB_ID_chosen:
	    return *(long_macroENB_ID *)&long_macroENB_ID_field == *(long_macroENB_ID *)&that.long_macroENB_ID_field;
    }

    return 1;
}

int ENB_ID::operator != (const ENB_ID & that) const {
    return !(operator ==(that));
}

ENB_ID::macroENB_ID *ENB_ID::get_macroENB_ID() {
    if (_choice == macroENB_ID_chosen)
	return (macroENB_ID *)&macroENB_ID_field;
    else
	return 0;
}

const ENB_ID::macroENB_ID *ENB_ID::get_macroENB_ID() const {
    if (_choice == macroENB_ID_chosen)
	return (const macroENB_ID *)&macroENB_ID_field;
    else
	return 0;
}

void ENB_ID::set_macroENB_ID(const macroENB_ID & macroENB_ID_val) {
    cleanup();
    *(macroENB_ID *)&macroENB_ID_field = macroENB_ID_val;
    _choice = macroENB_ID_chosen;
}

ENB_ID::homeENB_ID *ENB_ID::get_homeENB_ID() {
    if (_choice == homeENB_ID_chosen)
	return (homeENB_ID *)&homeENB_ID_field;
    else
	return 0;
}

const ENB_ID::homeENB_ID *ENB_ID::get_homeENB_ID() const {
    if (_choice == homeENB_ID_chosen)
	return (const homeENB_ID *)&homeENB_ID_field;
    else
	return 0;
}

void ENB_ID::set_homeENB_ID(const homeENB_ID & homeENB_ID_val) {
    cleanup();
    *(homeENB_ID *)&homeENB_ID_field = homeENB_ID_val;
    _choice = homeENB_ID_chosen;
}

ENB_ID::short_macroENB_ID *ENB_ID::get_short_macroENB_ID() {
    if (_choice == short_macroENB_ID_chosen)
	return (short_macroENB_ID *)&short_macroENB_ID_field;
    else
	return 0;
}

const ENB_ID::short_macroENB_ID *ENB_ID::get_short_macroENB_ID() const {
    if (_choice == short_macroENB_ID_chosen)
	return (const short_macroENB_ID *)&short_macroENB_ID_field;
    else
	return 0;
}

void ENB_ID::set_short_macroENB_ID(const short_macroENB_ID & short_macroENB_ID_val) {
    cleanup();
    *(short_macroENB_ID *)&short_macroENB_ID_field = short_macroENB_ID_val;
    _choice = short_macroENB_ID_chosen;
}

ENB_ID::long_macroENB_ID *ENB_ID::get_long_macroENB_ID() {
    if (_choice == long_macroENB_ID_chosen)
	return (long_macroENB_ID *)&long_macroENB_ID_field;
    else
	return 0;
}

const ENB_ID::long_macroENB_ID *ENB_ID::get_long_macroENB_ID() const {
    if (_choice == long_macroENB_ID_chosen)
	return (const long_macroENB_ID *)&long_macroENB_ID_field;
    else
	return 0;
}

void ENB_ID::set_long_macroENB_ID(const long_macroENB_ID & long_macroENB_ID_val) {
    cleanup();
    *(long_macroENB_ID *)&long_macroENB_ID_field = long_macroENB_ID_val;
    _choice = long_macroENB_ID_chosen;
}

void ENB_ID::cleanup() {
    switch (_choice) {
	case macroENB_ID_chosen:
	    ((macroENB_ID *)&macroENB_ID_field)->~OssBitString();
	    break;
	case homeENB_ID_chosen:
	    ((homeENB_ID *)&homeENB_ID_field)->~OssBitString();
	    break;
	case short_macroENB_ID_chosen:
	    ((short_macroENB_ID *)&short_macroENB_ID_field)->~OssBitString();
	    break;
	case long_macroENB_ID_chosen:
	    ((long_macroENB_ID *)&long_macroENB_ID_field)->~OssBitString();
	    break;
    }
    memset(this, 0, sizeof(*this));
}

/* Auxiliary data structures and functions for class __shared2 */

class __shared2_member {
public:
    __shared2_member *next;
    __shared2::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared2_member();
    __shared2_member(const __shared2::component & val);
};

void *__shared2_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared2_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared2_member::__shared2_member() {
}

__shared2_member::__shared2_member(const __shared2::component & val) {
    value = val;
}

static void *__shared2_copy(void *that) {
    return new __shared2_member(((__shared2_member *)that)->value);
}

static void __shared2_destroy(void *that) {
    delete (__shared2_member *)that;
}

static int __shared2_compare(void *val1, void *val2) {
    return (((__shared2_member *)val1)->value == ((__shared2_member *)val2)->value);
}

/* Constructors */

__shared2::__shared2() {
}

__shared2::__shared2(const __shared2 & that) {
    OSSTRY {
	do_copy(that, &__shared2_copy);
    } OSSCLEAN(__shared2)
}

/* Destructor */

__shared2::~__shared2() {
    do_destroy(&__shared2_destroy);
}

/* Operators: assignment, equality, inequality */

__shared2 & __shared2::operator = (const __shared2 & that) {
    do_destroy(&__shared2_destroy);
    do_copy(that, &__shared2_copy);
    return *this;
}

int __shared2::operator == (const __shared2 & that) const {
    return do_compare(that, &__shared2_compare);
}

int __shared2::operator != (const __shared2 & that) const {
    return !do_compare(that, &__shared2_compare);
}

/* Locate ("At" etc) methods */

__shared2::component *__shared2::at(OssIndex pos) {
    return &((__shared2_member *)pos)->value;
}

const __shared2::component *__shared2::at(OssIndex pos) const {
    return &((__shared2_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared2::prepend(const component & val) {
    __shared2_member *newrec = new __shared2_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared2::prepend(__shared2 *seq) {
    return do_prepend(seq);
}

OssIndex __shared2::insert_after(OssIndex pos, const component & val) {
    __shared2_member *newrec = new __shared2_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared2::insert_after(OssIndex pos, __shared2 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared2::remove_front() {
    __shared2_member *extr = (__shared2_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared2_destroy(extr);
    return 0;
}

int __shared2::remove_after(OssIndex pos) {
    __shared2_member *extr = (__shared2_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared2_destroy(extr);
    return 0;
}

/* Extract methods */

__shared2 *__shared2::extract_after(OssIndex begin, OssIndex end) {
    return (__shared2 *)do_extract_after(begin, end);
}

void *Global_ENB_ID::operator new(size_t size) {
    return ossNewFunc(size);
}

void Global_ENB_ID::operator delete(void *ptr) {
    asn1Free(ptr);
}

Global_ENB_ID::Global_ENB_ID() {
    memset(this, 0, sizeof(Global_ENB_ID));
}

Global_ENB_ID::Global_ENB_ID(const Global_ENB_ID & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	pLMNidentity_field = that.pLMNidentity_field;
	eNB_ID_field = that.eNB_ID_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Global_ENB_ID)
}

Global_ENB_ID::Global_ENB_ID(const pLMNidentity & pLMNidentity_val, const eNB_ID & eNB_ID_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	pLMNidentity_field = pLMNidentity_val;
	eNB_ID_field = eNB_ID_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Global_ENB_ID)
}

Global_ENB_ID::Global_ENB_ID(const pLMNidentity & pLMNidentity_val, const eNB_ID & eNB_ID_val) {
    OSSTRY {
	bit_mask = 0;
	pLMNidentity_field = pLMNidentity_val;
	eNB_ID_field = eNB_ID_val;
    } OSSCLEAN(Global_ENB_ID)
}

Global_ENB_ID & Global_ENB_ID::operator = (const Global_ENB_ID & that) {
    if (this == &that)
	return *this;
    this->~Global_ENB_ID();
    bit_mask = that.bit_mask;
    pLMNidentity_field = that.pLMNidentity_field;
    eNB_ID_field = that.eNB_ID_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Global_ENB_ID::operator == (const Global_ENB_ID & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (pLMNidentity_field != that.pLMNidentity_field)
	return 0;
    if (eNB_ID_field != that.eNB_ID_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Global_ENB_ID::operator != (const Global_ENB_ID & that) const {
    return !(operator ==(that));
}

Global_ENB_ID::pLMNidentity & Global_ENB_ID::get_pLMNidentity() {
    return pLMNidentity_field;
}

const Global_ENB_ID::pLMNidentity & Global_ENB_ID::get_pLMNidentity() const {
    return pLMNidentity_field;
}

void Global_ENB_ID::set_pLMNidentity(const pLMNidentity & pLMNidentity_val) {
    pLMNidentity_field = pLMNidentity_val;
}

Global_ENB_ID::eNB_ID & Global_ENB_ID::get_eNB_ID() {
    return eNB_ID_field;
}

const Global_ENB_ID::eNB_ID & Global_ENB_ID::get_eNB_ID() const {
    return eNB_ID_field;
}

void Global_ENB_ID::set_eNB_ID(const eNB_ID & eNB_ID_val) {
    eNB_ID_field = eNB_ID_val;
}

Global_ENB_ID::iE_Extensions *Global_ENB_ID::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Global_ENB_ID::iE_Extensions *Global_ENB_ID::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Global_ENB_ID::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Global_ENB_ID::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Global_ENB_ID::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

Write_Replace_Warning_Request_IEs_Value::Write_Replace_Warning_Request_IEs_Value()
{
}

Write_Replace_Warning_Request_IEs_Value::Write_Replace_Warning_Request_IEs_Value(const Write_Replace_Warning_Request_IEs_Value & that)
{
    operator =(that);
}

Write_Replace_Warning_Request_IEs_Value::~Write_Replace_Warning_Request_IEs_Value()
{
    cleanup_decoded();
}

Write_Replace_Warning_Request_IEs_Value & Write_Replace_Warning_Request_IEs_Value::operator = (const Write_Replace_Warning_Request_IEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Write_Replace_Warning_Request_IEs_Value::operator == (const Write_Replace_Warning_Request_IEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Write_Replace_Warning_Request_IEs_Value::operator != (const Write_Replace_Warning_Request_IEs_Value & that) const
{
    return !(operator ==(that));
}

int Write_Replace_Warning_Request_IEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Write_Replace_Warning_Request_IEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Write_Replace_Warning_Request_IEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Write_Replace_Warning_Request_IEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Write_Replace_Warning_Request_IEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Message_Identifier *Write_Replace_Warning_Request_IEs_Value::get_Message_Identifier()
{
    if (pdunum == 33)
	return (Message_Identifier *)decoded;
    else
	return NULL;
}

const Message_Identifier *Write_Replace_Warning_Request_IEs_Value::get_Message_Identifier() const
{
    if (pdunum == 33)
	return (const Message_Identifier *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Message_Identifier(const Message_Identifier & data)
{
    void *copy;

    copy = new Message_Identifier(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 33;
	decoded = copy;
    }
}

Message_Identifier *Write_Replace_Warning_Request_IEs_Value::release_Message_Identifier()
{
    Message_Identifier * dvalue = pdunum == 33 ? (Message_Identifier *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Message_Identifier(Message_Identifier *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 33;
    decoded = data;
}

Serial_Number *Write_Replace_Warning_Request_IEs_Value::get_Serial_Number()
{
    if (pdunum == 43)
	return (Serial_Number *)decoded;
    else
	return NULL;
}

const Serial_Number *Write_Replace_Warning_Request_IEs_Value::get_Serial_Number() const
{
    if (pdunum == 43)
	return (const Serial_Number *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Serial_Number(const Serial_Number & data)
{
    void *copy;

    copy = new Serial_Number(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 43;
	decoded = copy;
    }
}

Serial_Number *Write_Replace_Warning_Request_IEs_Value::release_Serial_Number()
{
    Serial_Number * dvalue = pdunum == 43 ? (Serial_Number *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Serial_Number(Serial_Number *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 43;
    decoded = data;
}

__shared3 *Write_Replace_Warning_Request_IEs_Value::get_List_of_TAIs()
{
    if (pdunum == 27)
	return (__shared3 *)decoded;
    else
	return NULL;
}

const __shared3 *Write_Replace_Warning_Request_IEs_Value::get_List_of_TAIs() const
{
    if (pdunum == 27)
	return (const __shared3 *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_List_of_TAIs(const __shared3 & data)
{
    void *copy;

    copy = new List_of_TAIs(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 27;
	decoded = copy;
    }
}

__shared3 *Write_Replace_Warning_Request_IEs_Value::release_List_of_TAIs()
{
    __shared3 * dvalue = pdunum == 27 ? (__shared3 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_List_of_TAIs(__shared3 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 27;
    decoded = data;
}

Warning_Area_List *Write_Replace_Warning_Request_IEs_Value::get_Warning_Area_List()
{
    if (pdunum == 47)
	return (Warning_Area_List *)decoded;
    else
	return NULL;
}

const Warning_Area_List *Write_Replace_Warning_Request_IEs_Value::get_Warning_Area_List() const
{
    if (pdunum == 47)
	return (const Warning_Area_List *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Area_List(const Warning_Area_List & data)
{
    void *copy;

    copy = new Warning_Area_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 47;
	decoded = copy;
    }
}

Warning_Area_List *Write_Replace_Warning_Request_IEs_Value::release_Warning_Area_List()
{
    Warning_Area_List * dvalue = pdunum == 47 ? (Warning_Area_List *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Area_List(Warning_Area_List *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 47;
    decoded = data;
}

Repetition_Period *Write_Replace_Warning_Request_IEs_Value::get_Repetition_Period()
{
    if (pdunum == 37)
	return (Repetition_Period *)decoded;
    else
	return NULL;
}

const Repetition_Period *Write_Replace_Warning_Request_IEs_Value::get_Repetition_Period() const
{
    if (pdunum == 37)
	return (const Repetition_Period *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Repetition_Period(const Repetition_Period & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Repetition_Period));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Repetition_Period *)copy = data;
	pdunum = 37;
	decoded = copy;
    }
}

Repetition_Period *Write_Replace_Warning_Request_IEs_Value::release_Repetition_Period()
{
    Repetition_Period * dvalue = pdunum == 37 ? (Repetition_Period *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Repetition_Period(Repetition_Period *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 37;
    decoded = data;
}

Extended_Repetition_Period *Write_Replace_Warning_Request_IEs_Value::get_Extended_Repetition_Period()
{
    if (pdunum == 21)
	return (Extended_Repetition_Period *)decoded;
    else
	return NULL;
}

const Extended_Repetition_Period *Write_Replace_Warning_Request_IEs_Value::get_Extended_Repetition_Period() const
{
    if (pdunum == 21)
	return (const Extended_Repetition_Period *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Extended_Repetition_Period(const Extended_Repetition_Period & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Extended_Repetition_Period));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Extended_Repetition_Period *)copy = data;
	pdunum = 21;
	decoded = copy;
    }
}

Extended_Repetition_Period *Write_Replace_Warning_Request_IEs_Value::release_Extended_Repetition_Period()
{
    Extended_Repetition_Period * dvalue = pdunum == 21 ? (Extended_Repetition_Period *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Extended_Repetition_Period(Extended_Repetition_Period *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 21;
    decoded = data;
}

Number_of_Broadcasts_Requested *Write_Replace_Warning_Request_IEs_Value::get_Number_of_Broadcasts_Requested()
{
    if (pdunum == 34)
	return (Number_of_Broadcasts_Requested *)decoded;
    else
	return NULL;
}

const Number_of_Broadcasts_Requested *Write_Replace_Warning_Request_IEs_Value::get_Number_of_Broadcasts_Requested() const
{
    if (pdunum == 34)
	return (const Number_of_Broadcasts_Requested *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Number_of_Broadcasts_Requested(const Number_of_Broadcasts_Requested & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Number_of_Broadcasts_Requested));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Number_of_Broadcasts_Requested *)copy = data;
	pdunum = 34;
	decoded = copy;
    }
}

Number_of_Broadcasts_Requested *Write_Replace_Warning_Request_IEs_Value::release_Number_of_Broadcasts_Requested()
{
    Number_of_Broadcasts_Requested * dvalue = pdunum == 34 ? (Number_of_Broadcasts_Requested *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Number_of_Broadcasts_Requested(Number_of_Broadcasts_Requested *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 34;
    decoded = data;
}

Warning_Type *Write_Replace_Warning_Request_IEs_Value::get_Warning_Type()
{
    if (pdunum == 51)
	return (Warning_Type *)decoded;
    else
	return NULL;
}

const Warning_Type *Write_Replace_Warning_Request_IEs_Value::get_Warning_Type() const
{
    if (pdunum == 51)
	return (const Warning_Type *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Type(const Warning_Type & data)
{
    void *copy;

    copy = new Warning_Type(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 51;
	decoded = copy;
    }
}

Warning_Type *Write_Replace_Warning_Request_IEs_Value::release_Warning_Type()
{
    Warning_Type * dvalue = pdunum == 51 ? (Warning_Type *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Type(Warning_Type *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 51;
    decoded = data;
}

Warning_Security_Information *Write_Replace_Warning_Request_IEs_Value::get_Warning_Security_Information()
{
    if (pdunum == 50)
	return (Warning_Security_Information *)decoded;
    else
	return NULL;
}

const Warning_Security_Information *Write_Replace_Warning_Request_IEs_Value::get_Warning_Security_Information() const
{
    if (pdunum == 50)
	return (const Warning_Security_Information *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Security_Information(const Warning_Security_Information & data)
{
    void *copy;

    copy = new Warning_Security_Information(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 50;
	decoded = copy;
    }
}

Warning_Security_Information *Write_Replace_Warning_Request_IEs_Value::release_Warning_Security_Information()
{
    Warning_Security_Information * dvalue = pdunum == 50 ? (Warning_Security_Information *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Security_Information(Warning_Security_Information *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 50;
    decoded = data;
}

Data_Coding_Scheme *Write_Replace_Warning_Request_IEs_Value::get_Data_Coding_Scheme()
{
    if (pdunum == 20)
	return (Data_Coding_Scheme *)decoded;
    else
	return NULL;
}

const Data_Coding_Scheme *Write_Replace_Warning_Request_IEs_Value::get_Data_Coding_Scheme() const
{
    if (pdunum == 20)
	return (const Data_Coding_Scheme *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Data_Coding_Scheme(const Data_Coding_Scheme & data)
{
    void *copy;

    copy = new Data_Coding_Scheme(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 20;
	decoded = copy;
    }
}

Data_Coding_Scheme *Write_Replace_Warning_Request_IEs_Value::release_Data_Coding_Scheme()
{
    Data_Coding_Scheme * dvalue = pdunum == 20 ? (Data_Coding_Scheme *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Data_Coding_Scheme(Data_Coding_Scheme *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 20;
    decoded = data;
}

Warning_Message_Content *Write_Replace_Warning_Request_IEs_Value::get_Warning_Message_Content()
{
    if (pdunum == 48)
	return (Warning_Message_Content *)decoded;
    else
	return NULL;
}

const Warning_Message_Content *Write_Replace_Warning_Request_IEs_Value::get_Warning_Message_Content() const
{
    if (pdunum == 48)
	return (const Warning_Message_Content *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Message_Content(const Warning_Message_Content & data)
{
    void *copy;

    copy = new Warning_Message_Content(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 48;
	decoded = copy;
    }
}

Warning_Message_Content *Write_Replace_Warning_Request_IEs_Value::release_Warning_Message_Content()
{
    Warning_Message_Content * dvalue = pdunum == 48 ? (Warning_Message_Content *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Warning_Message_Content(Warning_Message_Content *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 48;
    decoded = data;
}

Omc_Id *Write_Replace_Warning_Request_IEs_Value::get_Omc_Id()
{
    if (pdunum == 36)
	return (Omc_Id *)decoded;
    else
	return NULL;
}

const Omc_Id *Write_Replace_Warning_Request_IEs_Value::get_Omc_Id() const
{
    if (pdunum == 36)
	return (const Omc_Id *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Omc_Id(const Omc_Id & data)
{
    void *copy;

    copy = new Omc_Id(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 36;
	decoded = copy;
    }
}

Omc_Id *Write_Replace_Warning_Request_IEs_Value::release_Omc_Id()
{
    Omc_Id * dvalue = pdunum == 36 ? (Omc_Id *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Omc_Id(Omc_Id *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 36;
    decoded = data;
}

Concurrent_Warning_Message_Indicator *Write_Replace_Warning_Request_IEs_Value::get_Concurrent_Warning_Message_Indicator()
{
    if (pdunum == 18)
	return (Concurrent_Warning_Message_Indicator *)decoded;
    else
	return NULL;
}

const Concurrent_Warning_Message_Indicator *Write_Replace_Warning_Request_IEs_Value::get_Concurrent_Warning_Message_Indicator() const
{
    if (pdunum == 18)
	return (const Concurrent_Warning_Message_Indicator *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Concurrent_Warning_Message_Indicator(const Concurrent_Warning_Message_Indicator & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Concurrent_Warning_Message_Indicator));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Concurrent_Warning_Message_Indicator *)copy = data;
	pdunum = 18;
	decoded = copy;
    }
}

Concurrent_Warning_Message_Indicator *Write_Replace_Warning_Request_IEs_Value::release_Concurrent_Warning_Message_Indicator()
{
    Concurrent_Warning_Message_Indicator * dvalue = pdunum == 18 ? (Concurrent_Warning_Message_Indicator *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Concurrent_Warning_Message_Indicator(Concurrent_Warning_Message_Indicator *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 18;
    decoded = data;
}

Send_Write_Replace_Warning_Indication *Write_Replace_Warning_Request_IEs_Value::get_Send_Write_Replace_Warning_Indication()
{
    if (pdunum == 41)
	return (Send_Write_Replace_Warning_Indication *)decoded;
    else
	return NULL;
}

const Send_Write_Replace_Warning_Indication *Write_Replace_Warning_Request_IEs_Value::get_Send_Write_Replace_Warning_Indication() const
{
    if (pdunum == 41)
	return (const Send_Write_Replace_Warning_Indication *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Send_Write_Replace_Warning_Indication(const Send_Write_Replace_Warning_Indication & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Send_Write_Replace_Warning_Indication));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Send_Write_Replace_Warning_Indication *)copy = data;
	pdunum = 41;
	decoded = copy;
    }
}

Send_Write_Replace_Warning_Indication *Write_Replace_Warning_Request_IEs_Value::release_Send_Write_Replace_Warning_Indication()
{
    Send_Write_Replace_Warning_Indication * dvalue = pdunum == 41 ? (Send_Write_Replace_Warning_Indication *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Send_Write_Replace_Warning_Indication(Send_Write_Replace_Warning_Indication *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 41;
    decoded = data;
}

Global_ENB_ID *Write_Replace_Warning_Request_IEs_Value::get_Global_ENB_ID()
{
    if (pdunum == 24)
	return (Global_ENB_ID *)decoded;
    else
	return NULL;
}

const Global_ENB_ID *Write_Replace_Warning_Request_IEs_Value::get_Global_ENB_ID() const
{
    if (pdunum == 24)
	return (const Global_ENB_ID *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_IEs_Value::set_Global_ENB_ID(const Global_ENB_ID & data)
{
    void *copy;

    copy = new Global_ENB_ID(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 24;
	decoded = copy;
    }
}

Global_ENB_ID *Write_Replace_Warning_Request_IEs_Value::release_Global_ENB_ID()
{
    Global_ENB_ID * dvalue = pdunum == 24 ? (Global_ENB_ID *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_IEs_Value::set_Global_ENB_ID(Global_ENB_ID *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 24;
    decoded = data;
}

void Write_Replace_Warning_Request_IEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

/* Auxiliary data structures and functions for class __shared7 */

class __shared7_member {
public:
    __shared7_member *next;
    __shared7::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared7_member();
    __shared7_member(const __shared7::component & val);
};

void *__shared7_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared7_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared7_member::__shared7_member() {
}

__shared7_member::__shared7_member(const __shared7::component & val) {
    value = val;
}

static void *__shared7_copy(void *that) {
    return new __shared7_member(((__shared7_member *)that)->value);
}

static void __shared7_destroy(void *that) {
    delete (__shared7_member *)that;
}

static int __shared7_compare(void *val1, void *val2) {
    return (((__shared7_member *)val1)->value == ((__shared7_member *)val2)->value);
}

/* Constructors */

__shared7::__shared7() {
}

__shared7::__shared7(const __shared7 & that) {
    OSSTRY {
	do_copy(that, &__shared7_copy);
    } OSSCLEAN(__shared7)
}

/* Destructor */

__shared7::~__shared7() {
    do_destroy(&__shared7_destroy);
}

/* Operators: assignment, equality, inequality */

__shared7 & __shared7::operator = (const __shared7 & that) {
    do_destroy(&__shared7_destroy);
    do_copy(that, &__shared7_copy);
    return *this;
}

int __shared7::operator == (const __shared7 & that) const {
    return do_compare(that, &__shared7_compare);
}

int __shared7::operator != (const __shared7 & that) const {
    return !do_compare(that, &__shared7_compare);
}

/* Locate ("At" etc) methods */

__shared7::component *__shared7::at(OssIndex pos) {
    return &((__shared7_member *)pos)->value;
}

const __shared7::component *__shared7::at(OssIndex pos) const {
    return &((__shared7_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared7::prepend(const component & val) {
    __shared7_member *newrec = new __shared7_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared7::prepend(__shared7 *seq) {
    return do_prepend(seq);
}

OssIndex __shared7::insert_after(OssIndex pos, const component & val) {
    __shared7_member *newrec = new __shared7_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared7::insert_after(OssIndex pos, __shared7 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared7::remove_front() {
    __shared7_member *extr = (__shared7_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared7_destroy(extr);
    return 0;
}

int __shared7::remove_after(OssIndex pos) {
    __shared7_member *extr = (__shared7_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared7_destroy(extr);
    return 0;
}

/* Extract methods */

__shared7 *__shared7::extract_after(OssIndex begin, OssIndex end) {
    return (__shared7 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared8 */

class __shared8_member {
public:
    __shared8_member *next;
    __shared8::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared8_member();
    __shared8_member(const __shared8::component & val);
};

void *__shared8_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared8_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared8_member::__shared8_member() {
}

__shared8_member::__shared8_member(const __shared8::component & val) {
    value = val;
}

static void *__shared8_copy(void *that) {
    return new __shared8_member(((__shared8_member *)that)->value);
}

static void __shared8_destroy(void *that) {
    delete (__shared8_member *)that;
}

static int __shared8_compare(void *val1, void *val2) {
    return (((__shared8_member *)val1)->value == ((__shared8_member *)val2)->value);
}

/* Constructors */

__shared8::__shared8() {
}

__shared8::__shared8(const __shared8 & that) {
    OSSTRY {
	do_copy(that, &__shared8_copy);
    } OSSCLEAN(__shared8)
}

/* Destructor */

__shared8::~__shared8() {
    do_destroy(&__shared8_destroy);
}

/* Operators: assignment, equality, inequality */

__shared8 & __shared8::operator = (const __shared8 & that) {
    do_destroy(&__shared8_destroy);
    do_copy(that, &__shared8_copy);
    return *this;
}

int __shared8::operator == (const __shared8 & that) const {
    return do_compare(that, &__shared8_compare);
}

int __shared8::operator != (const __shared8 & that) const {
    return !do_compare(that, &__shared8_compare);
}

/* Locate ("At" etc) methods */

__shared8::component *__shared8::at(OssIndex pos) {
    return &((__shared8_member *)pos)->value;
}

const __shared8::component *__shared8::at(OssIndex pos) const {
    return &((__shared8_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared8::prepend(const component & val) {
    __shared8_member *newrec = new __shared8_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared8::prepend(__shared8 *seq) {
    return do_prepend(seq);
}

OssIndex __shared8::insert_after(OssIndex pos, const component & val) {
    __shared8_member *newrec = new __shared8_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared8::insert_after(OssIndex pos, __shared8 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared8::remove_front() {
    __shared8_member *extr = (__shared8_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared8_destroy(extr);
    return 0;
}

int __shared8::remove_after(OssIndex pos) {
    __shared8_member *extr = (__shared8_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared8_destroy(extr);
    return 0;
}

/* Extract methods */

__shared8 *__shared8::extract_after(OssIndex begin, OssIndex end) {
    return (__shared8 *)do_extract_after(begin, end);
}

void *TAI_5GS::operator new(size_t size) {
    return ossNewFunc(size);
}

void TAI_5GS::operator delete(void *ptr) {
    asn1Free(ptr);
}

TAI_5GS::TAI_5GS() {
    memset(this, 0, sizeof(TAI_5GS));
}

TAI_5GS::TAI_5GS(const TAI_5GS & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	pLMNidentity_field = that.pLMNidentity_field;
	tAC_5GS_field = that.tAC_5GS_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(TAI_5GS)
}

TAI_5GS::TAI_5GS(const pLMNidentity & pLMNidentity_val, const tAC_5GS & tAC_5GS_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	pLMNidentity_field = pLMNidentity_val;
	tAC_5GS_field = tAC_5GS_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(TAI_5GS)
}

TAI_5GS::TAI_5GS(const pLMNidentity & pLMNidentity_val, const tAC_5GS & tAC_5GS_val) {
    OSSTRY {
	bit_mask = 0;
	pLMNidentity_field = pLMNidentity_val;
	tAC_5GS_field = tAC_5GS_val;
    } OSSCLEAN(TAI_5GS)
}

TAI_5GS & TAI_5GS::operator = (const TAI_5GS & that) {
    if (this == &that)
	return *this;
    this->~TAI_5GS();
    bit_mask = that.bit_mask;
    pLMNidentity_field = that.pLMNidentity_field;
    tAC_5GS_field = that.tAC_5GS_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int TAI_5GS::operator == (const TAI_5GS & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (pLMNidentity_field != that.pLMNidentity_field)
	return 0;
    if (tAC_5GS_field != that.tAC_5GS_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int TAI_5GS::operator != (const TAI_5GS & that) const {
    return !(operator ==(that));
}

TAI_5GS::pLMNidentity & TAI_5GS::get_pLMNidentity() {
    return pLMNidentity_field;
}

const TAI_5GS::pLMNidentity & TAI_5GS::get_pLMNidentity() const {
    return pLMNidentity_field;
}

void TAI_5GS::set_pLMNidentity(const pLMNidentity & pLMNidentity_val) {
    pLMNidentity_field = pLMNidentity_val;
}

TAI_5GS::tAC_5GS & TAI_5GS::get_tAC_5GS() {
    return tAC_5GS_field;
}

const TAI_5GS::tAC_5GS & TAI_5GS::get_tAC_5GS() const {
    return tAC_5GS_field;
}

void TAI_5GS::set_tAC_5GS(const tAC_5GS & tAC_5GS_val) {
    tAC_5GS_field = tAC_5GS_val;
}

TAI_5GS::iE_Extensions *TAI_5GS::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const TAI_5GS::iE_Extensions *TAI_5GS::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void TAI_5GS::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int TAI_5GS::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void TAI_5GS::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

Warning_Area_List_5GS::Warning_Area_List_5GS() {
    memset(this, 0, sizeof(Warning_Area_List_5GS));
}

Warning_Area_List_5GS::Warning_Area_List_5GS(const Warning_Area_List_5GS & that) {
    memset(this, 0, sizeof(Warning_Area_List_5GS));
    operator =(that);
}

Warning_Area_List_5GS::~Warning_Area_List_5GS() {
    cleanup();
}

Warning_Area_List_5GS & Warning_Area_List_5GS::operator = (const Warning_Area_List_5GS & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case cell_ID_List_chosen:
	    *(cell_ID_List *)&cell_ID_List_field = *(cell_ID_List *)&that.cell_ID_List_field;
	    break;
	case nR_CGIList_chosen:
	    *(nR_CGIList *)&nR_CGIList_field = *(nR_CGIList *)&that.nR_CGIList_field;
	    break;
	case tAIList_5GS_chosen:
	    if (that.tAIList_5GS_field)
		tAIList_5GS_field = new tAIList_5GS(*that.tAIList_5GS_field);
	    break;
	case emergencyAreaIDList_chosen:
	    *(emergencyAreaIDList *)&emergencyAreaIDList_field = *(emergencyAreaIDList *)&that.emergencyAreaIDList_field;
	    break;
    }
    return *this;
}

int Warning_Area_List_5GS::operator == (const Warning_Area_List_5GS & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case cell_ID_List_chosen:
	    return *(cell_ID_List *)&cell_ID_List_field == *(cell_ID_List *)&that.cell_ID_List_field;
	case nR_CGIList_chosen:
	    return *(nR_CGIList *)&nR_CGIList_field == *(nR_CGIList *)&that.nR_CGIList_field;
	case tAIList_5GS_chosen:
	    if ((tAIList_5GS_field) && (that.tAIList_5GS_field))
		return (*tAIList_5GS_field == *(that.tAIList_5GS_field));
	    else if (!((!tAIList_5GS_field) && (!that.tAIList_5GS_field)))
		return 0;
	    break;
	case emergencyAreaIDList_chosen:
	    return *(emergencyAreaIDList *)&emergencyAreaIDList_field == *(emergencyAreaIDList *)&that.emergencyAreaIDList_field;
    }

    return 1;
}

int Warning_Area_List_5GS::operator != (const Warning_Area_List_5GS & that) const {
    return !(operator ==(that));
}

Warning_Area_List_5GS::cell_ID_List *Warning_Area_List_5GS::get_cell_ID_List() {
    if (_choice == cell_ID_List_chosen)
	return (cell_ID_List *)&cell_ID_List_field;
    else
	return 0;
}

const Warning_Area_List_5GS::cell_ID_List *Warning_Area_List_5GS::get_cell_ID_List() const {
    if (_choice == cell_ID_List_chosen)
	return (const cell_ID_List *)&cell_ID_List_field;
    else
	return 0;
}

void Warning_Area_List_5GS::set_cell_ID_List(const cell_ID_List & cell_ID_List_val) {
    cleanup();
    *(cell_ID_List *)&cell_ID_List_field = cell_ID_List_val;
    _choice = cell_ID_List_chosen;
}

Warning_Area_List_5GS::nR_CGIList *Warning_Area_List_5GS::get_nR_CGIList() {
    if (_choice == nR_CGIList_chosen)
	return (nR_CGIList *)&nR_CGIList_field;
    else
	return 0;
}

const Warning_Area_List_5GS::nR_CGIList *Warning_Area_List_5GS::get_nR_CGIList() const {
    if (_choice == nR_CGIList_chosen)
	return (const nR_CGIList *)&nR_CGIList_field;
    else
	return 0;
}

void Warning_Area_List_5GS::set_nR_CGIList(const nR_CGIList & nR_CGIList_val) {
    cleanup();
    *(nR_CGIList *)&nR_CGIList_field = nR_CGIList_val;
    _choice = nR_CGIList_chosen;
}

Warning_Area_List_5GS::tAIList_5GS *Warning_Area_List_5GS::get_tAIList_5GS() {
    if (_choice == tAIList_5GS_chosen)
	return (tAIList_5GS *)tAIList_5GS_field;
    else
	return 0;
}

const Warning_Area_List_5GS::tAIList_5GS *Warning_Area_List_5GS::get_tAIList_5GS() const {
    if (_choice == tAIList_5GS_chosen)
	return (const tAIList_5GS *)tAIList_5GS_field;
    else
	return 0;
}

void Warning_Area_List_5GS::set_tAIList_5GS(const tAIList_5GS & tAIList_5GS_val) {
    cleanup();
    tAIList_5GS_field = new tAIList_5GS(tAIList_5GS_val);
    _choice = tAIList_5GS_chosen;
}

Warning_Area_List_5GS::emergencyAreaIDList *Warning_Area_List_5GS::get_emergencyAreaIDList() {
    if (_choice == emergencyAreaIDList_chosen)
	return (emergencyAreaIDList *)&emergencyAreaIDList_field;
    else
	return 0;
}

const Warning_Area_List_5GS::emergencyAreaIDList *Warning_Area_List_5GS::get_emergencyAreaIDList() const {
    if (_choice == emergencyAreaIDList_chosen)
	return (const emergencyAreaIDList *)&emergencyAreaIDList_field;
    else
	return 0;
}

void Warning_Area_List_5GS::set_emergencyAreaIDList(const emergencyAreaIDList & emergencyAreaIDList_val) {
    cleanup();
    *(emergencyAreaIDList *)&emergencyAreaIDList_field = emergencyAreaIDList_val;
    _choice = emergencyAreaIDList_chosen;
}

void Warning_Area_List_5GS::cleanup() {
    switch (_choice) {
	case cell_ID_List_chosen:
	    ((cell_ID_List *)&cell_ID_List_field)->~__shared4();
	    break;
	case nR_CGIList_chosen:
	    ((nR_CGIList *)&nR_CGIList_field)->~__shared8();
	    break;
	case tAIList_5GS_chosen:
	    if (tAIList_5GS_field)
		delete tAIList_5GS_field;
	    break;
	case emergencyAreaIDList_chosen:
	    ((emergencyAreaIDList *)&emergencyAreaIDList_field)->~__shared6();
	    break;
    }
    memset(this, 0, sizeof(*this));
}

GNB_ID::GNB_ID() {
    memset(this, 0, sizeof(GNB_ID));
}

GNB_ID::GNB_ID(const GNB_ID & that) {
    memset(this, 0, sizeof(GNB_ID));
    operator =(that);
}

GNB_ID::~GNB_ID() {
    cleanup();
}

GNB_ID & GNB_ID::operator = (const GNB_ID & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case gNB_ID_chosen:
	    *(gNB_ID *)&gNB_ID_field = *(gNB_ID *)&that.gNB_ID_field;
	    break;
    }
    return *this;
}

int GNB_ID::operator == (const GNB_ID & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case gNB_ID_chosen:
	    return *(gNB_ID *)&gNB_ID_field == *(gNB_ID *)&that.gNB_ID_field;
    }

    return 1;
}

int GNB_ID::operator != (const GNB_ID & that) const {
    return !(operator ==(that));
}

GNB_ID::gNB_ID *GNB_ID::get_gNB_ID() {
    if (_choice == gNB_ID_chosen)
	return (gNB_ID *)&gNB_ID_field;
    else
	return 0;
}

const GNB_ID::gNB_ID *GNB_ID::get_gNB_ID() const {
    if (_choice == gNB_ID_chosen)
	return (const gNB_ID *)&gNB_ID_field;
    else
	return 0;
}

void GNB_ID::set_gNB_ID(const gNB_ID & gNB_ID_val) {
    cleanup();
    *(gNB_ID *)&gNB_ID_field = gNB_ID_val;
    _choice = gNB_ID_chosen;
}

void GNB_ID::cleanup() {
    switch (_choice) {
	case gNB_ID_chosen:
	    ((gNB_ID *)&gNB_ID_field)->~OssBitString();
	    break;
    }
    memset(this, 0, sizeof(*this));
}

void *Global_GNB_ID::operator new(size_t size) {
    return ossNewFunc(size);
}

void Global_GNB_ID::operator delete(void *ptr) {
    asn1Free(ptr);
}

Global_GNB_ID::Global_GNB_ID() {
    memset(this, 0, sizeof(Global_GNB_ID));
}

Global_GNB_ID::Global_GNB_ID(const Global_GNB_ID & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	pLMNidentity_field = that.pLMNidentity_field;
	gNB_ID_field = that.gNB_ID_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Global_GNB_ID)
}

Global_GNB_ID::Global_GNB_ID(const pLMNidentity & pLMNidentity_val, const gNB_ID & gNB_ID_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	pLMNidentity_field = pLMNidentity_val;
	gNB_ID_field = gNB_ID_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Global_GNB_ID)
}

Global_GNB_ID::Global_GNB_ID(const pLMNidentity & pLMNidentity_val, const gNB_ID & gNB_ID_val) {
    OSSTRY {
	bit_mask = 0;
	pLMNidentity_field = pLMNidentity_val;
	gNB_ID_field = gNB_ID_val;
    } OSSCLEAN(Global_GNB_ID)
}

Global_GNB_ID & Global_GNB_ID::operator = (const Global_GNB_ID & that) {
    if (this == &that)
	return *this;
    this->~Global_GNB_ID();
    bit_mask = that.bit_mask;
    pLMNidentity_field = that.pLMNidentity_field;
    gNB_ID_field = that.gNB_ID_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Global_GNB_ID::operator == (const Global_GNB_ID & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (pLMNidentity_field != that.pLMNidentity_field)
	return 0;
    if (gNB_ID_field != that.gNB_ID_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Global_GNB_ID::operator != (const Global_GNB_ID & that) const {
    return !(operator ==(that));
}

Global_GNB_ID::pLMNidentity & Global_GNB_ID::get_pLMNidentity() {
    return pLMNidentity_field;
}

const Global_GNB_ID::pLMNidentity & Global_GNB_ID::get_pLMNidentity() const {
    return pLMNidentity_field;
}

void Global_GNB_ID::set_pLMNidentity(const pLMNidentity & pLMNidentity_val) {
    pLMNidentity_field = pLMNidentity_val;
}

Global_GNB_ID::gNB_ID & Global_GNB_ID::get_gNB_ID() {
    return gNB_ID_field;
}

const Global_GNB_ID::gNB_ID & Global_GNB_ID::get_gNB_ID() const {
    return gNB_ID_field;
}

void Global_GNB_ID::set_gNB_ID(const gNB_ID & gNB_ID_val) {
    gNB_ID_field = gNB_ID_val;
}

Global_GNB_ID::iE_Extensions *Global_GNB_ID::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Global_GNB_ID::iE_Extensions *Global_GNB_ID::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Global_GNB_ID::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Global_GNB_ID::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Global_GNB_ID::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *Global_NgENB_ID::operator new(size_t size) {
    return ossNewFunc(size);
}

void Global_NgENB_ID::operator delete(void *ptr) {
    asn1Free(ptr);
}

Global_NgENB_ID::Global_NgENB_ID() {
    memset(this, 0, sizeof(Global_NgENB_ID));
}

Global_NgENB_ID::Global_NgENB_ID(const Global_NgENB_ID & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	pLMNidentity_field = that.pLMNidentity_field;
	ngENB_ID_field = that.ngENB_ID_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Global_NgENB_ID)
}

Global_NgENB_ID::Global_NgENB_ID(const pLMNidentity & pLMNidentity_val, const ngENB_ID & ngENB_ID_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	pLMNidentity_field = pLMNidentity_val;
	ngENB_ID_field = ngENB_ID_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Global_NgENB_ID)
}

Global_NgENB_ID::Global_NgENB_ID(const pLMNidentity & pLMNidentity_val, const ngENB_ID & ngENB_ID_val) {
    OSSTRY {
	bit_mask = 0;
	pLMNidentity_field = pLMNidentity_val;
	ngENB_ID_field = ngENB_ID_val;
    } OSSCLEAN(Global_NgENB_ID)
}

Global_NgENB_ID & Global_NgENB_ID::operator = (const Global_NgENB_ID & that) {
    if (this == &that)
	return *this;
    this->~Global_NgENB_ID();
    bit_mask = that.bit_mask;
    pLMNidentity_field = that.pLMNidentity_field;
    ngENB_ID_field = that.ngENB_ID_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Global_NgENB_ID::operator == (const Global_NgENB_ID & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (pLMNidentity_field != that.pLMNidentity_field)
	return 0;
    if (ngENB_ID_field != that.ngENB_ID_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Global_NgENB_ID::operator != (const Global_NgENB_ID & that) const {
    return !(operator ==(that));
}

Global_NgENB_ID::pLMNidentity & Global_NgENB_ID::get_pLMNidentity() {
    return pLMNidentity_field;
}

const Global_NgENB_ID::pLMNidentity & Global_NgENB_ID::get_pLMNidentity() const {
    return pLMNidentity_field;
}

void Global_NgENB_ID::set_pLMNidentity(const pLMNidentity & pLMNidentity_val) {
    pLMNidentity_field = pLMNidentity_val;
}

Global_NgENB_ID::ngENB_ID & Global_NgENB_ID::get_ngENB_ID() {
    return ngENB_ID_field;
}

const Global_NgENB_ID::ngENB_ID & Global_NgENB_ID::get_ngENB_ID() const {
    return ngENB_ID_field;
}

void Global_NgENB_ID::set_ngENB_ID(const ngENB_ID & ngENB_ID_val) {
    ngENB_ID_field = ngENB_ID_val;
}

Global_NgENB_ID::iE_Extensions *Global_NgENB_ID::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Global_NgENB_ID::iE_Extensions *Global_NgENB_ID::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Global_NgENB_ID::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Global_NgENB_ID::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Global_NgENB_ID::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

Global_RAN_Node_ID::Global_RAN_Node_ID() {
    memset(this, 0, sizeof(Global_RAN_Node_ID));
}

Global_RAN_Node_ID::Global_RAN_Node_ID(const Global_RAN_Node_ID & that) {
    memset(this, 0, sizeof(Global_RAN_Node_ID));
    operator =(that);
}

Global_RAN_Node_ID::~Global_RAN_Node_ID() {
    cleanup();
}

Global_RAN_Node_ID & Global_RAN_Node_ID::operator = (const Global_RAN_Node_ID & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case global_GNB_ID_chosen:
	    if (that.global_GNB_ID_field)
		global_GNB_ID_field = new global_GNB_ID(*that.global_GNB_ID_field);
	    break;
	case global_NgENB_ID_chosen:
	    if (that.global_NgENB_ID_field)
		global_NgENB_ID_field = new global_NgENB_ID(*that.global_NgENB_ID_field);
	    break;
    }
    return *this;
}

int Global_RAN_Node_ID::operator == (const Global_RAN_Node_ID & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case global_GNB_ID_chosen:
	    if ((global_GNB_ID_field) && (that.global_GNB_ID_field))
		return (*global_GNB_ID_field == *(that.global_GNB_ID_field));
	    else if (!((!global_GNB_ID_field) && (!that.global_GNB_ID_field)))
		return 0;
	    break;
	case global_NgENB_ID_chosen:
	    if ((global_NgENB_ID_field) && (that.global_NgENB_ID_field))
		return (*global_NgENB_ID_field == *(that.global_NgENB_ID_field));
	    else if (!((!global_NgENB_ID_field) && (!that.global_NgENB_ID_field)))
		return 0;
	    break;
    }

    return 1;
}

int Global_RAN_Node_ID::operator != (const Global_RAN_Node_ID & that) const {
    return !(operator ==(that));
}

Global_RAN_Node_ID::global_GNB_ID *Global_RAN_Node_ID::get_global_GNB_ID() {
    if (_choice == global_GNB_ID_chosen)
	return (global_GNB_ID *)global_GNB_ID_field;
    else
	return 0;
}

const Global_RAN_Node_ID::global_GNB_ID *Global_RAN_Node_ID::get_global_GNB_ID() const {
    if (_choice == global_GNB_ID_chosen)
	return (const global_GNB_ID *)global_GNB_ID_field;
    else
	return 0;
}

void Global_RAN_Node_ID::set_global_GNB_ID(const global_GNB_ID & global_GNB_ID_val) {
    cleanup();
    global_GNB_ID_field = new global_GNB_ID(global_GNB_ID_val);
    _choice = global_GNB_ID_chosen;
}

Global_RAN_Node_ID::global_NgENB_ID *Global_RAN_Node_ID::get_global_NgENB_ID() {
    if (_choice == global_NgENB_ID_chosen)
	return (global_NgENB_ID *)global_NgENB_ID_field;
    else
	return 0;
}

const Global_RAN_Node_ID::global_NgENB_ID *Global_RAN_Node_ID::get_global_NgENB_ID() const {
    if (_choice == global_NgENB_ID_chosen)
	return (const global_NgENB_ID *)global_NgENB_ID_field;
    else
	return 0;
}

void Global_RAN_Node_ID::set_global_NgENB_ID(const global_NgENB_ID & global_NgENB_ID_val) {
    cleanup();
    global_NgENB_ID_field = new global_NgENB_ID(global_NgENB_ID_val);
    _choice = global_NgENB_ID_chosen;
}

void Global_RAN_Node_ID::cleanup() {
    switch (_choice) {
	case global_GNB_ID_chosen:
	    if (global_GNB_ID_field)
		delete global_GNB_ID_field;
	    break;
	case global_NgENB_ID_chosen:
	    if (global_NgENB_ID_field)
		delete global_NgENB_ID_field;
	    break;
    }
    memset(this, 0, sizeof(*this));
}

Write_Replace_Warning_Request_Extensions_Extension::Write_Replace_Warning_Request_Extensions_Extension()
{
}

Write_Replace_Warning_Request_Extensions_Extension::Write_Replace_Warning_Request_Extensions_Extension(const Write_Replace_Warning_Request_Extensions_Extension & that)
{
    operator =(that);
}

Write_Replace_Warning_Request_Extensions_Extension::~Write_Replace_Warning_Request_Extensions_Extension()
{
    cleanup_decoded();
}

Write_Replace_Warning_Request_Extensions_Extension & Write_Replace_Warning_Request_Extensions_Extension::operator = (const Write_Replace_Warning_Request_Extensions_Extension & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Write_Replace_Warning_Request_Extensions_Extension::operator == (const Write_Replace_Warning_Request_Extensions_Extension & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Write_Replace_Warning_Request_Extensions_Extension::operator != (const Write_Replace_Warning_Request_Extensions_Extension & that) const
{
    return !(operator ==(that));
}

int Write_Replace_Warning_Request_Extensions_Extension::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Write_Replace_Warning_Request_Extensions_Extension::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Write_Replace_Warning_Request_Extensions_Extension::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Write_Replace_Warning_Request_Extensions_Extension::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Write_Replace_Warning_Request_Extensions_Extension::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared7 *Write_Replace_Warning_Request_Extensions_Extension::get_List_of_5GS_TAIs()
{
    if (pdunum == 30)
	return (__shared7 *)decoded;
    else
	return NULL;
}

const __shared7 *Write_Replace_Warning_Request_Extensions_Extension::get_List_of_5GS_TAIs() const
{
    if (pdunum == 30)
	return (const __shared7 *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_List_of_5GS_TAIs(const __shared7 & data)
{
    void *copy;

    copy = new List_of_5GS_TAIs(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 30;
	decoded = copy;
    }
}

__shared7 *Write_Replace_Warning_Request_Extensions_Extension::release_List_of_5GS_TAIs()
{
    __shared7 * dvalue = pdunum == 30 ? (__shared7 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_List_of_5GS_TAIs(__shared7 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 30;
    decoded = data;
}

Warning_Area_List_5GS *Write_Replace_Warning_Request_Extensions_Extension::get_Warning_Area_List_5GS()
{
    if (pdunum == 52)
	return (Warning_Area_List_5GS *)decoded;
    else
	return NULL;
}

const Warning_Area_List_5GS *Write_Replace_Warning_Request_Extensions_Extension::get_Warning_Area_List_5GS() const
{
    if (pdunum == 52)
	return (const Warning_Area_List_5GS *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_Warning_Area_List_5GS(const Warning_Area_List_5GS & data)
{
    void *copy;

    copy = new Warning_Area_List_5GS(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 52;
	decoded = copy;
    }
}

Warning_Area_List_5GS *Write_Replace_Warning_Request_Extensions_Extension::release_Warning_Area_List_5GS()
{
    Warning_Area_List_5GS * dvalue = pdunum == 52 ? (Warning_Area_List_5GS *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_Warning_Area_List_5GS(Warning_Area_List_5GS *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 52;
    decoded = data;
}

Global_RAN_Node_ID *Write_Replace_Warning_Request_Extensions_Extension::get_Global_RAN_Node_ID()
{
    if (pdunum == 25)
	return (Global_RAN_Node_ID *)decoded;
    else
	return NULL;
}

const Global_RAN_Node_ID *Write_Replace_Warning_Request_Extensions_Extension::get_Global_RAN_Node_ID() const
{
    if (pdunum == 25)
	return (const Global_RAN_Node_ID *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_Global_RAN_Node_ID(const Global_RAN_Node_ID & data)
{
    void *copy;

    copy = new Global_RAN_Node_ID(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 25;
	decoded = copy;
    }
}

Global_RAN_Node_ID *Write_Replace_Warning_Request_Extensions_Extension::release_Global_RAN_Node_ID()
{
    Global_RAN_Node_ID * dvalue = pdunum == 25 ? (Global_RAN_Node_ID *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_Global_RAN_Node_ID(Global_RAN_Node_ID *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 25;
    decoded = data;
}

RAT_Selector_5GS *Write_Replace_Warning_Request_Extensions_Extension::get_RAT_Selector_5GS()
{
    if (pdunum == 39)
	return (RAT_Selector_5GS *)decoded;
    else
	return NULL;
}

const RAT_Selector_5GS *Write_Replace_Warning_Request_Extensions_Extension::get_RAT_Selector_5GS() const
{
    if (pdunum == 39)
	return (const RAT_Selector_5GS *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_RAT_Selector_5GS(const RAT_Selector_5GS & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(RAT_Selector_5GS));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(RAT_Selector_5GS *)copy = data;
	pdunum = 39;
	decoded = copy;
    }
}

RAT_Selector_5GS *Write_Replace_Warning_Request_Extensions_Extension::release_RAT_Selector_5GS()
{
    RAT_Selector_5GS * dvalue = pdunum == 39 ? (RAT_Selector_5GS *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Request_Extensions_Extension::set_RAT_Selector_5GS(RAT_Selector_5GS *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 39;
    decoded = data;
}

void Write_Replace_Warning_Request_Extensions_Extension::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__seq1::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq1::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq1::__seq1() {
    memset(this, 0, sizeof(__seq1));
}

__seq1::__seq1(const __seq1 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__seq1)
}

__seq1::__seq1(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__seq1)
}

__seq1 & __seq1::operator = (const __seq1 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __seq1::operator == (const __seq1 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __seq1::operator != (const __seq1 & that) const {
    return !(operator ==(that));
}

__seq1::id & __seq1::get_id() {
    return id_field;
}

__seq1::id __seq1::get_id() const {
    return id_field;
}

void __seq1::set_id(id id_val) {
    id_field = id_val;
}

__seq1::criticality & __seq1::get_criticality() {
    return criticality_field;
}

__seq1::criticality __seq1::get_criticality() const {
    return criticality_field;
}

void __seq1::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq1::value & __seq1::get_value() {
    return value_field;
}

const __seq1::value & __seq1::get_value() const {
    return value_field;
}

void __seq1::set_value(const value & value_val) {
    value_field = value_val;
}

void *__seq2::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq2::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq2::__seq2() {
    memset(this, 0, sizeof(__seq2));
}

__seq2::__seq2(const __seq2 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__seq2)
}

__seq2::__seq2(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__seq2)
}

__seq2 & __seq2::operator = (const __seq2 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __seq2::operator == (const __seq2 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __seq2::operator != (const __seq2 & that) const {
    return !(operator ==(that));
}

__seq2::id & __seq2::get_id() {
    return id_field;
}

__seq2::id __seq2::get_id() const {
    return id_field;
}

void __seq2::set_id(id id_val) {
    id_field = id_val;
}

__seq2::criticality & __seq2::get_criticality() {
    return criticality_field;
}

__seq2::criticality __seq2::get_criticality() const {
    return criticality_field;
}

void __seq2::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq2::extensionValue & __seq2::get_extensionValue() {
    return extensionValue_field;
}

const __seq2::extensionValue & __seq2::get_extensionValue() const {
    return extensionValue_field;
}

void __seq2::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

/* Auxiliary data structures and functions for class __shared9 */

class __shared9_member {
public:
    __shared9_member *next;
    __shared9::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared9_member();
    __shared9_member(const __shared9::component & val);
};

void *__shared9_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared9_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared9_member::__shared9_member() {
}

__shared9_member::__shared9_member(const __shared9::component & val) {
    value = val;
}

static void *__shared9_copy(void *that) {
    return new __shared9_member(((__shared9_member *)that)->value);
}

static void __shared9_destroy(void *that) {
    delete (__shared9_member *)that;
}

static int __shared9_compare(void *val1, void *val2) {
    return (((__shared9_member *)val1)->value == ((__shared9_member *)val2)->value);
}

/* Constructors */

__shared9::__shared9() {
}

__shared9::__shared9(const __shared9 & that) {
    OSSTRY {
	do_copy(that, &__shared9_copy);
    } OSSCLEAN(__shared9)
}

/* Destructor */

__shared9::~__shared9() {
    do_destroy(&__shared9_destroy);
}

/* Operators: assignment, equality, inequality */

__shared9 & __shared9::operator = (const __shared9 & that) {
    do_destroy(&__shared9_destroy);
    do_copy(that, &__shared9_copy);
    return *this;
}

int __shared9::operator == (const __shared9 & that) const {
    return do_compare(that, &__shared9_compare);
}

int __shared9::operator != (const __shared9 & that) const {
    return !do_compare(that, &__shared9_compare);
}

/* Locate ("At" etc) methods */

__shared9::component *__shared9::at(OssIndex pos) {
    return &((__shared9_member *)pos)->value;
}

const __shared9::component *__shared9::at(OssIndex pos) const {
    return &((__shared9_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared9::prepend(const component & val) {
    __shared9_member *newrec = new __shared9_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared9::prepend(__shared9 *seq) {
    return do_prepend(seq);
}

OssIndex __shared9::insert_after(OssIndex pos, const component & val) {
    __shared9_member *newrec = new __shared9_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared9::insert_after(OssIndex pos, __shared9 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared9::remove_front() {
    __shared9_member *extr = (__shared9_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared9_destroy(extr);
    return 0;
}

int __shared9::remove_after(OssIndex pos) {
    __shared9_member *extr = (__shared9_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared9_destroy(extr);
    return 0;
}

/* Extract methods */

__shared9 *__shared9::extract_after(OssIndex begin, OssIndex end) {
    return (__shared9 *)do_extract_after(begin, end);
}

void *Criticality_Diagnostics::operator new(size_t size) {
    return ossNewFunc(size);
}

void Criticality_Diagnostics::operator delete(void *ptr) {
    asn1Free(ptr);
}

Criticality_Diagnostics::Criticality_Diagnostics() {
    memset(this, 0, sizeof(Criticality_Diagnostics));
}

Criticality_Diagnostics::Criticality_Diagnostics(const Criticality_Diagnostics & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	procedureCode_field = that.procedureCode_field;
	triggeringMessage_field = that.triggeringMessage_field;
	procedureCriticality_field = that.procedureCriticality_field;
	iE_CriticalityDiagnostics_field = that.iE_CriticalityDiagnostics_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Criticality_Diagnostics)
}

Criticality_Diagnostics::Criticality_Diagnostics(procedureCode procedureCode_val, 
    triggeringMessage triggeringMessage_val, procedureCriticality procedureCriticality_val, 
    const iE_CriticalityDiagnostics & iE_CriticalityDiagnostics_val, const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0xf8000000;
	procedureCode_field = procedureCode_val;
	triggeringMessage_field = triggeringMessage_val;
	procedureCriticality_field = procedureCriticality_val;
	iE_CriticalityDiagnostics_field = iE_CriticalityDiagnostics_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Criticality_Diagnostics)
}

Criticality_Diagnostics & Criticality_Diagnostics::operator = (const Criticality_Diagnostics & that) {
    if (this == &that)
	return *this;
    this->~Criticality_Diagnostics();
    bit_mask = that.bit_mask;
    procedureCode_field = that.procedureCode_field;
    triggeringMessage_field = that.triggeringMessage_field;
    procedureCriticality_field = that.procedureCriticality_field;
    iE_CriticalityDiagnostics_field = that.iE_CriticalityDiagnostics_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Criticality_Diagnostics::operator == (const Criticality_Diagnostics & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (bit_mask & 0x80000000) {
	if (procedureCode_field != that.procedureCode_field)
	    return 0;
    }
    if (bit_mask & 0x40000000) {
	if (triggeringMessage_field != that.triggeringMessage_field)
	    return 0;
    }
    if (bit_mask & 0x20000000) {
	if (procedureCriticality_field != that.procedureCriticality_field)
	    return 0;
    }
    if (bit_mask & 0x10000000) {
	if (iE_CriticalityDiagnostics_field != that.iE_CriticalityDiagnostics_field)
	    return 0;
    }
    if (bit_mask & 0x8000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Criticality_Diagnostics::operator != (const Criticality_Diagnostics & that) const {
    return !(operator ==(that));
}

Criticality_Diagnostics::procedureCode *Criticality_Diagnostics::get_procedureCode() {
    if (bit_mask & 0x80000000)
	return &procedureCode_field;
    else
	return 0;
}

const Criticality_Diagnostics::procedureCode *Criticality_Diagnostics::get_procedureCode() const {
    if (bit_mask & 0x80000000)
	return &procedureCode_field;
    else
	return 0;
}

void Criticality_Diagnostics::set_procedureCode(procedureCode procedureCode_val) {
    bit_mask |= 0x80000000;
    procedureCode_field = procedureCode_val;
}

int Criticality_Diagnostics::procedureCode_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Criticality_Diagnostics::omit_procedureCode() {
    bit_mask &= ~0x80000000;
}

Criticality_Diagnostics::triggeringMessage *Criticality_Diagnostics::get_triggeringMessage() {
    if (bit_mask & 0x40000000)
	return &triggeringMessage_field;
    else
	return 0;
}

const Criticality_Diagnostics::triggeringMessage *Criticality_Diagnostics::get_triggeringMessage() const {
    if (bit_mask & 0x40000000)
	return &triggeringMessage_field;
    else
	return 0;
}

void Criticality_Diagnostics::set_triggeringMessage(triggeringMessage triggeringMessage_val) {
    bit_mask |= 0x40000000;
    triggeringMessage_field = triggeringMessage_val;
}

int Criticality_Diagnostics::triggeringMessage_is_present() const {
    return !!(bit_mask & 0x40000000);
}

void Criticality_Diagnostics::omit_triggeringMessage() {
    bit_mask &= ~0x40000000;
}

Criticality_Diagnostics::procedureCriticality *Criticality_Diagnostics::get_procedureCriticality() {
    if (bit_mask & 0x20000000)
	return &procedureCriticality_field;
    else
	return 0;
}

const Criticality_Diagnostics::procedureCriticality *Criticality_Diagnostics::get_procedureCriticality() const {
    if (bit_mask & 0x20000000)
	return &procedureCriticality_field;
    else
	return 0;
}

void Criticality_Diagnostics::set_procedureCriticality(procedureCriticality procedureCriticality_val) {
    bit_mask |= 0x20000000;
    procedureCriticality_field = procedureCriticality_val;
}

int Criticality_Diagnostics::procedureCriticality_is_present() const {
    return !!(bit_mask & 0x20000000);
}

void Criticality_Diagnostics::omit_procedureCriticality() {
    bit_mask &= ~0x20000000;
}

Criticality_Diagnostics::iE_CriticalityDiagnostics *Criticality_Diagnostics::get_iE_CriticalityDiagnostics() {
    if (bit_mask & 0x10000000)
	return &iE_CriticalityDiagnostics_field;
    else
	return 0;
}

const Criticality_Diagnostics::iE_CriticalityDiagnostics *Criticality_Diagnostics::get_iE_CriticalityDiagnostics() const {
    if (bit_mask & 0x10000000)
	return &iE_CriticalityDiagnostics_field;
    else
	return 0;
}

void Criticality_Diagnostics::set_iE_CriticalityDiagnostics(const iE_CriticalityDiagnostics & iE_CriticalityDiagnostics_val) {
    bit_mask |= 0x10000000;
    iE_CriticalityDiagnostics_field = iE_CriticalityDiagnostics_val;
}

int Criticality_Diagnostics::iE_CriticalityDiagnostics_is_present() const {
    return !!(bit_mask & 0x10000000);
}

void Criticality_Diagnostics::omit_iE_CriticalityDiagnostics() {
    iE_CriticalityDiagnostics_field.~__shared9();
    bit_mask &= ~0x10000000;
}

Criticality_Diagnostics::iE_Extensions *Criticality_Diagnostics::get_iE_Extensions() {
    if (bit_mask & 0x8000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Criticality_Diagnostics::iE_Extensions *Criticality_Diagnostics::get_iE_Extensions() const {
    if (bit_mask & 0x8000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Criticality_Diagnostics::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x8000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Criticality_Diagnostics::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x8000000);
}

void Criticality_Diagnostics::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x8000000;
}

Write_Replace_Warning_Response_IEs_Value::Write_Replace_Warning_Response_IEs_Value()
{
}

Write_Replace_Warning_Response_IEs_Value::Write_Replace_Warning_Response_IEs_Value(const Write_Replace_Warning_Response_IEs_Value & that)
{
    operator =(that);
}

Write_Replace_Warning_Response_IEs_Value::~Write_Replace_Warning_Response_IEs_Value()
{
    cleanup_decoded();
}

Write_Replace_Warning_Response_IEs_Value & Write_Replace_Warning_Response_IEs_Value::operator = (const Write_Replace_Warning_Response_IEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Write_Replace_Warning_Response_IEs_Value::operator == (const Write_Replace_Warning_Response_IEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Write_Replace_Warning_Response_IEs_Value::operator != (const Write_Replace_Warning_Response_IEs_Value & that) const
{
    return !(operator ==(that));
}

int Write_Replace_Warning_Response_IEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Write_Replace_Warning_Response_IEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Write_Replace_Warning_Response_IEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Write_Replace_Warning_Response_IEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Write_Replace_Warning_Response_IEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Message_Identifier *Write_Replace_Warning_Response_IEs_Value::get_Message_Identifier()
{
    if (pdunum == 33)
	return (Message_Identifier *)decoded;
    else
	return NULL;
}

const Message_Identifier *Write_Replace_Warning_Response_IEs_Value::get_Message_Identifier() const
{
    if (pdunum == 33)
	return (const Message_Identifier *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Response_IEs_Value::set_Message_Identifier(const Message_Identifier & data)
{
    void *copy;

    copy = new Message_Identifier(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 33;
	decoded = copy;
    }
}

Message_Identifier *Write_Replace_Warning_Response_IEs_Value::release_Message_Identifier()
{
    Message_Identifier * dvalue = pdunum == 33 ? (Message_Identifier *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Response_IEs_Value::set_Message_Identifier(Message_Identifier *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 33;
    decoded = data;
}

Serial_Number *Write_Replace_Warning_Response_IEs_Value::get_Serial_Number()
{
    if (pdunum == 43)
	return (Serial_Number *)decoded;
    else
	return NULL;
}

const Serial_Number *Write_Replace_Warning_Response_IEs_Value::get_Serial_Number() const
{
    if (pdunum == 43)
	return (const Serial_Number *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Response_IEs_Value::set_Serial_Number(const Serial_Number & data)
{
    void *copy;

    copy = new Serial_Number(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 43;
	decoded = copy;
    }
}

Serial_Number *Write_Replace_Warning_Response_IEs_Value::release_Serial_Number()
{
    Serial_Number * dvalue = pdunum == 43 ? (Serial_Number *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Response_IEs_Value::set_Serial_Number(Serial_Number *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 43;
    decoded = data;
}

Cause *Write_Replace_Warning_Response_IEs_Value::get_Cause()
{
    if (pdunum == 17)
	return (Cause *)decoded;
    else
	return NULL;
}

const Cause *Write_Replace_Warning_Response_IEs_Value::get_Cause() const
{
    if (pdunum == 17)
	return (const Cause *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Response_IEs_Value::set_Cause(const Cause & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Cause));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Cause *)copy = data;
	pdunum = 17;
	decoded = copy;
    }
}

Cause *Write_Replace_Warning_Response_IEs_Value::release_Cause()
{
    Cause * dvalue = pdunum == 17 ? (Cause *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Response_IEs_Value::set_Cause(Cause *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 17;
    decoded = data;
}

Criticality_Diagnostics *Write_Replace_Warning_Response_IEs_Value::get_Criticality_Diagnostics()
{
    if (pdunum == 19)
	return (Criticality_Diagnostics *)decoded;
    else
	return NULL;
}

const Criticality_Diagnostics *Write_Replace_Warning_Response_IEs_Value::get_Criticality_Diagnostics() const
{
    if (pdunum == 19)
	return (const Criticality_Diagnostics *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Response_IEs_Value::set_Criticality_Diagnostics(const Criticality_Diagnostics & data)
{
    void *copy;

    copy = new Criticality_Diagnostics(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 19;
	decoded = copy;
    }
}

Criticality_Diagnostics *Write_Replace_Warning_Response_IEs_Value::release_Criticality_Diagnostics()
{
    Criticality_Diagnostics * dvalue = pdunum == 19 ? (Criticality_Diagnostics *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Response_IEs_Value::set_Criticality_Diagnostics(Criticality_Diagnostics *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 19;
    decoded = data;
}

__shared3 *Write_Replace_Warning_Response_IEs_Value::get_List_of_TAIs()
{
    if (pdunum == 27)
	return (__shared3 *)decoded;
    else
	return NULL;
}

const __shared3 *Write_Replace_Warning_Response_IEs_Value::get_List_of_TAIs() const
{
    if (pdunum == 27)
	return (const __shared3 *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Response_IEs_Value::set_List_of_TAIs(const __shared3 & data)
{
    void *copy;

    copy = new List_of_TAIs(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 27;
	decoded = copy;
    }
}

__shared3 *Write_Replace_Warning_Response_IEs_Value::release_List_of_TAIs()
{
    __shared3 * dvalue = pdunum == 27 ? (__shared3 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Response_IEs_Value::set_List_of_TAIs(__shared3 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 27;
    decoded = data;
}

void Write_Replace_Warning_Response_IEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

Write_Replace_Warning_Response_Extensions_Extension::Write_Replace_Warning_Response_Extensions_Extension()
{
}

Write_Replace_Warning_Response_Extensions_Extension::Write_Replace_Warning_Response_Extensions_Extension(const Write_Replace_Warning_Response_Extensions_Extension & that)
{
    operator =(that);
}

Write_Replace_Warning_Response_Extensions_Extension::~Write_Replace_Warning_Response_Extensions_Extension()
{
    cleanup_decoded();
}

Write_Replace_Warning_Response_Extensions_Extension & Write_Replace_Warning_Response_Extensions_Extension::operator = (const Write_Replace_Warning_Response_Extensions_Extension & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Write_Replace_Warning_Response_Extensions_Extension::operator == (const Write_Replace_Warning_Response_Extensions_Extension & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Write_Replace_Warning_Response_Extensions_Extension::operator != (const Write_Replace_Warning_Response_Extensions_Extension & that) const
{
    return !(operator ==(that));
}

int Write_Replace_Warning_Response_Extensions_Extension::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Write_Replace_Warning_Response_Extensions_Extension::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Write_Replace_Warning_Response_Extensions_Extension::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Write_Replace_Warning_Response_Extensions_Extension::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Write_Replace_Warning_Response_Extensions_Extension::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared7 *Write_Replace_Warning_Response_Extensions_Extension::get_Unknown_5GS_Tracking_Area_List()
{
    if (pdunum == 46)
	return (__shared7 *)decoded;
    else
	return NULL;
}

const __shared7 *Write_Replace_Warning_Response_Extensions_Extension::get_Unknown_5GS_Tracking_Area_List() const
{
    if (pdunum == 46)
	return (const __shared7 *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Response_Extensions_Extension::set_Unknown_5GS_Tracking_Area_List(const __shared7 & data)
{
    void *copy;

    copy = new Unknown_5GS_Tracking_Area_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 46;
	decoded = copy;
    }
}

__shared7 *Write_Replace_Warning_Response_Extensions_Extension::release_Unknown_5GS_Tracking_Area_List()
{
    __shared7 * dvalue = pdunum == 46 ? (__shared7 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Response_Extensions_Extension::set_Unknown_5GS_Tracking_Area_List(__shared7 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 46;
    decoded = data;
}

void Write_Replace_Warning_Response_Extensions_Extension::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__shared24::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared24::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared24::__shared24() {
    memset(this, 0, sizeof(__shared24));
}

__shared24::__shared24(const __shared24 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__shared24)
}

__shared24::__shared24(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__shared24)
}

__shared24 & __shared24::operator = (const __shared24 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __shared24::operator == (const __shared24 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __shared24::operator != (const __shared24 & that) const {
    return !(operator ==(that));
}

__shared24::id & __shared24::get_id() {
    return id_field;
}

__shared24::id __shared24::get_id() const {
    return id_field;
}

void __shared24::set_id(id id_val) {
    id_field = id_val;
}

__shared24::criticality & __shared24::get_criticality() {
    return criticality_field;
}

__shared24::criticality __shared24::get_criticality() const {
    return criticality_field;
}

void __shared24::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__shared24::value & __shared24::get_value() {
    return value_field;
}

const __shared24::value & __shared24::get_value() const {
    return value_field;
}

void __shared24::set_value(const value & value_val) {
    value_field = value_val;
}

void *__shared26::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared26::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared26::__shared26() {
    memset(this, 0, sizeof(__shared26));
}

__shared26::__shared26(const __shared26 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__shared26)
}

__shared26::__shared26(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__shared26)
}

__shared26 & __shared26::operator = (const __shared26 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __shared26::operator == (const __shared26 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __shared26::operator != (const __shared26 & that) const {
    return !(operator ==(that));
}

__shared26::id & __shared26::get_id() {
    return id_field;
}

__shared26::id __shared26::get_id() const {
    return id_field;
}

void __shared26::set_id(id id_val) {
    id_field = id_val;
}

__shared26::criticality & __shared26::get_criticality() {
    return criticality_field;
}

__shared26::criticality __shared26::get_criticality() const {
    return criticality_field;
}

void __shared26::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__shared26::extensionValue & __shared26::get_extensionValue() {
    return extensionValue_field;
}

const __shared26::extensionValue & __shared26::get_extensionValue() const {
    return extensionValue_field;
}

void __shared26::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

Stop_Warning_Request_IEs_Value::Stop_Warning_Request_IEs_Value()
{
}

Stop_Warning_Request_IEs_Value::Stop_Warning_Request_IEs_Value(const Stop_Warning_Request_IEs_Value & that)
{
    operator =(that);
}

Stop_Warning_Request_IEs_Value::~Stop_Warning_Request_IEs_Value()
{
    cleanup_decoded();
}

Stop_Warning_Request_IEs_Value & Stop_Warning_Request_IEs_Value::operator = (const Stop_Warning_Request_IEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Stop_Warning_Request_IEs_Value::operator == (const Stop_Warning_Request_IEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Stop_Warning_Request_IEs_Value::operator != (const Stop_Warning_Request_IEs_Value & that) const
{
    return !(operator ==(that));
}

int Stop_Warning_Request_IEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Stop_Warning_Request_IEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Stop_Warning_Request_IEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Stop_Warning_Request_IEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Stop_Warning_Request_IEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Message_Identifier *Stop_Warning_Request_IEs_Value::get_Message_Identifier()
{
    if (pdunum == 33)
	return (Message_Identifier *)decoded;
    else
	return NULL;
}

const Message_Identifier *Stop_Warning_Request_IEs_Value::get_Message_Identifier() const
{
    if (pdunum == 33)
	return (const Message_Identifier *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_IEs_Value::set_Message_Identifier(const Message_Identifier & data)
{
    void *copy;

    copy = new Message_Identifier(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 33;
	decoded = copy;
    }
}

Message_Identifier *Stop_Warning_Request_IEs_Value::release_Message_Identifier()
{
    Message_Identifier * dvalue = pdunum == 33 ? (Message_Identifier *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_IEs_Value::set_Message_Identifier(Message_Identifier *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 33;
    decoded = data;
}

Serial_Number *Stop_Warning_Request_IEs_Value::get_Serial_Number()
{
    if (pdunum == 43)
	return (Serial_Number *)decoded;
    else
	return NULL;
}

const Serial_Number *Stop_Warning_Request_IEs_Value::get_Serial_Number() const
{
    if (pdunum == 43)
	return (const Serial_Number *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_IEs_Value::set_Serial_Number(const Serial_Number & data)
{
    void *copy;

    copy = new Serial_Number(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 43;
	decoded = copy;
    }
}

Serial_Number *Stop_Warning_Request_IEs_Value::release_Serial_Number()
{
    Serial_Number * dvalue = pdunum == 43 ? (Serial_Number *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_IEs_Value::set_Serial_Number(Serial_Number *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 43;
    decoded = data;
}

__shared3 *Stop_Warning_Request_IEs_Value::get_List_of_TAIs()
{
    if (pdunum == 27)
	return (__shared3 *)decoded;
    else
	return NULL;
}

const __shared3 *Stop_Warning_Request_IEs_Value::get_List_of_TAIs() const
{
    if (pdunum == 27)
	return (const __shared3 *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_IEs_Value::set_List_of_TAIs(const __shared3 & data)
{
    void *copy;

    copy = new List_of_TAIs(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 27;
	decoded = copy;
    }
}

__shared3 *Stop_Warning_Request_IEs_Value::release_List_of_TAIs()
{
    __shared3 * dvalue = pdunum == 27 ? (__shared3 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_IEs_Value::set_List_of_TAIs(__shared3 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 27;
    decoded = data;
}

Warning_Area_List *Stop_Warning_Request_IEs_Value::get_Warning_Area_List()
{
    if (pdunum == 47)
	return (Warning_Area_List *)decoded;
    else
	return NULL;
}

const Warning_Area_List *Stop_Warning_Request_IEs_Value::get_Warning_Area_List() const
{
    if (pdunum == 47)
	return (const Warning_Area_List *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_IEs_Value::set_Warning_Area_List(const Warning_Area_List & data)
{
    void *copy;

    copy = new Warning_Area_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 47;
	decoded = copy;
    }
}

Warning_Area_List *Stop_Warning_Request_IEs_Value::release_Warning_Area_List()
{
    Warning_Area_List * dvalue = pdunum == 47 ? (Warning_Area_List *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_IEs_Value::set_Warning_Area_List(Warning_Area_List *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 47;
    decoded = data;
}

Omc_Id *Stop_Warning_Request_IEs_Value::get_Omc_Id()
{
    if (pdunum == 36)
	return (Omc_Id *)decoded;
    else
	return NULL;
}

const Omc_Id *Stop_Warning_Request_IEs_Value::get_Omc_Id() const
{
    if (pdunum == 36)
	return (const Omc_Id *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_IEs_Value::set_Omc_Id(const Omc_Id & data)
{
    void *copy;

    copy = new Omc_Id(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 36;
	decoded = copy;
    }
}

Omc_Id *Stop_Warning_Request_IEs_Value::release_Omc_Id()
{
    Omc_Id * dvalue = pdunum == 36 ? (Omc_Id *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_IEs_Value::set_Omc_Id(Omc_Id *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 36;
    decoded = data;
}

Send_Stop_Warning_Indication *Stop_Warning_Request_IEs_Value::get_Send_Stop_Warning_Indication()
{
    if (pdunum == 42)
	return (Send_Stop_Warning_Indication *)decoded;
    else
	return NULL;
}

const Send_Stop_Warning_Indication *Stop_Warning_Request_IEs_Value::get_Send_Stop_Warning_Indication() const
{
    if (pdunum == 42)
	return (const Send_Stop_Warning_Indication *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_IEs_Value::set_Send_Stop_Warning_Indication(const Send_Stop_Warning_Indication & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Send_Stop_Warning_Indication));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Send_Stop_Warning_Indication *)copy = data;
	pdunum = 42;
	decoded = copy;
    }
}

Send_Stop_Warning_Indication *Stop_Warning_Request_IEs_Value::release_Send_Stop_Warning_Indication()
{
    Send_Stop_Warning_Indication * dvalue = pdunum == 42 ? (Send_Stop_Warning_Indication *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_IEs_Value::set_Send_Stop_Warning_Indication(Send_Stop_Warning_Indication *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 42;
    decoded = data;
}

Stop_All_Indicator *Stop_Warning_Request_IEs_Value::get_Stop_All_Indicator()
{
    if (pdunum == 44)
	return (Stop_All_Indicator *)decoded;
    else
	return NULL;
}

const Stop_All_Indicator *Stop_Warning_Request_IEs_Value::get_Stop_All_Indicator() const
{
    if (pdunum == 44)
	return (const Stop_All_Indicator *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_IEs_Value::set_Stop_All_Indicator(const Stop_All_Indicator & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Stop_All_Indicator));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Stop_All_Indicator *)copy = data;
	pdunum = 44;
	decoded = copy;
    }
}

Stop_All_Indicator *Stop_Warning_Request_IEs_Value::release_Stop_All_Indicator()
{
    Stop_All_Indicator * dvalue = pdunum == 44 ? (Stop_All_Indicator *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_IEs_Value::set_Stop_All_Indicator(Stop_All_Indicator *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 44;
    decoded = data;
}

void Stop_Warning_Request_IEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

Stop_Warning_Request_Extensions_Extension::Stop_Warning_Request_Extensions_Extension()
{
}

Stop_Warning_Request_Extensions_Extension::Stop_Warning_Request_Extensions_Extension(const Stop_Warning_Request_Extensions_Extension & that)
{
    operator =(that);
}

Stop_Warning_Request_Extensions_Extension::~Stop_Warning_Request_Extensions_Extension()
{
    cleanup_decoded();
}

Stop_Warning_Request_Extensions_Extension & Stop_Warning_Request_Extensions_Extension::operator = (const Stop_Warning_Request_Extensions_Extension & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Stop_Warning_Request_Extensions_Extension::operator == (const Stop_Warning_Request_Extensions_Extension & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Stop_Warning_Request_Extensions_Extension::operator != (const Stop_Warning_Request_Extensions_Extension & that) const
{
    return !(operator ==(that));
}

int Stop_Warning_Request_Extensions_Extension::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Stop_Warning_Request_Extensions_Extension::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Stop_Warning_Request_Extensions_Extension::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Stop_Warning_Request_Extensions_Extension::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Stop_Warning_Request_Extensions_Extension::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared7 *Stop_Warning_Request_Extensions_Extension::get_List_of_5GS_TAIs()
{
    if (pdunum == 30)
	return (__shared7 *)decoded;
    else
	return NULL;
}

const __shared7 *Stop_Warning_Request_Extensions_Extension::get_List_of_5GS_TAIs() const
{
    if (pdunum == 30)
	return (const __shared7 *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_Extensions_Extension::set_List_of_5GS_TAIs(const __shared7 & data)
{
    void *copy;

    copy = new List_of_5GS_TAIs(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 30;
	decoded = copy;
    }
}

__shared7 *Stop_Warning_Request_Extensions_Extension::release_List_of_5GS_TAIs()
{
    __shared7 * dvalue = pdunum == 30 ? (__shared7 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_Extensions_Extension::set_List_of_5GS_TAIs(__shared7 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 30;
    decoded = data;
}

Warning_Area_List_5GS *Stop_Warning_Request_Extensions_Extension::get_Warning_Area_List_5GS()
{
    if (pdunum == 52)
	return (Warning_Area_List_5GS *)decoded;
    else
	return NULL;
}

const Warning_Area_List_5GS *Stop_Warning_Request_Extensions_Extension::get_Warning_Area_List_5GS() const
{
    if (pdunum == 52)
	return (const Warning_Area_List_5GS *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_Extensions_Extension::set_Warning_Area_List_5GS(const Warning_Area_List_5GS & data)
{
    void *copy;

    copy = new Warning_Area_List_5GS(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 52;
	decoded = copy;
    }
}

Warning_Area_List_5GS *Stop_Warning_Request_Extensions_Extension::release_Warning_Area_List_5GS()
{
    Warning_Area_List_5GS * dvalue = pdunum == 52 ? (Warning_Area_List_5GS *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_Extensions_Extension::set_Warning_Area_List_5GS(Warning_Area_List_5GS *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 52;
    decoded = data;
}

RAT_Selector_5GS *Stop_Warning_Request_Extensions_Extension::get_RAT_Selector_5GS()
{
    if (pdunum == 39)
	return (RAT_Selector_5GS *)decoded;
    else
	return NULL;
}

const RAT_Selector_5GS *Stop_Warning_Request_Extensions_Extension::get_RAT_Selector_5GS() const
{
    if (pdunum == 39)
	return (const RAT_Selector_5GS *)decoded;
    else
	return NULL;
}

void Stop_Warning_Request_Extensions_Extension::set_RAT_Selector_5GS(const RAT_Selector_5GS & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(RAT_Selector_5GS));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(RAT_Selector_5GS *)copy = data;
	pdunum = 39;
	decoded = copy;
    }
}

RAT_Selector_5GS *Stop_Warning_Request_Extensions_Extension::release_RAT_Selector_5GS()
{
    RAT_Selector_5GS * dvalue = pdunum == 39 ? (RAT_Selector_5GS *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Request_Extensions_Extension::set_RAT_Selector_5GS(RAT_Selector_5GS *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 39;
    decoded = data;
}

void Stop_Warning_Request_Extensions_Extension::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__seq5::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq5::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq5::__seq5() {
    memset(this, 0, sizeof(__seq5));
}

__seq5::__seq5(const __seq5 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__seq5)
}

__seq5::__seq5(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__seq5)
}

__seq5 & __seq5::operator = (const __seq5 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __seq5::operator == (const __seq5 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __seq5::operator != (const __seq5 & that) const {
    return !(operator ==(that));
}

__seq5::id & __seq5::get_id() {
    return id_field;
}

__seq5::id __seq5::get_id() const {
    return id_field;
}

void __seq5::set_id(id id_val) {
    id_field = id_val;
}

__seq5::criticality & __seq5::get_criticality() {
    return criticality_field;
}

__seq5::criticality __seq5::get_criticality() const {
    return criticality_field;
}

void __seq5::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq5::value & __seq5::get_value() {
    return value_field;
}

const __seq5::value & __seq5::get_value() const {
    return value_field;
}

void __seq5::set_value(const value & value_val) {
    value_field = value_val;
}

void *__seq6::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq6::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq6::__seq6() {
    memset(this, 0, sizeof(__seq6));
}

__seq6::__seq6(const __seq6 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__seq6)
}

__seq6::__seq6(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__seq6)
}

__seq6 & __seq6::operator = (const __seq6 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __seq6::operator == (const __seq6 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __seq6::operator != (const __seq6 & that) const {
    return !(operator ==(that));
}

__seq6::id & __seq6::get_id() {
    return id_field;
}

__seq6::id __seq6::get_id() const {
    return id_field;
}

void __seq6::set_id(id id_val) {
    id_field = id_val;
}

__seq6::criticality & __seq6::get_criticality() {
    return criticality_field;
}

__seq6::criticality __seq6::get_criticality() const {
    return criticality_field;
}

void __seq6::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq6::extensionValue & __seq6::get_extensionValue() {
    return extensionValue_field;
}

const __seq6::extensionValue & __seq6::get_extensionValue() const {
    return extensionValue_field;
}

void __seq6::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

/* Auxiliary data structures and functions for class __shared11 */

class __shared11_member {
public:
    __shared11_member *next;
    __shared11::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared11_member();
    __shared11_member(const __shared11::component & val);
};

void *__shared11_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared11_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared11_member::__shared11_member() {
}

__shared11_member::__shared11_member(const __shared11::component & val) {
    value = val;
}

static void *__shared11_copy(void *that) {
    return new __shared11_member(((__shared11_member *)that)->value);
}

static void __shared11_destroy(void *that) {
    delete (__shared11_member *)that;
}

static int __shared11_compare(void *val1, void *val2) {
    return (((__shared11_member *)val1)->value == ((__shared11_member *)val2)->value);
}

/* Constructors */

__shared11::__shared11() {
}

__shared11::__shared11(const __shared11 & that) {
    OSSTRY {
	do_copy(that, &__shared11_copy);
    } OSSCLEAN(__shared11)
}

/* Destructor */

__shared11::~__shared11() {
    do_destroy(&__shared11_destroy);
}

/* Operators: assignment, equality, inequality */

__shared11 & __shared11::operator = (const __shared11 & that) {
    do_destroy(&__shared11_destroy);
    do_copy(that, &__shared11_copy);
    return *this;
}

int __shared11::operator == (const __shared11 & that) const {
    return do_compare(that, &__shared11_compare);
}

int __shared11::operator != (const __shared11 & that) const {
    return !do_compare(that, &__shared11_compare);
}

/* Locate ("At" etc) methods */

__shared11::component *__shared11::at(OssIndex pos) {
    return &((__shared11_member *)pos)->value;
}

const __shared11::component *__shared11::at(OssIndex pos) const {
    return &((__shared11_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared11::prepend(const component & val) {
    __shared11_member *newrec = new __shared11_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared11::prepend(__shared11 *seq) {
    return do_prepend(seq);
}

OssIndex __shared11::insert_after(OssIndex pos, const component & val) {
    __shared11_member *newrec = new __shared11_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared11::insert_after(OssIndex pos, __shared11 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared11::remove_front() {
    __shared11_member *extr = (__shared11_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared11_destroy(extr);
    return 0;
}

int __shared11::remove_after(OssIndex pos) {
    __shared11_member *extr = (__shared11_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared11_destroy(extr);
    return 0;
}

/* Extract methods */

__shared11 *__shared11::extract_after(OssIndex begin, OssIndex end) {
    return (__shared11 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared12 */

class __shared12_member {
public:
    __shared12_member *next;
    __shared12::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared12_member();
    __shared12_member(const __shared12::component & val);
};

void *__shared12_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared12_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared12_member::__shared12_member() {
}

__shared12_member::__shared12_member(const __shared12::component & val) {
    value = val;
}

static void *__shared12_copy(void *that) {
    return new __shared12_member(((__shared12_member *)that)->value);
}

static void __shared12_destroy(void *that) {
    delete (__shared12_member *)that;
}

static int __shared12_compare(void *val1, void *val2) {
    return (((__shared12_member *)val1)->value == ((__shared12_member *)val2)->value);
}

/* Constructors */

__shared12::__shared12() {
}

__shared12::__shared12(const __shared12 & that) {
    OSSTRY {
	do_copy(that, &__shared12_copy);
    } OSSCLEAN(__shared12)
}

/* Destructor */

__shared12::~__shared12() {
    do_destroy(&__shared12_destroy);
}

/* Operators: assignment, equality, inequality */

__shared12 & __shared12::operator = (const __shared12 & that) {
    do_destroy(&__shared12_destroy);
    do_copy(that, &__shared12_copy);
    return *this;
}

int __shared12::operator == (const __shared12 & that) const {
    return do_compare(that, &__shared12_compare);
}

int __shared12::operator != (const __shared12 & that) const {
    return !do_compare(that, &__shared12_compare);
}

/* Locate ("At" etc) methods */

__shared12::component *__shared12::at(OssIndex pos) {
    return &((__shared12_member *)pos)->value;
}

const __shared12::component *__shared12::at(OssIndex pos) const {
    return &((__shared12_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared12::prepend(const component & val) {
    __shared12_member *newrec = new __shared12_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared12::prepend(__shared12 *seq) {
    return do_prepend(seq);
}

OssIndex __shared12::insert_after(OssIndex pos, const component & val) {
    __shared12_member *newrec = new __shared12_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared12::insert_after(OssIndex pos, __shared12 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared12::remove_front() {
    __shared12_member *extr = (__shared12_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared12_destroy(extr);
    return 0;
}

int __shared12::remove_after(OssIndex pos) {
    __shared12_member *extr = (__shared12_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared12_destroy(extr);
    return 0;
}

/* Extract methods */

__shared12 *__shared12::extract_after(OssIndex begin, OssIndex end) {
    return (__shared12 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared13 */

class __shared13_member {
public:
    __shared13_member *next;
    __shared13::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared13_member();
    __shared13_member(const __shared13::component & val);
};

void *__shared13_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared13_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared13_member::__shared13_member() {
}

__shared13_member::__shared13_member(const __shared13::component & val) {
    value = val;
}

static void *__shared13_copy(void *that) {
    return new __shared13_member(((__shared13_member *)that)->value);
}

static void __shared13_destroy(void *that) {
    delete (__shared13_member *)that;
}

static int __shared13_compare(void *val1, void *val2) {
    return (((__shared13_member *)val1)->value == ((__shared13_member *)val2)->value);
}

/* Constructors */

__shared13::__shared13() {
}

__shared13::__shared13(const __shared13 & that) {
    OSSTRY {
	do_copy(that, &__shared13_copy);
    } OSSCLEAN(__shared13)
}

/* Destructor */

__shared13::~__shared13() {
    do_destroy(&__shared13_destroy);
}

/* Operators: assignment, equality, inequality */

__shared13 & __shared13::operator = (const __shared13 & that) {
    do_destroy(&__shared13_destroy);
    do_copy(that, &__shared13_copy);
    return *this;
}

int __shared13::operator == (const __shared13 & that) const {
    return do_compare(that, &__shared13_compare);
}

int __shared13::operator != (const __shared13 & that) const {
    return !do_compare(that, &__shared13_compare);
}

/* Locate ("At" etc) methods */

__shared13::component *__shared13::at(OssIndex pos) {
    return &((__shared13_member *)pos)->value;
}

const __shared13::component *__shared13::at(OssIndex pos) const {
    return &((__shared13_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared13::prepend(const component & val) {
    __shared13_member *newrec = new __shared13_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared13::prepend(__shared13 *seq) {
    return do_prepend(seq);
}

OssIndex __shared13::insert_after(OssIndex pos, const component & val) {
    __shared13_member *newrec = new __shared13_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared13::insert_after(OssIndex pos, __shared13 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared13::remove_front() {
    __shared13_member *extr = (__shared13_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared13_destroy(extr);
    return 0;
}

int __shared13::remove_after(OssIndex pos) {
    __shared13_member *extr = (__shared13_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared13_destroy(extr);
    return 0;
}

/* Extract methods */

__shared13 *__shared13::extract_after(OssIndex begin, OssIndex end) {
    return (__shared13 *)do_extract_after(begin, end);
}

void *Broadcast_Scheduled_Area_List::operator new(size_t size) {
    return ossNewFunc(size);
}

void Broadcast_Scheduled_Area_List::operator delete(void *ptr) {
    asn1Free(ptr);
}

Broadcast_Scheduled_Area_List::Broadcast_Scheduled_Area_List() {
    memset(this, 0, sizeof(Broadcast_Scheduled_Area_List));
}

Broadcast_Scheduled_Area_List::Broadcast_Scheduled_Area_List(const Broadcast_Scheduled_Area_List & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	cellId_Broadcast_List_field = that.cellId_Broadcast_List_field;
	tAI_Broadcast_List_field = that.tAI_Broadcast_List_field;
	emergencyAreaID_Broadcast_List_field = that.emergencyAreaID_Broadcast_List_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Broadcast_Scheduled_Area_List)
}

Broadcast_Scheduled_Area_List::Broadcast_Scheduled_Area_List(const cellId_Broadcast_List & cellId_Broadcast_List_val, 
    const tAI_Broadcast_List & tAI_Broadcast_List_val, const emergencyAreaID_Broadcast_List & emergencyAreaID_Broadcast_List_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0xf0000000;
	cellId_Broadcast_List_field = cellId_Broadcast_List_val;
	tAI_Broadcast_List_field = tAI_Broadcast_List_val;
	emergencyAreaID_Broadcast_List_field = emergencyAreaID_Broadcast_List_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Broadcast_Scheduled_Area_List)
}

Broadcast_Scheduled_Area_List & Broadcast_Scheduled_Area_List::operator = (const Broadcast_Scheduled_Area_List & that) {
    if (this == &that)
	return *this;
    this->~Broadcast_Scheduled_Area_List();
    bit_mask = that.bit_mask;
    cellId_Broadcast_List_field = that.cellId_Broadcast_List_field;
    tAI_Broadcast_List_field = that.tAI_Broadcast_List_field;
    emergencyAreaID_Broadcast_List_field = that.emergencyAreaID_Broadcast_List_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Broadcast_Scheduled_Area_List::operator == (const Broadcast_Scheduled_Area_List & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (bit_mask & 0x80000000) {
	if (cellId_Broadcast_List_field != that.cellId_Broadcast_List_field)
	    return 0;
    }
    if (bit_mask & 0x40000000) {
	if (tAI_Broadcast_List_field != that.tAI_Broadcast_List_field)
	    return 0;
    }
    if (bit_mask & 0x20000000) {
	if (emergencyAreaID_Broadcast_List_field != that.emergencyAreaID_Broadcast_List_field)
	    return 0;
    }
    if (bit_mask & 0x10000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Broadcast_Scheduled_Area_List::operator != (const Broadcast_Scheduled_Area_List & that) const {
    return !(operator ==(that));
}

Broadcast_Scheduled_Area_List::cellId_Broadcast_List *Broadcast_Scheduled_Area_List::get_cellId_Broadcast_List() {
    if (bit_mask & 0x80000000)
	return &cellId_Broadcast_List_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List::cellId_Broadcast_List *Broadcast_Scheduled_Area_List::get_cellId_Broadcast_List() const {
    if (bit_mask & 0x80000000)
	return &cellId_Broadcast_List_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List::set_cellId_Broadcast_List(const cellId_Broadcast_List & cellId_Broadcast_List_val) {
    bit_mask |= 0x80000000;
    cellId_Broadcast_List_field = cellId_Broadcast_List_val;
}

int Broadcast_Scheduled_Area_List::cellId_Broadcast_List_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Broadcast_Scheduled_Area_List::omit_cellId_Broadcast_List() {
    cellId_Broadcast_List_field.~__shared11();
    bit_mask &= ~0x80000000;
}

Broadcast_Scheduled_Area_List::tAI_Broadcast_List *Broadcast_Scheduled_Area_List::get_tAI_Broadcast_List() {
    if (bit_mask & 0x40000000)
	return &tAI_Broadcast_List_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List::tAI_Broadcast_List *Broadcast_Scheduled_Area_List::get_tAI_Broadcast_List() const {
    if (bit_mask & 0x40000000)
	return &tAI_Broadcast_List_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List::set_tAI_Broadcast_List(const tAI_Broadcast_List & tAI_Broadcast_List_val) {
    bit_mask |= 0x40000000;
    tAI_Broadcast_List_field = tAI_Broadcast_List_val;
}

int Broadcast_Scheduled_Area_List::tAI_Broadcast_List_is_present() const {
    return !!(bit_mask & 0x40000000);
}

void Broadcast_Scheduled_Area_List::omit_tAI_Broadcast_List() {
    tAI_Broadcast_List_field.~__shared12();
    bit_mask &= ~0x40000000;
}

Broadcast_Scheduled_Area_List::emergencyAreaID_Broadcast_List *Broadcast_Scheduled_Area_List::get_emergencyAreaID_Broadcast_List() {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Broadcast_List_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List::emergencyAreaID_Broadcast_List *Broadcast_Scheduled_Area_List::get_emergencyAreaID_Broadcast_List() const {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Broadcast_List_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List::set_emergencyAreaID_Broadcast_List(const emergencyAreaID_Broadcast_List & emergencyAreaID_Broadcast_List_val) {
    bit_mask |= 0x20000000;
    emergencyAreaID_Broadcast_List_field = emergencyAreaID_Broadcast_List_val;
}

int Broadcast_Scheduled_Area_List::emergencyAreaID_Broadcast_List_is_present() const {
    return !!(bit_mask & 0x20000000);
}

void Broadcast_Scheduled_Area_List::omit_emergencyAreaID_Broadcast_List() {
    emergencyAreaID_Broadcast_List_field.~__shared13();
    bit_mask &= ~0x20000000;
}

Broadcast_Scheduled_Area_List::iE_Extensions *Broadcast_Scheduled_Area_List::get_iE_Extensions() {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List::iE_Extensions *Broadcast_Scheduled_Area_List::get_iE_Extensions() const {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x10000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Broadcast_Scheduled_Area_List::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x10000000);
}

void Broadcast_Scheduled_Area_List::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x10000000;
}

Write_Replace_Warning_Indication_IEs_Value::Write_Replace_Warning_Indication_IEs_Value()
{
}

Write_Replace_Warning_Indication_IEs_Value::Write_Replace_Warning_Indication_IEs_Value(const Write_Replace_Warning_Indication_IEs_Value & that)
{
    operator =(that);
}

Write_Replace_Warning_Indication_IEs_Value::~Write_Replace_Warning_Indication_IEs_Value()
{
    cleanup_decoded();
}

Write_Replace_Warning_Indication_IEs_Value & Write_Replace_Warning_Indication_IEs_Value::operator = (const Write_Replace_Warning_Indication_IEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Write_Replace_Warning_Indication_IEs_Value::operator == (const Write_Replace_Warning_Indication_IEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Write_Replace_Warning_Indication_IEs_Value::operator != (const Write_Replace_Warning_Indication_IEs_Value & that) const
{
    return !(operator ==(that));
}

int Write_Replace_Warning_Indication_IEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Write_Replace_Warning_Indication_IEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Write_Replace_Warning_Indication_IEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Write_Replace_Warning_Indication_IEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Write_Replace_Warning_Indication_IEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Message_Identifier *Write_Replace_Warning_Indication_IEs_Value::get_Message_Identifier()
{
    if (pdunum == 33)
	return (Message_Identifier *)decoded;
    else
	return NULL;
}

const Message_Identifier *Write_Replace_Warning_Indication_IEs_Value::get_Message_Identifier() const
{
    if (pdunum == 33)
	return (const Message_Identifier *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Indication_IEs_Value::set_Message_Identifier(const Message_Identifier & data)
{
    void *copy;

    copy = new Message_Identifier(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 33;
	decoded = copy;
    }
}

Message_Identifier *Write_Replace_Warning_Indication_IEs_Value::release_Message_Identifier()
{
    Message_Identifier * dvalue = pdunum == 33 ? (Message_Identifier *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Indication_IEs_Value::set_Message_Identifier(Message_Identifier *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 33;
    decoded = data;
}

Serial_Number *Write_Replace_Warning_Indication_IEs_Value::get_Serial_Number()
{
    if (pdunum == 43)
	return (Serial_Number *)decoded;
    else
	return NULL;
}

const Serial_Number *Write_Replace_Warning_Indication_IEs_Value::get_Serial_Number() const
{
    if (pdunum == 43)
	return (const Serial_Number *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Indication_IEs_Value::set_Serial_Number(const Serial_Number & data)
{
    void *copy;

    copy = new Serial_Number(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 43;
	decoded = copy;
    }
}

Serial_Number *Write_Replace_Warning_Indication_IEs_Value::release_Serial_Number()
{
    Serial_Number * dvalue = pdunum == 43 ? (Serial_Number *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Indication_IEs_Value::set_Serial_Number(Serial_Number *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 43;
    decoded = data;
}

Broadcast_Scheduled_Area_List *Write_Replace_Warning_Indication_IEs_Value::get_Broadcast_Scheduled_Area_List()
{
    if (pdunum == 11)
	return (Broadcast_Scheduled_Area_List *)decoded;
    else
	return NULL;
}

const Broadcast_Scheduled_Area_List *Write_Replace_Warning_Indication_IEs_Value::get_Broadcast_Scheduled_Area_List() const
{
    if (pdunum == 11)
	return (const Broadcast_Scheduled_Area_List *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Indication_IEs_Value::set_Broadcast_Scheduled_Area_List(const Broadcast_Scheduled_Area_List & data)
{
    void *copy;

    copy = new Broadcast_Scheduled_Area_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 11;
	decoded = copy;
    }
}

Broadcast_Scheduled_Area_List *Write_Replace_Warning_Indication_IEs_Value::release_Broadcast_Scheduled_Area_List()
{
    Broadcast_Scheduled_Area_List * dvalue = pdunum == 11 ? (Broadcast_Scheduled_Area_List *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Indication_IEs_Value::set_Broadcast_Scheduled_Area_List(Broadcast_Scheduled_Area_List *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 11;
    decoded = data;
}

void Write_Replace_Warning_Indication_IEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

/* Auxiliary data structures and functions for class __shared15 */

class __shared15_member {
public:
    __shared15_member *next;
    __shared15::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared15_member();
    __shared15_member(const __shared15::component & val);
};

void *__shared15_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared15_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared15_member::__shared15_member() {
}

__shared15_member::__shared15_member(const __shared15::component & val) {
    value = val;
}

static void *__shared15_copy(void *that) {
    return new __shared15_member(((__shared15_member *)that)->value);
}

static void __shared15_destroy(void *that) {
    delete (__shared15_member *)that;
}

static int __shared15_compare(void *val1, void *val2) {
    return (((__shared15_member *)val1)->value == ((__shared15_member *)val2)->value);
}

/* Constructors */

__shared15::__shared15() {
}

__shared15::__shared15(const __shared15 & that) {
    OSSTRY {
	do_copy(that, &__shared15_copy);
    } OSSCLEAN(__shared15)
}

/* Destructor */

__shared15::~__shared15() {
    do_destroy(&__shared15_destroy);
}

/* Operators: assignment, equality, inequality */

__shared15 & __shared15::operator = (const __shared15 & that) {
    do_destroy(&__shared15_destroy);
    do_copy(that, &__shared15_copy);
    return *this;
}

int __shared15::operator == (const __shared15 & that) const {
    return do_compare(that, &__shared15_compare);
}

int __shared15::operator != (const __shared15 & that) const {
    return !do_compare(that, &__shared15_compare);
}

/* Locate ("At" etc) methods */

__shared15::component *__shared15::at(OssIndex pos) {
    return &((__shared15_member *)pos)->value;
}

const __shared15::component *__shared15::at(OssIndex pos) const {
    return &((__shared15_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared15::prepend(const component & val) {
    __shared15_member *newrec = new __shared15_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared15::prepend(__shared15 *seq) {
    return do_prepend(seq);
}

OssIndex __shared15::insert_after(OssIndex pos, const component & val) {
    __shared15_member *newrec = new __shared15_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared15::insert_after(OssIndex pos, __shared15 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared15::remove_front() {
    __shared15_member *extr = (__shared15_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared15_destroy(extr);
    return 0;
}

int __shared15::remove_after(OssIndex pos) {
    __shared15_member *extr = (__shared15_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared15_destroy(extr);
    return 0;
}

/* Extract methods */

__shared15 *__shared15::extract_after(OssIndex begin, OssIndex end) {
    return (__shared15 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared16 */

class __shared16_member {
public:
    __shared16_member *next;
    __shared16::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared16_member();
    __shared16_member(const __shared16::component & val);
};

void *__shared16_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared16_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared16_member::__shared16_member() {
}

__shared16_member::__shared16_member(const __shared16::component & val) {
    value = val;
}

static void *__shared16_copy(void *that) {
    return new __shared16_member(((__shared16_member *)that)->value);
}

static void __shared16_destroy(void *that) {
    delete (__shared16_member *)that;
}

static int __shared16_compare(void *val1, void *val2) {
    return (((__shared16_member *)val1)->value == ((__shared16_member *)val2)->value);
}

/* Constructors */

__shared16::__shared16() {
}

__shared16::__shared16(const __shared16 & that) {
    OSSTRY {
	do_copy(that, &__shared16_copy);
    } OSSCLEAN(__shared16)
}

/* Destructor */

__shared16::~__shared16() {
    do_destroy(&__shared16_destroy);
}

/* Operators: assignment, equality, inequality */

__shared16 & __shared16::operator = (const __shared16 & that) {
    do_destroy(&__shared16_destroy);
    do_copy(that, &__shared16_copy);
    return *this;
}

int __shared16::operator == (const __shared16 & that) const {
    return do_compare(that, &__shared16_compare);
}

int __shared16::operator != (const __shared16 & that) const {
    return !do_compare(that, &__shared16_compare);
}

/* Locate ("At" etc) methods */

__shared16::component *__shared16::at(OssIndex pos) {
    return &((__shared16_member *)pos)->value;
}

const __shared16::component *__shared16::at(OssIndex pos) const {
    return &((__shared16_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared16::prepend(const component & val) {
    __shared16_member *newrec = new __shared16_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared16::prepend(__shared16 *seq) {
    return do_prepend(seq);
}

OssIndex __shared16::insert_after(OssIndex pos, const component & val) {
    __shared16_member *newrec = new __shared16_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared16::insert_after(OssIndex pos, __shared16 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared16::remove_front() {
    __shared16_member *extr = (__shared16_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared16_destroy(extr);
    return 0;
}

int __shared16::remove_after(OssIndex pos) {
    __shared16_member *extr = (__shared16_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared16_destroy(extr);
    return 0;
}

/* Extract methods */

__shared16 *__shared16::extract_after(OssIndex begin, OssIndex end) {
    return (__shared16 *)do_extract_after(begin, end);
}

void *Broadcast_Scheduled_Area_List_5GS::operator new(size_t size) {
    return ossNewFunc(size);
}

void Broadcast_Scheduled_Area_List_5GS::operator delete(void *ptr) {
    asn1Free(ptr);
}

Broadcast_Scheduled_Area_List_5GS::Broadcast_Scheduled_Area_List_5GS() {
    memset(this, 0, sizeof(Broadcast_Scheduled_Area_List_5GS));
}

Broadcast_Scheduled_Area_List_5GS::Broadcast_Scheduled_Area_List_5GS(const Broadcast_Scheduled_Area_List_5GS & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	cellId_Broadcast_List_5GS_field = that.cellId_Broadcast_List_5GS_field;
	tAI_Broadcast_List_5GS_field = that.tAI_Broadcast_List_5GS_field;
	emergencyAreaID_Broadcast_List_field = that.emergencyAreaID_Broadcast_List_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Broadcast_Scheduled_Area_List_5GS)
}

Broadcast_Scheduled_Area_List_5GS::Broadcast_Scheduled_Area_List_5GS(const cellId_Broadcast_List_5GS & cellId_Broadcast_List_5GS_val, 
    const tAI_Broadcast_List_5GS & tAI_Broadcast_List_5GS_val, const emergencyAreaID_Broadcast_List & emergencyAreaID_Broadcast_List_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0xf0000000;
	cellId_Broadcast_List_5GS_field = cellId_Broadcast_List_5GS_val;
	tAI_Broadcast_List_5GS_field = tAI_Broadcast_List_5GS_val;
	emergencyAreaID_Broadcast_List_field = emergencyAreaID_Broadcast_List_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Broadcast_Scheduled_Area_List_5GS)
}

Broadcast_Scheduled_Area_List_5GS & Broadcast_Scheduled_Area_List_5GS::operator = (const Broadcast_Scheduled_Area_List_5GS & that) {
    if (this == &that)
	return *this;
    this->~Broadcast_Scheduled_Area_List_5GS();
    bit_mask = that.bit_mask;
    cellId_Broadcast_List_5GS_field = that.cellId_Broadcast_List_5GS_field;
    tAI_Broadcast_List_5GS_field = that.tAI_Broadcast_List_5GS_field;
    emergencyAreaID_Broadcast_List_field = that.emergencyAreaID_Broadcast_List_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Broadcast_Scheduled_Area_List_5GS::operator == (const Broadcast_Scheduled_Area_List_5GS & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (bit_mask & 0x80000000) {
	if (cellId_Broadcast_List_5GS_field != that.cellId_Broadcast_List_5GS_field)
	    return 0;
    }
    if (bit_mask & 0x40000000) {
	if (tAI_Broadcast_List_5GS_field != that.tAI_Broadcast_List_5GS_field)
	    return 0;
    }
    if (bit_mask & 0x20000000) {
	if (emergencyAreaID_Broadcast_List_field != that.emergencyAreaID_Broadcast_List_field)
	    return 0;
    }
    if (bit_mask & 0x10000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Broadcast_Scheduled_Area_List_5GS::operator != (const Broadcast_Scheduled_Area_List_5GS & that) const {
    return !(operator ==(that));
}

Broadcast_Scheduled_Area_List_5GS::cellId_Broadcast_List_5GS *Broadcast_Scheduled_Area_List_5GS::get_cellId_Broadcast_List_5GS() {
    if (bit_mask & 0x80000000)
	return &cellId_Broadcast_List_5GS_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List_5GS::cellId_Broadcast_List_5GS *Broadcast_Scheduled_Area_List_5GS::get_cellId_Broadcast_List_5GS() const {
    if (bit_mask & 0x80000000)
	return &cellId_Broadcast_List_5GS_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List_5GS::set_cellId_Broadcast_List_5GS(const cellId_Broadcast_List_5GS & cellId_Broadcast_List_5GS_val) {
    bit_mask |= 0x80000000;
    cellId_Broadcast_List_5GS_field = cellId_Broadcast_List_5GS_val;
}

int Broadcast_Scheduled_Area_List_5GS::cellId_Broadcast_List_5GS_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Broadcast_Scheduled_Area_List_5GS::omit_cellId_Broadcast_List_5GS() {
    cellId_Broadcast_List_5GS_field.~__shared15();
    bit_mask &= ~0x80000000;
}

Broadcast_Scheduled_Area_List_5GS::tAI_Broadcast_List_5GS *Broadcast_Scheduled_Area_List_5GS::get_tAI_Broadcast_List_5GS() {
    if (bit_mask & 0x40000000)
	return &tAI_Broadcast_List_5GS_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List_5GS::tAI_Broadcast_List_5GS *Broadcast_Scheduled_Area_List_5GS::get_tAI_Broadcast_List_5GS() const {
    if (bit_mask & 0x40000000)
	return &tAI_Broadcast_List_5GS_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List_5GS::set_tAI_Broadcast_List_5GS(const tAI_Broadcast_List_5GS & tAI_Broadcast_List_5GS_val) {
    bit_mask |= 0x40000000;
    tAI_Broadcast_List_5GS_field = tAI_Broadcast_List_5GS_val;
}

int Broadcast_Scheduled_Area_List_5GS::tAI_Broadcast_List_5GS_is_present() const {
    return !!(bit_mask & 0x40000000);
}

void Broadcast_Scheduled_Area_List_5GS::omit_tAI_Broadcast_List_5GS() {
    tAI_Broadcast_List_5GS_field.~__shared16();
    bit_mask &= ~0x40000000;
}

Broadcast_Scheduled_Area_List_5GS::emergencyAreaID_Broadcast_List *Broadcast_Scheduled_Area_List_5GS::get_emergencyAreaID_Broadcast_List() {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Broadcast_List_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List_5GS::emergencyAreaID_Broadcast_List *Broadcast_Scheduled_Area_List_5GS::get_emergencyAreaID_Broadcast_List() const {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Broadcast_List_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List_5GS::set_emergencyAreaID_Broadcast_List(const emergencyAreaID_Broadcast_List & emergencyAreaID_Broadcast_List_val) {
    bit_mask |= 0x20000000;
    emergencyAreaID_Broadcast_List_field = emergencyAreaID_Broadcast_List_val;
}

int Broadcast_Scheduled_Area_List_5GS::emergencyAreaID_Broadcast_List_is_present() const {
    return !!(bit_mask & 0x20000000);
}

void Broadcast_Scheduled_Area_List_5GS::omit_emergencyAreaID_Broadcast_List() {
    emergencyAreaID_Broadcast_List_field.~__shared13();
    bit_mask &= ~0x20000000;
}

Broadcast_Scheduled_Area_List_5GS::iE_Extensions *Broadcast_Scheduled_Area_List_5GS::get_iE_Extensions() {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Broadcast_Scheduled_Area_List_5GS::iE_Extensions *Broadcast_Scheduled_Area_List_5GS::get_iE_Extensions() const {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Broadcast_Scheduled_Area_List_5GS::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x10000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Broadcast_Scheduled_Area_List_5GS::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x10000000);
}

void Broadcast_Scheduled_Area_List_5GS::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x10000000;
}

Write_Replace_Warning_Indication_Extensions_Extension::Write_Replace_Warning_Indication_Extensions_Extension()
{
}

Write_Replace_Warning_Indication_Extensions_Extension::Write_Replace_Warning_Indication_Extensions_Extension(const Write_Replace_Warning_Indication_Extensions_Extension & that)
{
    operator =(that);
}

Write_Replace_Warning_Indication_Extensions_Extension::~Write_Replace_Warning_Indication_Extensions_Extension()
{
    cleanup_decoded();
}

Write_Replace_Warning_Indication_Extensions_Extension & Write_Replace_Warning_Indication_Extensions_Extension::operator = (const Write_Replace_Warning_Indication_Extensions_Extension & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Write_Replace_Warning_Indication_Extensions_Extension::operator == (const Write_Replace_Warning_Indication_Extensions_Extension & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Write_Replace_Warning_Indication_Extensions_Extension::operator != (const Write_Replace_Warning_Indication_Extensions_Extension & that) const
{
    return !(operator ==(that));
}

int Write_Replace_Warning_Indication_Extensions_Extension::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Write_Replace_Warning_Indication_Extensions_Extension::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Write_Replace_Warning_Indication_Extensions_Extension::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Write_Replace_Warning_Indication_Extensions_Extension::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Write_Replace_Warning_Indication_Extensions_Extension::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Broadcast_Scheduled_Area_List_5GS *Write_Replace_Warning_Indication_Extensions_Extension::get_Broadcast_Scheduled_Area_List_5GS()
{
    if (pdunum == 12)
	return (Broadcast_Scheduled_Area_List_5GS *)decoded;
    else
	return NULL;
}

const Broadcast_Scheduled_Area_List_5GS *Write_Replace_Warning_Indication_Extensions_Extension::get_Broadcast_Scheduled_Area_List_5GS() const
{
    if (pdunum == 12)
	return (const Broadcast_Scheduled_Area_List_5GS *)decoded;
    else
	return NULL;
}

void Write_Replace_Warning_Indication_Extensions_Extension::set_Broadcast_Scheduled_Area_List_5GS(const Broadcast_Scheduled_Area_List_5GS & data)
{
    void *copy;

    copy = new Broadcast_Scheduled_Area_List_5GS(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 12;
	decoded = copy;
    }
}

Broadcast_Scheduled_Area_List_5GS *Write_Replace_Warning_Indication_Extensions_Extension::release_Broadcast_Scheduled_Area_List_5GS()
{
    Broadcast_Scheduled_Area_List_5GS * dvalue = pdunum == 12 ? (Broadcast_Scheduled_Area_List_5GS *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Write_Replace_Warning_Indication_Extensions_Extension::set_Broadcast_Scheduled_Area_List_5GS(Broadcast_Scheduled_Area_List_5GS *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 12;
    decoded = data;
}

void Write_Replace_Warning_Indication_Extensions_Extension::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__seq9::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq9::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq9::__seq9() {
    memset(this, 0, sizeof(__seq9));
}

__seq9::__seq9(const __seq9 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__seq9)
}

__seq9::__seq9(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__seq9)
}

__seq9 & __seq9::operator = (const __seq9 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __seq9::operator == (const __seq9 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __seq9::operator != (const __seq9 & that) const {
    return !(operator ==(that));
}

__seq9::id & __seq9::get_id() {
    return id_field;
}

__seq9::id __seq9::get_id() const {
    return id_field;
}

void __seq9::set_id(id id_val) {
    id_field = id_val;
}

__seq9::criticality & __seq9::get_criticality() {
    return criticality_field;
}

__seq9::criticality __seq9::get_criticality() const {
    return criticality_field;
}

void __seq9::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq9::value & __seq9::get_value() {
    return value_field;
}

const __seq9::value & __seq9::get_value() const {
    return value_field;
}

void __seq9::set_value(const value & value_val) {
    value_field = value_val;
}

void *__seq10::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq10::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq10::__seq10() {
    memset(this, 0, sizeof(__seq10));
}

__seq10::__seq10(const __seq10 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__seq10)
}

__seq10::__seq10(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__seq10)
}

__seq10 & __seq10::operator = (const __seq10 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __seq10::operator == (const __seq10 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __seq10::operator != (const __seq10 & that) const {
    return !(operator ==(that));
}

__seq10::id & __seq10::get_id() {
    return id_field;
}

__seq10::id __seq10::get_id() const {
    return id_field;
}

void __seq10::set_id(id id_val) {
    id_field = id_val;
}

__seq10::criticality & __seq10::get_criticality() {
    return criticality_field;
}

__seq10::criticality __seq10::get_criticality() const {
    return criticality_field;
}

void __seq10::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq10::extensionValue & __seq10::get_extensionValue() {
    return extensionValue_field;
}

const __seq10::extensionValue & __seq10::get_extensionValue() const {
    return extensionValue_field;
}

void __seq10::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

/* Auxiliary data structures and functions for class __shared18 */

class __shared18_member {
public:
    __shared18_member *next;
    __shared18::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared18_member();
    __shared18_member(const __shared18::component & val);
};

void *__shared18_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared18_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared18_member::__shared18_member() {
}

__shared18_member::__shared18_member(const __shared18::component & val) {
    value = val;
}

static void *__shared18_copy(void *that) {
    return new __shared18_member(((__shared18_member *)that)->value);
}

static void __shared18_destroy(void *that) {
    delete (__shared18_member *)that;
}

static int __shared18_compare(void *val1, void *val2) {
    return (((__shared18_member *)val1)->value == ((__shared18_member *)val2)->value);
}

/* Constructors */

__shared18::__shared18() {
}

__shared18::__shared18(const __shared18 & that) {
    OSSTRY {
	do_copy(that, &__shared18_copy);
    } OSSCLEAN(__shared18)
}

/* Destructor */

__shared18::~__shared18() {
    do_destroy(&__shared18_destroy);
}

/* Operators: assignment, equality, inequality */

__shared18 & __shared18::operator = (const __shared18 & that) {
    do_destroy(&__shared18_destroy);
    do_copy(that, &__shared18_copy);
    return *this;
}

int __shared18::operator == (const __shared18 & that) const {
    return do_compare(that, &__shared18_compare);
}

int __shared18::operator != (const __shared18 & that) const {
    return !do_compare(that, &__shared18_compare);
}

/* Locate ("At" etc) methods */

__shared18::component *__shared18::at(OssIndex pos) {
    return &((__shared18_member *)pos)->value;
}

const __shared18::component *__shared18::at(OssIndex pos) const {
    return &((__shared18_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared18::prepend(const component & val) {
    __shared18_member *newrec = new __shared18_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared18::prepend(__shared18 *seq) {
    return do_prepend(seq);
}

OssIndex __shared18::insert_after(OssIndex pos, const component & val) {
    __shared18_member *newrec = new __shared18_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared18::insert_after(OssIndex pos, __shared18 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared18::remove_front() {
    __shared18_member *extr = (__shared18_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared18_destroy(extr);
    return 0;
}

int __shared18::remove_after(OssIndex pos) {
    __shared18_member *extr = (__shared18_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared18_destroy(extr);
    return 0;
}

/* Extract methods */

__shared18 *__shared18::extract_after(OssIndex begin, OssIndex end) {
    return (__shared18 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared19 */

class __shared19_member {
public:
    __shared19_member *next;
    __shared19::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared19_member();
    __shared19_member(const __shared19::component & val);
};

void *__shared19_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared19_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared19_member::__shared19_member() {
}

__shared19_member::__shared19_member(const __shared19::component & val) {
    value = val;
}

static void *__shared19_copy(void *that) {
    return new __shared19_member(((__shared19_member *)that)->value);
}

static void __shared19_destroy(void *that) {
    delete (__shared19_member *)that;
}

static int __shared19_compare(void *val1, void *val2) {
    return (((__shared19_member *)val1)->value == ((__shared19_member *)val2)->value);
}

/* Constructors */

__shared19::__shared19() {
}

__shared19::__shared19(const __shared19 & that) {
    OSSTRY {
	do_copy(that, &__shared19_copy);
    } OSSCLEAN(__shared19)
}

/* Destructor */

__shared19::~__shared19() {
    do_destroy(&__shared19_destroy);
}

/* Operators: assignment, equality, inequality */

__shared19 & __shared19::operator = (const __shared19 & that) {
    do_destroy(&__shared19_destroy);
    do_copy(that, &__shared19_copy);
    return *this;
}

int __shared19::operator == (const __shared19 & that) const {
    return do_compare(that, &__shared19_compare);
}

int __shared19::operator != (const __shared19 & that) const {
    return !do_compare(that, &__shared19_compare);
}

/* Locate ("At" etc) methods */

__shared19::component *__shared19::at(OssIndex pos) {
    return &((__shared19_member *)pos)->value;
}

const __shared19::component *__shared19::at(OssIndex pos) const {
    return &((__shared19_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared19::prepend(const component & val) {
    __shared19_member *newrec = new __shared19_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared19::prepend(__shared19 *seq) {
    return do_prepend(seq);
}

OssIndex __shared19::insert_after(OssIndex pos, const component & val) {
    __shared19_member *newrec = new __shared19_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared19::insert_after(OssIndex pos, __shared19 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared19::remove_front() {
    __shared19_member *extr = (__shared19_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared19_destroy(extr);
    return 0;
}

int __shared19::remove_after(OssIndex pos) {
    __shared19_member *extr = (__shared19_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared19_destroy(extr);
    return 0;
}

/* Extract methods */

__shared19 *__shared19::extract_after(OssIndex begin, OssIndex end) {
    return (__shared19 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared20 */

class __shared20_member {
public:
    __shared20_member *next;
    __shared20::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared20_member();
    __shared20_member(const __shared20::component & val);
};

void *__shared20_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared20_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared20_member::__shared20_member() {
}

__shared20_member::__shared20_member(const __shared20::component & val) {
    value = val;
}

static void *__shared20_copy(void *that) {
    return new __shared20_member(((__shared20_member *)that)->value);
}

static void __shared20_destroy(void *that) {
    delete (__shared20_member *)that;
}

static int __shared20_compare(void *val1, void *val2) {
    return (((__shared20_member *)val1)->value == ((__shared20_member *)val2)->value);
}

/* Constructors */

__shared20::__shared20() {
}

__shared20::__shared20(const __shared20 & that) {
    OSSTRY {
	do_copy(that, &__shared20_copy);
    } OSSCLEAN(__shared20)
}

/* Destructor */

__shared20::~__shared20() {
    do_destroy(&__shared20_destroy);
}

/* Operators: assignment, equality, inequality */

__shared20 & __shared20::operator = (const __shared20 & that) {
    do_destroy(&__shared20_destroy);
    do_copy(that, &__shared20_copy);
    return *this;
}

int __shared20::operator == (const __shared20 & that) const {
    return do_compare(that, &__shared20_compare);
}

int __shared20::operator != (const __shared20 & that) const {
    return !do_compare(that, &__shared20_compare);
}

/* Locate ("At" etc) methods */

__shared20::component *__shared20::at(OssIndex pos) {
    return &((__shared20_member *)pos)->value;
}

const __shared20::component *__shared20::at(OssIndex pos) const {
    return &((__shared20_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared20::prepend(const component & val) {
    __shared20_member *newrec = new __shared20_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared20::prepend(__shared20 *seq) {
    return do_prepend(seq);
}

OssIndex __shared20::insert_after(OssIndex pos, const component & val) {
    __shared20_member *newrec = new __shared20_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared20::insert_after(OssIndex pos, __shared20 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared20::remove_front() {
    __shared20_member *extr = (__shared20_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared20_destroy(extr);
    return 0;
}

int __shared20::remove_after(OssIndex pos) {
    __shared20_member *extr = (__shared20_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared20_destroy(extr);
    return 0;
}

/* Extract methods */

__shared20 *__shared20::extract_after(OssIndex begin, OssIndex end) {
    return (__shared20 *)do_extract_after(begin, end);
}

void *Broadcast_Cancelled_Area_List::operator new(size_t size) {
    return ossNewFunc(size);
}

void Broadcast_Cancelled_Area_List::operator delete(void *ptr) {
    asn1Free(ptr);
}

Broadcast_Cancelled_Area_List::Broadcast_Cancelled_Area_List() {
    memset(this, 0, sizeof(Broadcast_Cancelled_Area_List));
}

Broadcast_Cancelled_Area_List::Broadcast_Cancelled_Area_List(const Broadcast_Cancelled_Area_List & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	cellID_Cancelled_List_field = that.cellID_Cancelled_List_field;
	tAI_Cancelled_List_field = that.tAI_Cancelled_List_field;
	emergencyAreaID_Cancelled_List_field = that.emergencyAreaID_Cancelled_List_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Broadcast_Cancelled_Area_List)
}

Broadcast_Cancelled_Area_List::Broadcast_Cancelled_Area_List(const cellID_Cancelled_List & cellID_Cancelled_List_val, 
    const tAI_Cancelled_List & tAI_Cancelled_List_val, const emergencyAreaID_Cancelled_List & emergencyAreaID_Cancelled_List_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0xf0000000;
	cellID_Cancelled_List_field = cellID_Cancelled_List_val;
	tAI_Cancelled_List_field = tAI_Cancelled_List_val;
	emergencyAreaID_Cancelled_List_field = emergencyAreaID_Cancelled_List_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Broadcast_Cancelled_Area_List)
}

Broadcast_Cancelled_Area_List & Broadcast_Cancelled_Area_List::operator = (const Broadcast_Cancelled_Area_List & that) {
    if (this == &that)
	return *this;
    this->~Broadcast_Cancelled_Area_List();
    bit_mask = that.bit_mask;
    cellID_Cancelled_List_field = that.cellID_Cancelled_List_field;
    tAI_Cancelled_List_field = that.tAI_Cancelled_List_field;
    emergencyAreaID_Cancelled_List_field = that.emergencyAreaID_Cancelled_List_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Broadcast_Cancelled_Area_List::operator == (const Broadcast_Cancelled_Area_List & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (bit_mask & 0x80000000) {
	if (cellID_Cancelled_List_field != that.cellID_Cancelled_List_field)
	    return 0;
    }
    if (bit_mask & 0x40000000) {
	if (tAI_Cancelled_List_field != that.tAI_Cancelled_List_field)
	    return 0;
    }
    if (bit_mask & 0x20000000) {
	if (emergencyAreaID_Cancelled_List_field != that.emergencyAreaID_Cancelled_List_field)
	    return 0;
    }
    if (bit_mask & 0x10000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Broadcast_Cancelled_Area_List::operator != (const Broadcast_Cancelled_Area_List & that) const {
    return !(operator ==(that));
}

Broadcast_Cancelled_Area_List::cellID_Cancelled_List *Broadcast_Cancelled_Area_List::get_cellID_Cancelled_List() {
    if (bit_mask & 0x80000000)
	return &cellID_Cancelled_List_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List::cellID_Cancelled_List *Broadcast_Cancelled_Area_List::get_cellID_Cancelled_List() const {
    if (bit_mask & 0x80000000)
	return &cellID_Cancelled_List_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List::set_cellID_Cancelled_List(const cellID_Cancelled_List & cellID_Cancelled_List_val) {
    bit_mask |= 0x80000000;
    cellID_Cancelled_List_field = cellID_Cancelled_List_val;
}

int Broadcast_Cancelled_Area_List::cellID_Cancelled_List_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Broadcast_Cancelled_Area_List::omit_cellID_Cancelled_List() {
    cellID_Cancelled_List_field.~__shared18();
    bit_mask &= ~0x80000000;
}

Broadcast_Cancelled_Area_List::tAI_Cancelled_List *Broadcast_Cancelled_Area_List::get_tAI_Cancelled_List() {
    if (bit_mask & 0x40000000)
	return &tAI_Cancelled_List_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List::tAI_Cancelled_List *Broadcast_Cancelled_Area_List::get_tAI_Cancelled_List() const {
    if (bit_mask & 0x40000000)
	return &tAI_Cancelled_List_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List::set_tAI_Cancelled_List(const tAI_Cancelled_List & tAI_Cancelled_List_val) {
    bit_mask |= 0x40000000;
    tAI_Cancelled_List_field = tAI_Cancelled_List_val;
}

int Broadcast_Cancelled_Area_List::tAI_Cancelled_List_is_present() const {
    return !!(bit_mask & 0x40000000);
}

void Broadcast_Cancelled_Area_List::omit_tAI_Cancelled_List() {
    tAI_Cancelled_List_field.~__shared19();
    bit_mask &= ~0x40000000;
}

Broadcast_Cancelled_Area_List::emergencyAreaID_Cancelled_List *Broadcast_Cancelled_Area_List::get_emergencyAreaID_Cancelled_List() {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Cancelled_List_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List::emergencyAreaID_Cancelled_List *Broadcast_Cancelled_Area_List::get_emergencyAreaID_Cancelled_List() const {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Cancelled_List_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List::set_emergencyAreaID_Cancelled_List(const emergencyAreaID_Cancelled_List & emergencyAreaID_Cancelled_List_val) {
    bit_mask |= 0x20000000;
    emergencyAreaID_Cancelled_List_field = emergencyAreaID_Cancelled_List_val;
}

int Broadcast_Cancelled_Area_List::emergencyAreaID_Cancelled_List_is_present() const {
    return !!(bit_mask & 0x20000000);
}

void Broadcast_Cancelled_Area_List::omit_emergencyAreaID_Cancelled_List() {
    emergencyAreaID_Cancelled_List_field.~__shared20();
    bit_mask &= ~0x20000000;
}

Broadcast_Cancelled_Area_List::iE_Extensions *Broadcast_Cancelled_Area_List::get_iE_Extensions() {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List::iE_Extensions *Broadcast_Cancelled_Area_List::get_iE_Extensions() const {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x10000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Broadcast_Cancelled_Area_List::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x10000000);
}

void Broadcast_Cancelled_Area_List::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x10000000;
}

/* Auxiliary data structures and functions for class Broadcast_Empty_Area_List */

class Broadcast_Empty_Area_List_member {
public:
    Broadcast_Empty_Area_List_member *next;
    Broadcast_Empty_Area_List::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    Broadcast_Empty_Area_List_member();
    Broadcast_Empty_Area_List_member(const Broadcast_Empty_Area_List::component & val);
};

void *Broadcast_Empty_Area_List_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void Broadcast_Empty_Area_List_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

Broadcast_Empty_Area_List_member::Broadcast_Empty_Area_List_member() {
}

Broadcast_Empty_Area_List_member::Broadcast_Empty_Area_List_member(const Broadcast_Empty_Area_List::component & val) {
    value = val;
}

static void *Broadcast_Empty_Area_List_copy(void *that) {
    return new Broadcast_Empty_Area_List_member(((Broadcast_Empty_Area_List_member *)that)->value);
}

static void Broadcast_Empty_Area_List_destroy(void *that) {
    delete (Broadcast_Empty_Area_List_member *)that;
}

static int Broadcast_Empty_Area_List_compare(void *val1, void *val2) {
    return (((Broadcast_Empty_Area_List_member *)val1)->value == ((Broadcast_Empty_Area_List_member *)val2)->value);
}

/* Constructors */

Broadcast_Empty_Area_List::Broadcast_Empty_Area_List() {
}

Broadcast_Empty_Area_List::Broadcast_Empty_Area_List(const Broadcast_Empty_Area_List & that) {
    OSSTRY {
	do_copy(that, &Broadcast_Empty_Area_List_copy);
    } OSSCLEAN(Broadcast_Empty_Area_List)
}

/* Destructor */

Broadcast_Empty_Area_List::~Broadcast_Empty_Area_List() {
    do_destroy(&Broadcast_Empty_Area_List_destroy);
}

/* Operators: assignment, equality, inequality */

Broadcast_Empty_Area_List & Broadcast_Empty_Area_List::operator = (const Broadcast_Empty_Area_List & that) {
    do_destroy(&Broadcast_Empty_Area_List_destroy);
    do_copy(that, &Broadcast_Empty_Area_List_copy);
    return *this;
}

int Broadcast_Empty_Area_List::operator == (const Broadcast_Empty_Area_List & that) const {
    return do_compare(that, &Broadcast_Empty_Area_List_compare);
}

int Broadcast_Empty_Area_List::operator != (const Broadcast_Empty_Area_List & that) const {
    return !do_compare(that, &Broadcast_Empty_Area_List_compare);
}

/* Locate ("At" etc) methods */

Broadcast_Empty_Area_List::component *Broadcast_Empty_Area_List::at(OssIndex pos) {
    return &((Broadcast_Empty_Area_List_member *)pos)->value;
}

const Broadcast_Empty_Area_List::component *Broadcast_Empty_Area_List::at(OssIndex pos) const {
    return &((Broadcast_Empty_Area_List_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex Broadcast_Empty_Area_List::prepend(const component & val) {
    Broadcast_Empty_Area_List_member *newrec = new Broadcast_Empty_Area_List_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex Broadcast_Empty_Area_List::prepend(Broadcast_Empty_Area_List *seq) {
    return do_prepend(seq);
}

OssIndex Broadcast_Empty_Area_List::insert_after(OssIndex pos, const component & val) {
    Broadcast_Empty_Area_List_member *newrec = new Broadcast_Empty_Area_List_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex Broadcast_Empty_Area_List::insert_after(OssIndex pos, Broadcast_Empty_Area_List *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int Broadcast_Empty_Area_List::remove_front() {
    Broadcast_Empty_Area_List_member *extr = (Broadcast_Empty_Area_List_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    Broadcast_Empty_Area_List_destroy(extr);
    return 0;
}

int Broadcast_Empty_Area_List::remove_after(OssIndex pos) {
    Broadcast_Empty_Area_List_member *extr = (Broadcast_Empty_Area_List_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    Broadcast_Empty_Area_List_destroy(extr);
    return 0;
}

/* Extract methods */

Broadcast_Empty_Area_List *Broadcast_Empty_Area_List::extract_after(OssIndex begin, OssIndex end) {
    return (Broadcast_Empty_Area_List *)do_extract_after(begin, end);
}

Stop_Warning_Indication_IEs_Value::Stop_Warning_Indication_IEs_Value()
{
}

Stop_Warning_Indication_IEs_Value::Stop_Warning_Indication_IEs_Value(const Stop_Warning_Indication_IEs_Value & that)
{
    operator =(that);
}

Stop_Warning_Indication_IEs_Value::~Stop_Warning_Indication_IEs_Value()
{
    cleanup_decoded();
}

Stop_Warning_Indication_IEs_Value & Stop_Warning_Indication_IEs_Value::operator = (const Stop_Warning_Indication_IEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Stop_Warning_Indication_IEs_Value::operator == (const Stop_Warning_Indication_IEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Stop_Warning_Indication_IEs_Value::operator != (const Stop_Warning_Indication_IEs_Value & that) const
{
    return !(operator ==(that));
}

int Stop_Warning_Indication_IEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Stop_Warning_Indication_IEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Stop_Warning_Indication_IEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Stop_Warning_Indication_IEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Stop_Warning_Indication_IEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Message_Identifier *Stop_Warning_Indication_IEs_Value::get_Message_Identifier()
{
    if (pdunum == 33)
	return (Message_Identifier *)decoded;
    else
	return NULL;
}

const Message_Identifier *Stop_Warning_Indication_IEs_Value::get_Message_Identifier() const
{
    if (pdunum == 33)
	return (const Message_Identifier *)decoded;
    else
	return NULL;
}

void Stop_Warning_Indication_IEs_Value::set_Message_Identifier(const Message_Identifier & data)
{
    void *copy;

    copy = new Message_Identifier(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 33;
	decoded = copy;
    }
}

Message_Identifier *Stop_Warning_Indication_IEs_Value::release_Message_Identifier()
{
    Message_Identifier * dvalue = pdunum == 33 ? (Message_Identifier *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Indication_IEs_Value::set_Message_Identifier(Message_Identifier *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 33;
    decoded = data;
}

Serial_Number *Stop_Warning_Indication_IEs_Value::get_Serial_Number()
{
    if (pdunum == 43)
	return (Serial_Number *)decoded;
    else
	return NULL;
}

const Serial_Number *Stop_Warning_Indication_IEs_Value::get_Serial_Number() const
{
    if (pdunum == 43)
	return (const Serial_Number *)decoded;
    else
	return NULL;
}

void Stop_Warning_Indication_IEs_Value::set_Serial_Number(const Serial_Number & data)
{
    void *copy;

    copy = new Serial_Number(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 43;
	decoded = copy;
    }
}

Serial_Number *Stop_Warning_Indication_IEs_Value::release_Serial_Number()
{
    Serial_Number * dvalue = pdunum == 43 ? (Serial_Number *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Indication_IEs_Value::set_Serial_Number(Serial_Number *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 43;
    decoded = data;
}

Broadcast_Cancelled_Area_List *Stop_Warning_Indication_IEs_Value::get_Broadcast_Cancelled_Area_List()
{
    if (pdunum == 13)
	return (Broadcast_Cancelled_Area_List *)decoded;
    else
	return NULL;
}

const Broadcast_Cancelled_Area_List *Stop_Warning_Indication_IEs_Value::get_Broadcast_Cancelled_Area_List() const
{
    if (pdunum == 13)
	return (const Broadcast_Cancelled_Area_List *)decoded;
    else
	return NULL;
}

void Stop_Warning_Indication_IEs_Value::set_Broadcast_Cancelled_Area_List(const Broadcast_Cancelled_Area_List & data)
{
    void *copy;

    copy = new Broadcast_Cancelled_Area_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 13;
	decoded = copy;
    }
}

Broadcast_Cancelled_Area_List *Stop_Warning_Indication_IEs_Value::release_Broadcast_Cancelled_Area_List()
{
    Broadcast_Cancelled_Area_List * dvalue = pdunum == 13 ? (Broadcast_Cancelled_Area_List *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Indication_IEs_Value::set_Broadcast_Cancelled_Area_List(Broadcast_Cancelled_Area_List *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 13;
    decoded = data;
}

Broadcast_Empty_Area_List *Stop_Warning_Indication_IEs_Value::get_Broadcast_Empty_Area_List()
{
    if (pdunum == 15)
	return (Broadcast_Empty_Area_List *)decoded;
    else
	return NULL;
}

const Broadcast_Empty_Area_List *Stop_Warning_Indication_IEs_Value::get_Broadcast_Empty_Area_List() const
{
    if (pdunum == 15)
	return (const Broadcast_Empty_Area_List *)decoded;
    else
	return NULL;
}

void Stop_Warning_Indication_IEs_Value::set_Broadcast_Empty_Area_List(const Broadcast_Empty_Area_List & data)
{
    void *copy;

    copy = new Broadcast_Empty_Area_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 15;
	decoded = copy;
    }
}

Broadcast_Empty_Area_List *Stop_Warning_Indication_IEs_Value::release_Broadcast_Empty_Area_List()
{
    Broadcast_Empty_Area_List * dvalue = pdunum == 15 ? (Broadcast_Empty_Area_List *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Indication_IEs_Value::set_Broadcast_Empty_Area_List(Broadcast_Empty_Area_List *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 15;
    decoded = data;
}

void Stop_Warning_Indication_IEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

/* Auxiliary data structures and functions for class __shared22 */

class __shared22_member {
public:
    __shared22_member *next;
    __shared22::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared22_member();
    __shared22_member(const __shared22::component & val);
};

void *__shared22_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared22_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared22_member::__shared22_member() {
}

__shared22_member::__shared22_member(const __shared22::component & val) {
    value = val;
}

static void *__shared22_copy(void *that) {
    return new __shared22_member(((__shared22_member *)that)->value);
}

static void __shared22_destroy(void *that) {
    delete (__shared22_member *)that;
}

static int __shared22_compare(void *val1, void *val2) {
    return (((__shared22_member *)val1)->value == ((__shared22_member *)val2)->value);
}

/* Constructors */

__shared22::__shared22() {
}

__shared22::__shared22(const __shared22 & that) {
    OSSTRY {
	do_copy(that, &__shared22_copy);
    } OSSCLEAN(__shared22)
}

/* Destructor */

__shared22::~__shared22() {
    do_destroy(&__shared22_destroy);
}

/* Operators: assignment, equality, inequality */

__shared22 & __shared22::operator = (const __shared22 & that) {
    do_destroy(&__shared22_destroy);
    do_copy(that, &__shared22_copy);
    return *this;
}

int __shared22::operator == (const __shared22 & that) const {
    return do_compare(that, &__shared22_compare);
}

int __shared22::operator != (const __shared22 & that) const {
    return !do_compare(that, &__shared22_compare);
}

/* Locate ("At" etc) methods */

__shared22::component *__shared22::at(OssIndex pos) {
    return &((__shared22_member *)pos)->value;
}

const __shared22::component *__shared22::at(OssIndex pos) const {
    return &((__shared22_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared22::prepend(const component & val) {
    __shared22_member *newrec = new __shared22_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared22::prepend(__shared22 *seq) {
    return do_prepend(seq);
}

OssIndex __shared22::insert_after(OssIndex pos, const component & val) {
    __shared22_member *newrec = new __shared22_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared22::insert_after(OssIndex pos, __shared22 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared22::remove_front() {
    __shared22_member *extr = (__shared22_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared22_destroy(extr);
    return 0;
}

int __shared22::remove_after(OssIndex pos) {
    __shared22_member *extr = (__shared22_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared22_destroy(extr);
    return 0;
}

/* Extract methods */

__shared22 *__shared22::extract_after(OssIndex begin, OssIndex end) {
    return (__shared22 *)do_extract_after(begin, end);
}

/* Auxiliary data structures and functions for class __shared23 */

class __shared23_member {
public:
    __shared23_member *next;
    __shared23::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    __shared23_member();
    __shared23_member(const __shared23::component & val);
};

void *__shared23_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared23_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared23_member::__shared23_member() {
}

__shared23_member::__shared23_member(const __shared23::component & val) {
    value = val;
}

static void *__shared23_copy(void *that) {
    return new __shared23_member(((__shared23_member *)that)->value);
}

static void __shared23_destroy(void *that) {
    delete (__shared23_member *)that;
}

static int __shared23_compare(void *val1, void *val2) {
    return (((__shared23_member *)val1)->value == ((__shared23_member *)val2)->value);
}

/* Constructors */

__shared23::__shared23() {
}

__shared23::__shared23(const __shared23 & that) {
    OSSTRY {
	do_copy(that, &__shared23_copy);
    } OSSCLEAN(__shared23)
}

/* Destructor */

__shared23::~__shared23() {
    do_destroy(&__shared23_destroy);
}

/* Operators: assignment, equality, inequality */

__shared23 & __shared23::operator = (const __shared23 & that) {
    do_destroy(&__shared23_destroy);
    do_copy(that, &__shared23_copy);
    return *this;
}

int __shared23::operator == (const __shared23 & that) const {
    return do_compare(that, &__shared23_compare);
}

int __shared23::operator != (const __shared23 & that) const {
    return !do_compare(that, &__shared23_compare);
}

/* Locate ("At" etc) methods */

__shared23::component *__shared23::at(OssIndex pos) {
    return &((__shared23_member *)pos)->value;
}

const __shared23::component *__shared23::at(OssIndex pos) const {
    return &((__shared23_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex __shared23::prepend(const component & val) {
    __shared23_member *newrec = new __shared23_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex __shared23::prepend(__shared23 *seq) {
    return do_prepend(seq);
}

OssIndex __shared23::insert_after(OssIndex pos, const component & val) {
    __shared23_member *newrec = new __shared23_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex __shared23::insert_after(OssIndex pos, __shared23 *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int __shared23::remove_front() {
    __shared23_member *extr = (__shared23_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared23_destroy(extr);
    return 0;
}

int __shared23::remove_after(OssIndex pos) {
    __shared23_member *extr = (__shared23_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    __shared23_destroy(extr);
    return 0;
}

/* Extract methods */

__shared23 *__shared23::extract_after(OssIndex begin, OssIndex end) {
    return (__shared23 *)do_extract_after(begin, end);
}

void *Broadcast_Cancelled_Area_List_5GS::operator new(size_t size) {
    return ossNewFunc(size);
}

void Broadcast_Cancelled_Area_List_5GS::operator delete(void *ptr) {
    asn1Free(ptr);
}

Broadcast_Cancelled_Area_List_5GS::Broadcast_Cancelled_Area_List_5GS() {
    memset(this, 0, sizeof(Broadcast_Cancelled_Area_List_5GS));
}

Broadcast_Cancelled_Area_List_5GS::Broadcast_Cancelled_Area_List_5GS(const Broadcast_Cancelled_Area_List_5GS & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	cellID_Cancelled_List_5GS_field = that.cellID_Cancelled_List_5GS_field;
	tAI_Cancelled_List_5GS_field = that.tAI_Cancelled_List_5GS_field;
	emergencyAreaID_Cancelled_List_field = that.emergencyAreaID_Cancelled_List_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(Broadcast_Cancelled_Area_List_5GS)
}

Broadcast_Cancelled_Area_List_5GS::Broadcast_Cancelled_Area_List_5GS(const cellID_Cancelled_List_5GS & cellID_Cancelled_List_5GS_val, 
    const tAI_Cancelled_List_5GS & tAI_Cancelled_List_5GS_val, const emergencyAreaID_Cancelled_List & emergencyAreaID_Cancelled_List_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0xf0000000;
	cellID_Cancelled_List_5GS_field = cellID_Cancelled_List_5GS_val;
	tAI_Cancelled_List_5GS_field = tAI_Cancelled_List_5GS_val;
	emergencyAreaID_Cancelled_List_field = emergencyAreaID_Cancelled_List_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(Broadcast_Cancelled_Area_List_5GS)
}

Broadcast_Cancelled_Area_List_5GS & Broadcast_Cancelled_Area_List_5GS::operator = (const Broadcast_Cancelled_Area_List_5GS & that) {
    if (this == &that)
	return *this;
    this->~Broadcast_Cancelled_Area_List_5GS();
    bit_mask = that.bit_mask;
    cellID_Cancelled_List_5GS_field = that.cellID_Cancelled_List_5GS_field;
    tAI_Cancelled_List_5GS_field = that.tAI_Cancelled_List_5GS_field;
    emergencyAreaID_Cancelled_List_field = that.emergencyAreaID_Cancelled_List_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int Broadcast_Cancelled_Area_List_5GS::operator == (const Broadcast_Cancelled_Area_List_5GS & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (bit_mask & 0x80000000) {
	if (cellID_Cancelled_List_5GS_field != that.cellID_Cancelled_List_5GS_field)
	    return 0;
    }
    if (bit_mask & 0x40000000) {
	if (tAI_Cancelled_List_5GS_field != that.tAI_Cancelled_List_5GS_field)
	    return 0;
    }
    if (bit_mask & 0x20000000) {
	if (emergencyAreaID_Cancelled_List_field != that.emergencyAreaID_Cancelled_List_field)
	    return 0;
    }
    if (bit_mask & 0x10000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int Broadcast_Cancelled_Area_List_5GS::operator != (const Broadcast_Cancelled_Area_List_5GS & that) const {
    return !(operator ==(that));
}

Broadcast_Cancelled_Area_List_5GS::cellID_Cancelled_List_5GS *Broadcast_Cancelled_Area_List_5GS::get_cellID_Cancelled_List_5GS() {
    if (bit_mask & 0x80000000)
	return &cellID_Cancelled_List_5GS_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List_5GS::cellID_Cancelled_List_5GS *Broadcast_Cancelled_Area_List_5GS::get_cellID_Cancelled_List_5GS() const {
    if (bit_mask & 0x80000000)
	return &cellID_Cancelled_List_5GS_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List_5GS::set_cellID_Cancelled_List_5GS(const cellID_Cancelled_List_5GS & cellID_Cancelled_List_5GS_val) {
    bit_mask |= 0x80000000;
    cellID_Cancelled_List_5GS_field = cellID_Cancelled_List_5GS_val;
}

int Broadcast_Cancelled_Area_List_5GS::cellID_Cancelled_List_5GS_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void Broadcast_Cancelled_Area_List_5GS::omit_cellID_Cancelled_List_5GS() {
    cellID_Cancelled_List_5GS_field.~__shared22();
    bit_mask &= ~0x80000000;
}

Broadcast_Cancelled_Area_List_5GS::tAI_Cancelled_List_5GS *Broadcast_Cancelled_Area_List_5GS::get_tAI_Cancelled_List_5GS() {
    if (bit_mask & 0x40000000)
	return &tAI_Cancelled_List_5GS_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List_5GS::tAI_Cancelled_List_5GS *Broadcast_Cancelled_Area_List_5GS::get_tAI_Cancelled_List_5GS() const {
    if (bit_mask & 0x40000000)
	return &tAI_Cancelled_List_5GS_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List_5GS::set_tAI_Cancelled_List_5GS(const tAI_Cancelled_List_5GS & tAI_Cancelled_List_5GS_val) {
    bit_mask |= 0x40000000;
    tAI_Cancelled_List_5GS_field = tAI_Cancelled_List_5GS_val;
}

int Broadcast_Cancelled_Area_List_5GS::tAI_Cancelled_List_5GS_is_present() const {
    return !!(bit_mask & 0x40000000);
}

void Broadcast_Cancelled_Area_List_5GS::omit_tAI_Cancelled_List_5GS() {
    tAI_Cancelled_List_5GS_field.~__shared23();
    bit_mask &= ~0x40000000;
}

Broadcast_Cancelled_Area_List_5GS::emergencyAreaID_Cancelled_List *Broadcast_Cancelled_Area_List_5GS::get_emergencyAreaID_Cancelled_List() {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Cancelled_List_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List_5GS::emergencyAreaID_Cancelled_List *Broadcast_Cancelled_Area_List_5GS::get_emergencyAreaID_Cancelled_List() const {
    if (bit_mask & 0x20000000)
	return &emergencyAreaID_Cancelled_List_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List_5GS::set_emergencyAreaID_Cancelled_List(const emergencyAreaID_Cancelled_List & emergencyAreaID_Cancelled_List_val) {
    bit_mask |= 0x20000000;
    emergencyAreaID_Cancelled_List_field = emergencyAreaID_Cancelled_List_val;
}

int Broadcast_Cancelled_Area_List_5GS::emergencyAreaID_Cancelled_List_is_present() const {
    return !!(bit_mask & 0x20000000);
}

void Broadcast_Cancelled_Area_List_5GS::omit_emergencyAreaID_Cancelled_List() {
    emergencyAreaID_Cancelled_List_field.~__shared20();
    bit_mask &= ~0x20000000;
}

Broadcast_Cancelled_Area_List_5GS::iE_Extensions *Broadcast_Cancelled_Area_List_5GS::get_iE_Extensions() {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const Broadcast_Cancelled_Area_List_5GS::iE_Extensions *Broadcast_Cancelled_Area_List_5GS::get_iE_Extensions() const {
    if (bit_mask & 0x10000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void Broadcast_Cancelled_Area_List_5GS::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x10000000;
    iE_Extensions_field = iE_Extensions_val;
}

int Broadcast_Cancelled_Area_List_5GS::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x10000000);
}

void Broadcast_Cancelled_Area_List_5GS::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x10000000;
}

/* Auxiliary data structures and functions for class Broadcast_Empty_Area_List_5GS */

class Broadcast_Empty_Area_List_5GS_member {
public:
    Broadcast_Empty_Area_List_5GS_member *next;
    Broadcast_Empty_Area_List_5GS::component value;
    void * operator new(size_t size);
    void operator delete(void *ptr);
    Broadcast_Empty_Area_List_5GS_member();
    Broadcast_Empty_Area_List_5GS_member(const Broadcast_Empty_Area_List_5GS::component & val);
};

void *Broadcast_Empty_Area_List_5GS_member::operator new(size_t size) {
    return ossNewFunc(size);
}

void Broadcast_Empty_Area_List_5GS_member::operator delete(void *ptr) {
    asn1Free(ptr);
}

Broadcast_Empty_Area_List_5GS_member::Broadcast_Empty_Area_List_5GS_member() {
}

Broadcast_Empty_Area_List_5GS_member::Broadcast_Empty_Area_List_5GS_member(const Broadcast_Empty_Area_List_5GS::component & val) {
    value = val;
}

static void *Broadcast_Empty_Area_List_5GS_copy(void *that) {
    return new Broadcast_Empty_Area_List_5GS_member(((Broadcast_Empty_Area_List_5GS_member *)that)->value);
}

static void Broadcast_Empty_Area_List_5GS_destroy(void *that) {
    delete (Broadcast_Empty_Area_List_5GS_member *)that;
}

static int Broadcast_Empty_Area_List_5GS_compare(void *val1, void *val2) {
    return (((Broadcast_Empty_Area_List_5GS_member *)val1)->value == ((Broadcast_Empty_Area_List_5GS_member *)val2)->value);
}

/* Constructors */

Broadcast_Empty_Area_List_5GS::Broadcast_Empty_Area_List_5GS() {
}

Broadcast_Empty_Area_List_5GS::Broadcast_Empty_Area_List_5GS(const Broadcast_Empty_Area_List_5GS & that) {
    OSSTRY {
	do_copy(that, &Broadcast_Empty_Area_List_5GS_copy);
    } OSSCLEAN(Broadcast_Empty_Area_List_5GS)
}

/* Destructor */

Broadcast_Empty_Area_List_5GS::~Broadcast_Empty_Area_List_5GS() {
    do_destroy(&Broadcast_Empty_Area_List_5GS_destroy);
}

/* Operators: assignment, equality, inequality */

Broadcast_Empty_Area_List_5GS & Broadcast_Empty_Area_List_5GS::operator = (const Broadcast_Empty_Area_List_5GS & that) {
    do_destroy(&Broadcast_Empty_Area_List_5GS_destroy);
    do_copy(that, &Broadcast_Empty_Area_List_5GS_copy);
    return *this;
}

int Broadcast_Empty_Area_List_5GS::operator == (const Broadcast_Empty_Area_List_5GS & that) const {
    return do_compare(that, &Broadcast_Empty_Area_List_5GS_compare);
}

int Broadcast_Empty_Area_List_5GS::operator != (const Broadcast_Empty_Area_List_5GS & that) const {
    return !do_compare(that, &Broadcast_Empty_Area_List_5GS_compare);
}

/* Locate ("At" etc) methods */

Broadcast_Empty_Area_List_5GS::component *Broadcast_Empty_Area_List_5GS::at(OssIndex pos) {
    return &((Broadcast_Empty_Area_List_5GS_member *)pos)->value;
}

const Broadcast_Empty_Area_List_5GS::component *Broadcast_Empty_Area_List_5GS::at(OssIndex pos) const {
    return &((Broadcast_Empty_Area_List_5GS_member *)pos)->value;
}

/* Add ("Insert", "Prepend", "Append" etc) methods */

OssIndex Broadcast_Empty_Area_List_5GS::prepend(const component & val) {
    Broadcast_Empty_Area_List_5GS_member *newrec = new Broadcast_Empty_Area_List_5GS_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_prepend(newrec);
}

OssIndex Broadcast_Empty_Area_List_5GS::prepend(Broadcast_Empty_Area_List_5GS *seq) {
    return do_prepend(seq);
}

OssIndex Broadcast_Empty_Area_List_5GS::insert_after(OssIndex pos, const component & val) {
    Broadcast_Empty_Area_List_5GS_member *newrec = new Broadcast_Empty_Area_List_5GS_member(val);
    if (!newrec)
	return OSS_NOINDEX;
    return do_insert_after(pos, newrec);
}

OssIndex Broadcast_Empty_Area_List_5GS::insert_after(OssIndex pos, Broadcast_Empty_Area_List_5GS *seq) {
    return do_insert_after(pos, seq);
}

/* Remove methods */

int Broadcast_Empty_Area_List_5GS::remove_front() {
    Broadcast_Empty_Area_List_5GS_member *extr = (Broadcast_Empty_Area_List_5GS_member *)do_extract_front();
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    Broadcast_Empty_Area_List_5GS_destroy(extr);
    return 0;
}

int Broadcast_Empty_Area_List_5GS::remove_after(OssIndex pos) {
    Broadcast_Empty_Area_List_5GS_member *extr = (Broadcast_Empty_Area_List_5GS_member *)do_extract_after(pos);
    if (!extr)
	return oss_call_error(OSS_COMPONENT_MISSING);
    Broadcast_Empty_Area_List_5GS_destroy(extr);
    return 0;
}

/* Extract methods */

Broadcast_Empty_Area_List_5GS *Broadcast_Empty_Area_List_5GS::extract_after(OssIndex begin, OssIndex end) {
    return (Broadcast_Empty_Area_List_5GS *)do_extract_after(begin, end);
}

Stop_Warning_Indication_Extensions_Extension::Stop_Warning_Indication_Extensions_Extension()
{
}

Stop_Warning_Indication_Extensions_Extension::Stop_Warning_Indication_Extensions_Extension(const Stop_Warning_Indication_Extensions_Extension & that)
{
    operator =(that);
}

Stop_Warning_Indication_Extensions_Extension::~Stop_Warning_Indication_Extensions_Extension()
{
    cleanup_decoded();
}

Stop_Warning_Indication_Extensions_Extension & Stop_Warning_Indication_Extensions_Extension::operator = (const Stop_Warning_Indication_Extensions_Extension & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int Stop_Warning_Indication_Extensions_Extension::operator == (const Stop_Warning_Indication_Extensions_Extension & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int Stop_Warning_Indication_Extensions_Extension::operator != (const Stop_Warning_Indication_Extensions_Extension & that) const
{
    return !(operator ==(that));
}

int Stop_Warning_Indication_Extensions_Extension::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int Stop_Warning_Indication_Extensions_Extension::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int Stop_Warning_Indication_Extensions_Extension::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int Stop_Warning_Indication_Extensions_Extension::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int Stop_Warning_Indication_Extensions_Extension::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Broadcast_Cancelled_Area_List_5GS *Stop_Warning_Indication_Extensions_Extension::get_Broadcast_Cancelled_Area_List_5GS()
{
    if (pdunum == 14)
	return (Broadcast_Cancelled_Area_List_5GS *)decoded;
    else
	return NULL;
}

const Broadcast_Cancelled_Area_List_5GS *Stop_Warning_Indication_Extensions_Extension::get_Broadcast_Cancelled_Area_List_5GS() const
{
    if (pdunum == 14)
	return (const Broadcast_Cancelled_Area_List_5GS *)decoded;
    else
	return NULL;
}

void Stop_Warning_Indication_Extensions_Extension::set_Broadcast_Cancelled_Area_List_5GS(const Broadcast_Cancelled_Area_List_5GS & data)
{
    void *copy;

    copy = new Broadcast_Cancelled_Area_List_5GS(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 14;
	decoded = copy;
    }
}

Broadcast_Cancelled_Area_List_5GS *Stop_Warning_Indication_Extensions_Extension::release_Broadcast_Cancelled_Area_List_5GS()
{
    Broadcast_Cancelled_Area_List_5GS * dvalue = pdunum == 14 ? (Broadcast_Cancelled_Area_List_5GS *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Indication_Extensions_Extension::set_Broadcast_Cancelled_Area_List_5GS(Broadcast_Cancelled_Area_List_5GS *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 14;
    decoded = data;
}

Broadcast_Empty_Area_List_5GS *Stop_Warning_Indication_Extensions_Extension::get_Broadcast_Empty_Area_List_5GS()
{
    if (pdunum == 16)
	return (Broadcast_Empty_Area_List_5GS *)decoded;
    else
	return NULL;
}

const Broadcast_Empty_Area_List_5GS *Stop_Warning_Indication_Extensions_Extension::get_Broadcast_Empty_Area_List_5GS() const
{
    if (pdunum == 16)
	return (const Broadcast_Empty_Area_List_5GS *)decoded;
    else
	return NULL;
}

void Stop_Warning_Indication_Extensions_Extension::set_Broadcast_Empty_Area_List_5GS(const Broadcast_Empty_Area_List_5GS & data)
{
    void *copy;

    copy = new Broadcast_Empty_Area_List_5GS(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 16;
	decoded = copy;
    }
}

Broadcast_Empty_Area_List_5GS *Stop_Warning_Indication_Extensions_Extension::release_Broadcast_Empty_Area_List_5GS()
{
    Broadcast_Empty_Area_List_5GS * dvalue = pdunum == 16 ? (Broadcast_Empty_Area_List_5GS *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void Stop_Warning_Indication_Extensions_Extension::set_Broadcast_Empty_Area_List_5GS(Broadcast_Empty_Area_List_5GS *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 16;
    decoded = data;
}

void Stop_Warning_Indication_Extensions_Extension::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__seq11::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq11::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq11::__seq11() {
    memset(this, 0, sizeof(__seq11));
}

__seq11::__seq11(const __seq11 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__seq11)
}

__seq11::__seq11(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__seq11)
}

__seq11 & __seq11::operator = (const __seq11 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __seq11::operator == (const __seq11 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __seq11::operator != (const __seq11 & that) const {
    return !(operator ==(that));
}

__seq11::id & __seq11::get_id() {
    return id_field;
}

__seq11::id __seq11::get_id() const {
    return id_field;
}

void __seq11::set_id(id id_val) {
    id_field = id_val;
}

__seq11::criticality & __seq11::get_criticality() {
    return criticality_field;
}

__seq11::criticality __seq11::get_criticality() const {
    return criticality_field;
}

void __seq11::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq11::value & __seq11::get_value() {
    return value_field;
}

const __seq11::value & __seq11::get_value() const {
    return value_field;
}

void __seq11::set_value(const value & value_val) {
    value_field = value_val;
}

void *__seq12::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq12::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq12::__seq12() {
    memset(this, 0, sizeof(__seq12));
}

__seq12::__seq12(const __seq12 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__seq12)
}

__seq12::__seq12(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__seq12)
}

__seq12 & __seq12::operator = (const __seq12 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __seq12::operator == (const __seq12 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __seq12::operator != (const __seq12 & that) const {
    return !(operator ==(that));
}

__seq12::id & __seq12::get_id() {
    return id_field;
}

__seq12::id __seq12::get_id() const {
    return id_field;
}

void __seq12::set_id(id id_val) {
    id_field = id_val;
}

__seq12::criticality & __seq12::get_criticality() {
    return criticality_field;
}

__seq12::criticality __seq12::get_criticality() const {
    return criticality_field;
}

void __seq12::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq12::extensionValue & __seq12::get_extensionValue() {
    return extensionValue_field;
}

const __seq12::extensionValue & __seq12::get_extensionValue() const {
    return extensionValue_field;
}

void __seq12::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

PWS_Restart_Indication_IEs_Value::PWS_Restart_Indication_IEs_Value()
{
}

PWS_Restart_Indication_IEs_Value::PWS_Restart_Indication_IEs_Value(const PWS_Restart_Indication_IEs_Value & that)
{
    operator =(that);
}

PWS_Restart_Indication_IEs_Value::~PWS_Restart_Indication_IEs_Value()
{
    cleanup_decoded();
}

PWS_Restart_Indication_IEs_Value & PWS_Restart_Indication_IEs_Value::operator = (const PWS_Restart_Indication_IEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int PWS_Restart_Indication_IEs_Value::operator == (const PWS_Restart_Indication_IEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int PWS_Restart_Indication_IEs_Value::operator != (const PWS_Restart_Indication_IEs_Value & that) const
{
    return !(operator ==(that));
}

int PWS_Restart_Indication_IEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int PWS_Restart_Indication_IEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int PWS_Restart_Indication_IEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int PWS_Restart_Indication_IEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int PWS_Restart_Indication_IEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared4 *PWS_Restart_Indication_IEs_Value::get_Restarted_Cell_List()
{
    if (pdunum == 38)
	return (__shared4 *)decoded;
    else
	return NULL;
}

const __shared4 *PWS_Restart_Indication_IEs_Value::get_Restarted_Cell_List() const
{
    if (pdunum == 38)
	return (const __shared4 *)decoded;
    else
	return NULL;
}

void PWS_Restart_Indication_IEs_Value::set_Restarted_Cell_List(const __shared4 & data)
{
    void *copy;

    copy = new Restarted_Cell_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 38;
	decoded = copy;
    }
}

__shared4 *PWS_Restart_Indication_IEs_Value::release_Restarted_Cell_List()
{
    __shared4 * dvalue = pdunum == 38 ? (__shared4 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Restart_Indication_IEs_Value::set_Restarted_Cell_List(__shared4 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 38;
    decoded = data;
}

Global_ENB_ID *PWS_Restart_Indication_IEs_Value::get_Global_ENB_ID()
{
    if (pdunum == 24)
	return (Global_ENB_ID *)decoded;
    else
	return NULL;
}

const Global_ENB_ID *PWS_Restart_Indication_IEs_Value::get_Global_ENB_ID() const
{
    if (pdunum == 24)
	return (const Global_ENB_ID *)decoded;
    else
	return NULL;
}

void PWS_Restart_Indication_IEs_Value::set_Global_ENB_ID(const Global_ENB_ID & data)
{
    void *copy;

    copy = new Global_ENB_ID(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 24;
	decoded = copy;
    }
}

Global_ENB_ID *PWS_Restart_Indication_IEs_Value::release_Global_ENB_ID()
{
    Global_ENB_ID * dvalue = pdunum == 24 ? (Global_ENB_ID *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Restart_Indication_IEs_Value::set_Global_ENB_ID(Global_ENB_ID *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 24;
    decoded = data;
}

__shared3 *PWS_Restart_Indication_IEs_Value::get_List_of_TAIs_Restart()
{
    if (pdunum == 28)
	return (__shared3 *)decoded;
    else
	return NULL;
}

const __shared3 *PWS_Restart_Indication_IEs_Value::get_List_of_TAIs_Restart() const
{
    if (pdunum == 28)
	return (const __shared3 *)decoded;
    else
	return NULL;
}

void PWS_Restart_Indication_IEs_Value::set_List_of_TAIs_Restart(const __shared3 & data)
{
    void *copy;

    copy = new List_of_TAIs_Restart(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 28;
	decoded = copy;
    }
}

__shared3 *PWS_Restart_Indication_IEs_Value::release_List_of_TAIs_Restart()
{
    __shared3 * dvalue = pdunum == 28 ? (__shared3 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Restart_Indication_IEs_Value::set_List_of_TAIs_Restart(__shared3 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 28;
    decoded = data;
}

__shared6 *PWS_Restart_Indication_IEs_Value::get_List_of_EAIs_Restart()
{
    if (pdunum == 29)
	return (__shared6 *)decoded;
    else
	return NULL;
}

const __shared6 *PWS_Restart_Indication_IEs_Value::get_List_of_EAIs_Restart() const
{
    if (pdunum == 29)
	return (const __shared6 *)decoded;
    else
	return NULL;
}

void PWS_Restart_Indication_IEs_Value::set_List_of_EAIs_Restart(const __shared6 & data)
{
    void *copy;

    copy = new List_of_EAIs_Restart(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 29;
	decoded = copy;
    }
}

__shared6 *PWS_Restart_Indication_IEs_Value::release_List_of_EAIs_Restart()
{
    __shared6 * dvalue = pdunum == 29 ? (__shared6 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Restart_Indication_IEs_Value::set_List_of_EAIs_Restart(__shared6 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 29;
    decoded = data;
}

void PWS_Restart_Indication_IEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

PWS_Restart_Indication_Extensions_Extension::PWS_Restart_Indication_Extensions_Extension()
{
}

PWS_Restart_Indication_Extensions_Extension::PWS_Restart_Indication_Extensions_Extension(const PWS_Restart_Indication_Extensions_Extension & that)
{
    operator =(that);
}

PWS_Restart_Indication_Extensions_Extension::~PWS_Restart_Indication_Extensions_Extension()
{
    cleanup_decoded();
}

PWS_Restart_Indication_Extensions_Extension & PWS_Restart_Indication_Extensions_Extension::operator = (const PWS_Restart_Indication_Extensions_Extension & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int PWS_Restart_Indication_Extensions_Extension::operator == (const PWS_Restart_Indication_Extensions_Extension & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int PWS_Restart_Indication_Extensions_Extension::operator != (const PWS_Restart_Indication_Extensions_Extension & that) const
{
    return !(operator ==(that));
}

int PWS_Restart_Indication_Extensions_Extension::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int PWS_Restart_Indication_Extensions_Extension::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int PWS_Restart_Indication_Extensions_Extension::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int PWS_Restart_Indication_Extensions_Extension::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int PWS_Restart_Indication_Extensions_Extension::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared8 *PWS_Restart_Indication_Extensions_Extension::get_Restarted_Cell_List_NR()
{
    if (pdunum == 40)
	return (__shared8 *)decoded;
    else
	return NULL;
}

const __shared8 *PWS_Restart_Indication_Extensions_Extension::get_Restarted_Cell_List_NR() const
{
    if (pdunum == 40)
	return (const __shared8 *)decoded;
    else
	return NULL;
}

void PWS_Restart_Indication_Extensions_Extension::set_Restarted_Cell_List_NR(const __shared8 & data)
{
    void *copy;

    copy = new Restarted_Cell_List_NR(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 40;
	decoded = copy;
    }
}

__shared8 *PWS_Restart_Indication_Extensions_Extension::release_Restarted_Cell_List_NR()
{
    __shared8 * dvalue = pdunum == 40 ? (__shared8 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Restart_Indication_Extensions_Extension::set_Restarted_Cell_List_NR(__shared8 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 40;
    decoded = data;
}

__shared7 *PWS_Restart_Indication_Extensions_Extension::get_List_of_5GS_TAI_for_Restart()
{
    if (pdunum == 32)
	return (__shared7 *)decoded;
    else
	return NULL;
}

const __shared7 *PWS_Restart_Indication_Extensions_Extension::get_List_of_5GS_TAI_for_Restart() const
{
    if (pdunum == 32)
	return (const __shared7 *)decoded;
    else
	return NULL;
}

void PWS_Restart_Indication_Extensions_Extension::set_List_of_5GS_TAI_for_Restart(const __shared7 & data)
{
    void *copy;

    copy = new List_of_5GS_TAI_for_Restart(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 32;
	decoded = copy;
    }
}

__shared7 *PWS_Restart_Indication_Extensions_Extension::release_List_of_5GS_TAI_for_Restart()
{
    __shared7 * dvalue = pdunum == 32 ? (__shared7 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Restart_Indication_Extensions_Extension::set_List_of_5GS_TAI_for_Restart(__shared7 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 32;
    decoded = data;
}

Global_GNB_ID *PWS_Restart_Indication_Extensions_Extension::get_Global_GNB_ID()
{
    if (pdunum == 26)
	return (Global_GNB_ID *)decoded;
    else
	return NULL;
}

const Global_GNB_ID *PWS_Restart_Indication_Extensions_Extension::get_Global_GNB_ID() const
{
    if (pdunum == 26)
	return (const Global_GNB_ID *)decoded;
    else
	return NULL;
}

void PWS_Restart_Indication_Extensions_Extension::set_Global_GNB_ID(const Global_GNB_ID & data)
{
    void *copy;

    copy = new Global_GNB_ID(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 26;
	decoded = copy;
    }
}

Global_GNB_ID *PWS_Restart_Indication_Extensions_Extension::release_Global_GNB_ID()
{
    Global_GNB_ID * dvalue = pdunum == 26 ? (Global_GNB_ID *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Restart_Indication_Extensions_Extension::set_Global_GNB_ID(Global_GNB_ID *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 26;
    decoded = data;
}

void PWS_Restart_Indication_Extensions_Extension::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__seq13::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq13::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq13::__seq13() {
    memset(this, 0, sizeof(__seq13));
}

__seq13::__seq13(const __seq13 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__seq13)
}

__seq13::__seq13(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__seq13)
}

__seq13 & __seq13::operator = (const __seq13 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __seq13::operator == (const __seq13 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __seq13::operator != (const __seq13 & that) const {
    return !(operator ==(that));
}

__seq13::id & __seq13::get_id() {
    return id_field;
}

__seq13::id __seq13::get_id() const {
    return id_field;
}

void __seq13::set_id(id id_val) {
    id_field = id_val;
}

__seq13::criticality & __seq13::get_criticality() {
    return criticality_field;
}

__seq13::criticality __seq13::get_criticality() const {
    return criticality_field;
}

void __seq13::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq13::value & __seq13::get_value() {
    return value_field;
}

const __seq13::value & __seq13::get_value() const {
    return value_field;
}

void __seq13::set_value(const value & value_val) {
    value_field = value_val;
}

void *__seq14::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq14::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq14::__seq14() {
    memset(this, 0, sizeof(__seq14));
}

__seq14::__seq14(const __seq14 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__seq14)
}

__seq14::__seq14(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__seq14)
}

__seq14 & __seq14::operator = (const __seq14 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __seq14::operator == (const __seq14 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __seq14::operator != (const __seq14 & that) const {
    return !(operator ==(that));
}

__seq14::id & __seq14::get_id() {
    return id_field;
}

__seq14::id __seq14::get_id() const {
    return id_field;
}

void __seq14::set_id(id id_val) {
    id_field = id_val;
}

__seq14::criticality & __seq14::get_criticality() {
    return criticality_field;
}

__seq14::criticality __seq14::get_criticality() const {
    return criticality_field;
}

void __seq14::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq14::extensionValue & __seq14::get_extensionValue() {
    return extensionValue_field;
}

const __seq14::extensionValue & __seq14::get_extensionValue() const {
    return extensionValue_field;
}

void __seq14::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

PWS_Failure_Indication_IEs_Value::PWS_Failure_Indication_IEs_Value()
{
}

PWS_Failure_Indication_IEs_Value::PWS_Failure_Indication_IEs_Value(const PWS_Failure_Indication_IEs_Value & that)
{
    operator =(that);
}

PWS_Failure_Indication_IEs_Value::~PWS_Failure_Indication_IEs_Value()
{
    cleanup_decoded();
}

PWS_Failure_Indication_IEs_Value & PWS_Failure_Indication_IEs_Value::operator = (const PWS_Failure_Indication_IEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int PWS_Failure_Indication_IEs_Value::operator == (const PWS_Failure_Indication_IEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int PWS_Failure_Indication_IEs_Value::operator != (const PWS_Failure_Indication_IEs_Value & that) const
{
    return !(operator ==(that));
}

int PWS_Failure_Indication_IEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int PWS_Failure_Indication_IEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int PWS_Failure_Indication_IEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int PWS_Failure_Indication_IEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int PWS_Failure_Indication_IEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared4 *PWS_Failure_Indication_IEs_Value::get_Failed_Cell_List()
{
    if (pdunum == 22)
	return (__shared4 *)decoded;
    else
	return NULL;
}

const __shared4 *PWS_Failure_Indication_IEs_Value::get_Failed_Cell_List() const
{
    if (pdunum == 22)
	return (const __shared4 *)decoded;
    else
	return NULL;
}

void PWS_Failure_Indication_IEs_Value::set_Failed_Cell_List(const __shared4 & data)
{
    void *copy;

    copy = new Failed_Cell_List(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 22;
	decoded = copy;
    }
}

__shared4 *PWS_Failure_Indication_IEs_Value::release_Failed_Cell_List()
{
    __shared4 * dvalue = pdunum == 22 ? (__shared4 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Failure_Indication_IEs_Value::set_Failed_Cell_List(__shared4 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 22;
    decoded = data;
}

Global_ENB_ID *PWS_Failure_Indication_IEs_Value::get_Global_ENB_ID()
{
    if (pdunum == 24)
	return (Global_ENB_ID *)decoded;
    else
	return NULL;
}

const Global_ENB_ID *PWS_Failure_Indication_IEs_Value::get_Global_ENB_ID() const
{
    if (pdunum == 24)
	return (const Global_ENB_ID *)decoded;
    else
	return NULL;
}

void PWS_Failure_Indication_IEs_Value::set_Global_ENB_ID(const Global_ENB_ID & data)
{
    void *copy;

    copy = new Global_ENB_ID(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 24;
	decoded = copy;
    }
}

Global_ENB_ID *PWS_Failure_Indication_IEs_Value::release_Global_ENB_ID()
{
    Global_ENB_ID * dvalue = pdunum == 24 ? (Global_ENB_ID *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Failure_Indication_IEs_Value::set_Global_ENB_ID(Global_ENB_ID *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 24;
    decoded = data;
}

void PWS_Failure_Indication_IEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

PWS_Failure_Indication_Extensions_Extension::PWS_Failure_Indication_Extensions_Extension()
{
}

PWS_Failure_Indication_Extensions_Extension::PWS_Failure_Indication_Extensions_Extension(const PWS_Failure_Indication_Extensions_Extension & that)
{
    operator =(that);
}

PWS_Failure_Indication_Extensions_Extension::~PWS_Failure_Indication_Extensions_Extension()
{
    cleanup_decoded();
}

PWS_Failure_Indication_Extensions_Extension & PWS_Failure_Indication_Extensions_Extension::operator = (const PWS_Failure_Indication_Extensions_Extension & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int PWS_Failure_Indication_Extensions_Extension::operator == (const PWS_Failure_Indication_Extensions_Extension & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int PWS_Failure_Indication_Extensions_Extension::operator != (const PWS_Failure_Indication_Extensions_Extension & that) const
{
    return !(operator ==(that));
}

int PWS_Failure_Indication_Extensions_Extension::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int PWS_Failure_Indication_Extensions_Extension::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int PWS_Failure_Indication_Extensions_Extension::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int PWS_Failure_Indication_Extensions_Extension::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int PWS_Failure_Indication_Extensions_Extension::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

__shared8 *PWS_Failure_Indication_Extensions_Extension::get_Failed_Cell_List_NR()
{
    if (pdunum == 23)
	return (__shared8 *)decoded;
    else
	return NULL;
}

const __shared8 *PWS_Failure_Indication_Extensions_Extension::get_Failed_Cell_List_NR() const
{
    if (pdunum == 23)
	return (const __shared8 *)decoded;
    else
	return NULL;
}

void PWS_Failure_Indication_Extensions_Extension::set_Failed_Cell_List_NR(const __shared8 & data)
{
    void *copy;

    copy = new Failed_Cell_List_NR(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 23;
	decoded = copy;
    }
}

__shared8 *PWS_Failure_Indication_Extensions_Extension::release_Failed_Cell_List_NR()
{
    __shared8 * dvalue = pdunum == 23 ? (__shared8 *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Failure_Indication_Extensions_Extension::set_Failed_Cell_List_NR(__shared8 *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 23;
    decoded = data;
}

Global_GNB_ID *PWS_Failure_Indication_Extensions_Extension::get_Global_GNB_ID()
{
    if (pdunum == 26)
	return (Global_GNB_ID *)decoded;
    else
	return NULL;
}

const Global_GNB_ID *PWS_Failure_Indication_Extensions_Extension::get_Global_GNB_ID() const
{
    if (pdunum == 26)
	return (const Global_GNB_ID *)decoded;
    else
	return NULL;
}

void PWS_Failure_Indication_Extensions_Extension::set_Global_GNB_ID(const Global_GNB_ID & data)
{
    void *copy;

    copy = new Global_GNB_ID(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 26;
	decoded = copy;
    }
}

Global_GNB_ID *PWS_Failure_Indication_Extensions_Extension::release_Global_GNB_ID()
{
    Global_GNB_ID * dvalue = pdunum == 26 ? (Global_GNB_ID *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void PWS_Failure_Indication_Extensions_Extension::set_Global_GNB_ID(Global_GNB_ID *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 26;
    decoded = data;
}

void PWS_Failure_Indication_Extensions_Extension::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__seq15::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq15::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq15::__seq15() {
    memset(this, 0, sizeof(__seq15));
}

__seq15::__seq15(const __seq15 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__seq15)
}

__seq15::__seq15(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__seq15)
}

__seq15 & __seq15::operator = (const __seq15 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __seq15::operator == (const __seq15 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __seq15::operator != (const __seq15 & that) const {
    return !(operator ==(that));
}

__seq15::id & __seq15::get_id() {
    return id_field;
}

__seq15::id __seq15::get_id() const {
    return id_field;
}

void __seq15::set_id(id id_val) {
    id_field = id_val;
}

__seq15::criticality & __seq15::get_criticality() {
    return criticality_field;
}

__seq15::criticality __seq15::get_criticality() const {
    return criticality_field;
}

void __seq15::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq15::value & __seq15::get_value() {
    return value_field;
}

const __seq15::value & __seq15::get_value() const {
    return value_field;
}

void __seq15::set_value(const value & value_val) {
    value_field = value_val;
}

void *__seq16::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq16::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq16::__seq16() {
    memset(this, 0, sizeof(__seq16));
}

__seq16::__seq16(const __seq16 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__seq16)
}

__seq16::__seq16(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__seq16)
}

__seq16 & __seq16::operator = (const __seq16 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __seq16::operator == (const __seq16 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __seq16::operator != (const __seq16 & that) const {
    return !(operator ==(that));
}

__seq16::id & __seq16::get_id() {
    return id_field;
}

__seq16::id __seq16::get_id() const {
    return id_field;
}

void __seq16::set_id(id id_val) {
    id_field = id_val;
}

__seq16::criticality & __seq16::get_criticality() {
    return criticality_field;
}

__seq16::criticality __seq16::get_criticality() const {
    return criticality_field;
}

void __seq16::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq16::extensionValue & __seq16::get_extensionValue() {
    return extensionValue_field;
}

const __seq16::extensionValue & __seq16::get_extensionValue() const {
    return extensionValue_field;
}

void __seq16::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

ErrorIndicationIEs_Value::ErrorIndicationIEs_Value()
{
}

ErrorIndicationIEs_Value::ErrorIndicationIEs_Value(const ErrorIndicationIEs_Value & that)
{
    operator =(that);
}

ErrorIndicationIEs_Value::~ErrorIndicationIEs_Value()
{
    cleanup_decoded();
}

ErrorIndicationIEs_Value & ErrorIndicationIEs_Value::operator = (const ErrorIndicationIEs_Value & that)
{
    int result;
    void *copy = NULL;
    unsigned char *enccopy;

    if (this == &that)
	return *this;

    if (that.pdunum) {
	result = sbcap_Table.copy((void *)that.decoded, &copy, (OssTypeIndex)that.pdunum);
	if (result)
	    return *this;
    }
    OSSTRY {
	result = copy_encoded(that.encoded.buffer, that.encoded.size, &enccopy);
    } OSSCLEANUP ( if (copy) asn1Free(copy); )
    if (result) {
	if (copy)
	    asn1Free(copy);
	return *this;
    }
    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = that.pdunum;
    encoded.buffer = enccopy;
    encoded.size = that.encoded.size;
    return *this;
}

int ErrorIndicationIEs_Value::operator == (const ErrorIndicationIEs_Value & that) const
{
    if (equal_helper(that)) {
	if (!pdunum)
	    return 1;
	else
	    return sbcap_Table.equal((void *)decoded, (void *)that.decoded, (OssTypeIndex)pdunum);
    } else
	return 0;
}

int ErrorIndicationIEs_Value::operator != (const ErrorIndicationIEs_Value & that) const
{
    return !(operator ==(that));
}

int ErrorIndicationIEs_Value::set_decoded(PDU & pdu)
{
    int result;
    OssTypeIndex index;
    void *copy;

    index = pdu.get_index();
    if (!index)
	return 0;

    result = sbcap_Table.copy(pdu.get_raw_data(), &copy, (OssTypeIndex)index);
    if (result)
	return result;

    cleanup_encoded();
    cleanup_decoded();
    decoded = copy;
    pdunum = index;
    return 0;
}

int ErrorIndicationIEs_Value::grab_decoded(PDU & pdu)
{
    OssTypeIndex index;

    index = pdu.get_index();
    if (!index)
	return 0;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (pdu.is_constant())
	return oss_call_error_cond(OSS_UNSUPPORTED_OPERATION);
#endif

    cleanup_encoded();
    cleanup_decoded();
    pdunum = index;
    decoded = pdu.get_raw_data();
    pdu.release_data();
    return 0;
}

int ErrorIndicationIEs_Value::set_encoded(const EncodedBuffer & data)
{
    long newsize = (long)data.get_data_size();
    unsigned char *copy;
    int result;

    result = copy_encoded((unsigned char *)data.get_data(), newsize, &copy);
    if (result)
	return result;
    cleanup_encoded();
    cleanup_decoded();
    encoded.buffer = copy;
    encoded.size = newsize;
    return 0;
}

int ErrorIndicationIEs_Value::grab_encoded(EncodedBuffer & data)
{
    cleanup_encoded();
    cleanup_decoded();
    encoded.size = (long)data.get_data_size();
    encoded.buffer = (unsigned char *)data.release_data();
    return 0;
}

int ErrorIndicationIEs_Value::encode(OssControl & control)
{
    int result = encode_helper(control);

    if (result)
	return result;
    cleanup_decoded();
    return 0;
}

Cause *ErrorIndicationIEs_Value::get_Cause()
{
    if (pdunum == 17)
	return (Cause *)decoded;
    else
	return NULL;
}

const Cause *ErrorIndicationIEs_Value::get_Cause() const
{
    if (pdunum == 17)
	return (const Cause *)decoded;
    else
	return NULL;
}

void ErrorIndicationIEs_Value::set_Cause(const Cause & data)
{
    void *copy;

    copy = osscppMalloc(sizeof(Cause));
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	*(Cause *)copy = data;
	pdunum = 17;
	decoded = copy;
    }
}

Cause *ErrorIndicationIEs_Value::release_Cause()
{
    Cause * dvalue = pdunum == 17 ? (Cause *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void ErrorIndicationIEs_Value::set_Cause(Cause *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 17;
    decoded = data;
}

Criticality_Diagnostics *ErrorIndicationIEs_Value::get_Criticality_Diagnostics()
{
    if (pdunum == 19)
	return (Criticality_Diagnostics *)decoded;
    else
	return NULL;
}

const Criticality_Diagnostics *ErrorIndicationIEs_Value::get_Criticality_Diagnostics() const
{
    if (pdunum == 19)
	return (const Criticality_Diagnostics *)decoded;
    else
	return NULL;
}

void ErrorIndicationIEs_Value::set_Criticality_Diagnostics(const Criticality_Diagnostics & data)
{
    void *copy;

    copy = new Criticality_Diagnostics(data);
    if (copy) {
	cleanup_encoded();
	cleanup_decoded();
	pdunum = 19;
	decoded = copy;
    }
}

Criticality_Diagnostics *ErrorIndicationIEs_Value::release_Criticality_Diagnostics()
{
    Criticality_Diagnostics * dvalue = pdunum == 19 ? (Criticality_Diagnostics *)decoded : NULL;
    pdunum = 0;
    decoded = NULL;
    return dvalue;
}

void ErrorIndicationIEs_Value::set_Criticality_Diagnostics(Criticality_Diagnostics *data)
{
    cleanup_encoded();
    cleanup_decoded();
    pdunum = 19;
    decoded = data;
}

void ErrorIndicationIEs_Value::cleanup_decoded()
{
    if (pdunum && decoded) {
	sbcap_Table.destroy(decoded, (OssTypeIndex)pdunum);
	decoded = NULL;
	pdunum = 0;
    }
}

void *__seq17::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq17::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq17::__seq17() {
    memset(this, 0, sizeof(__seq17));
}

__seq17::__seq17(const __seq17 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	value_field = that.value_field;
    } OSSCLEAN(__seq17)
}

__seq17::__seq17(id id_val, criticality criticality_val, const value & value_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	value_field = value_val;
    } OSSCLEAN(__seq17)
}

__seq17 & __seq17::operator = (const __seq17 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    value_field = that.value_field;
    return *this;
}

int __seq17::operator == (const __seq17 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (value_field != that.value_field)
	return 0;
    return 1;
}

int __seq17::operator != (const __seq17 & that) const {
    return !(operator ==(that));
}

__seq17::id & __seq17::get_id() {
    return id_field;
}

__seq17::id __seq17::get_id() const {
    return id_field;
}

void __seq17::set_id(id id_val) {
    id_field = id_val;
}

__seq17::criticality & __seq17::get_criticality() {
    return criticality_field;
}

__seq17::criticality __seq17::get_criticality() const {
    return criticality_field;
}

void __seq17::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__seq17::value & __seq17::get_value() {
    return value_field;
}

const __seq17::value & __seq17::get_value() const {
    return value_field;
}

void __seq17::set_value(const value & value_val) {
    value_field = value_val;
}

void *__shared1::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared1::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared1::__shared1() {
    memset(this, 0, sizeof(__shared1));
}

__shared1::__shared1(const __shared1 & that) {
    OSSTRY {
	id_field = that.id_field;
	criticality_field = that.criticality_field;
	extensionValue_field = that.extensionValue_field;
    } OSSCLEAN(__shared1)
}

__shared1::__shared1(id id_val, criticality criticality_val, const extensionValue & extensionValue_val) {
    OSSTRY {
	id_field = id_val;
	criticality_field = criticality_val;
	extensionValue_field = extensionValue_val;
    } OSSCLEAN(__shared1)
}

__shared1 & __shared1::operator = (const __shared1 & that) {
    if (this == &that)
	return *this;
    id_field = that.id_field;
    criticality_field = that.criticality_field;
    extensionValue_field = that.extensionValue_field;
    return *this;
}

int __shared1::operator == (const __shared1 & that) const {
    if (id_field != that.id_field)
	return 0;
    if (criticality_field != that.criticality_field)
	return 0;
    if (extensionValue_field != that.extensionValue_field)
	return 0;
    return 1;
}

int __shared1::operator != (const __shared1 & that) const {
    return !(operator ==(that));
}

__shared1::id & __shared1::get_id() {
    return id_field;
}

__shared1::id __shared1::get_id() const {
    return id_field;
}

void __shared1::set_id(id id_val) {
    id_field = id_val;
}

__shared1::criticality & __shared1::get_criticality() {
    return criticality_field;
}

__shared1::criticality __shared1::get_criticality() const {
    return criticality_field;
}

void __shared1::set_criticality(criticality criticality_val) {
    criticality_field = criticality_val;
}

__shared1::extensionValue & __shared1::get_extensionValue() {
    return extensionValue_field;
}

const __shared1::extensionValue & __shared1::get_extensionValue() const {
    return extensionValue_field;
}

void __shared1::set_extensionValue(const extensionValue & extensionValue_val) {
    extensionValue_field = extensionValue_val;
}

void *EUTRAN_CGI::operator new(size_t size) {
    return ossNewFunc(size);
}

void EUTRAN_CGI::operator delete(void *ptr) {
    asn1Free(ptr);
}

EUTRAN_CGI::EUTRAN_CGI() {
    memset(this, 0, sizeof(EUTRAN_CGI));
}

EUTRAN_CGI::EUTRAN_CGI(const EUTRAN_CGI & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	pLMNidentity_field = that.pLMNidentity_field;
	cell_ID_field = that.cell_ID_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(EUTRAN_CGI)
}

EUTRAN_CGI::EUTRAN_CGI(const pLMNidentity & pLMNidentity_val, const cell_ID & cell_ID_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	pLMNidentity_field = pLMNidentity_val;
	cell_ID_field = cell_ID_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(EUTRAN_CGI)
}

EUTRAN_CGI::EUTRAN_CGI(const pLMNidentity & pLMNidentity_val, const cell_ID & cell_ID_val) {
    OSSTRY {
	bit_mask = 0;
	pLMNidentity_field = pLMNidentity_val;
	cell_ID_field = cell_ID_val;
    } OSSCLEAN(EUTRAN_CGI)
}

EUTRAN_CGI & EUTRAN_CGI::operator = (const EUTRAN_CGI & that) {
    if (this == &that)
	return *this;
    this->~EUTRAN_CGI();
    bit_mask = that.bit_mask;
    pLMNidentity_field = that.pLMNidentity_field;
    cell_ID_field = that.cell_ID_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int EUTRAN_CGI::operator == (const EUTRAN_CGI & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (pLMNidentity_field != that.pLMNidentity_field)
	return 0;
    if (cell_ID_field != that.cell_ID_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int EUTRAN_CGI::operator != (const EUTRAN_CGI & that) const {
    return !(operator ==(that));
}

EUTRAN_CGI::pLMNidentity & EUTRAN_CGI::get_pLMNidentity() {
    return pLMNidentity_field;
}

const EUTRAN_CGI::pLMNidentity & EUTRAN_CGI::get_pLMNidentity() const {
    return pLMNidentity_field;
}

void EUTRAN_CGI::set_pLMNidentity(const pLMNidentity & pLMNidentity_val) {
    pLMNidentity_field = pLMNidentity_val;
}

EUTRAN_CGI::cell_ID & EUTRAN_CGI::get_cell_ID() {
    return cell_ID_field;
}

const EUTRAN_CGI::cell_ID & EUTRAN_CGI::get_cell_ID() const {
    return cell_ID_field;
}

void EUTRAN_CGI::set_cell_ID(const cell_ID & cell_ID_val) {
    cell_ID_field = cell_ID_val;
}

EUTRAN_CGI::iE_Extensions *EUTRAN_CGI::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const EUTRAN_CGI::iE_Extensions *EUTRAN_CGI::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void EUTRAN_CGI::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int EUTRAN_CGI::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void EUTRAN_CGI::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__shared17::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared17::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared17::__shared17() {
    memset(this, 0, sizeof(__shared17));
}

__shared17::__shared17(const __shared17 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	eCGI_field = that.eCGI_field;
	numberOfBroadcasts_field = that.numberOfBroadcasts_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(__shared17)
}

__shared17::__shared17(const eCGI & eCGI_val, numberOfBroadcasts numberOfBroadcasts_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	eCGI_field = eCGI_val;
	numberOfBroadcasts_field = numberOfBroadcasts_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(__shared17)
}

__shared17::__shared17(const eCGI & eCGI_val, numberOfBroadcasts numberOfBroadcasts_val) {
    OSSTRY {
	bit_mask = 0;
	eCGI_field = eCGI_val;
	numberOfBroadcasts_field = numberOfBroadcasts_val;
    } OSSCLEAN(__shared17)
}

__shared17 & __shared17::operator = (const __shared17 & that) {
    if (this == &that)
	return *this;
    this->~__shared17();
    bit_mask = that.bit_mask;
    eCGI_field = that.eCGI_field;
    numberOfBroadcasts_field = that.numberOfBroadcasts_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int __shared17::operator == (const __shared17 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (eCGI_field != that.eCGI_field)
	return 0;
    if (numberOfBroadcasts_field != that.numberOfBroadcasts_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int __shared17::operator != (const __shared17 & that) const {
    return !(operator ==(that));
}

__shared17::eCGI & __shared17::get_eCGI() {
    return eCGI_field;
}

const __shared17::eCGI & __shared17::get_eCGI() const {
    return eCGI_field;
}

void __shared17::set_eCGI(const eCGI & eCGI_val) {
    eCGI_field = eCGI_val;
}

__shared17::numberOfBroadcasts & __shared17::get_numberOfBroadcasts() {
    return numberOfBroadcasts_field;
}

__shared17::numberOfBroadcasts __shared17::get_numberOfBroadcasts() const {
    return numberOfBroadcasts_field;
}

void __shared17::set_numberOfBroadcasts(numberOfBroadcasts numberOfBroadcasts_val) {
    numberOfBroadcasts_field = numberOfBroadcasts_val;
}

__shared17::iE_Extensions *__shared17::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const __shared17::iE_Extensions *__shared17::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void __shared17::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int __shared17::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __shared17::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *NR_CGI::operator new(size_t size) {
    return ossNewFunc(size);
}

void NR_CGI::operator delete(void *ptr) {
    asn1Free(ptr);
}

NR_CGI::NR_CGI() {
    memset(this, 0, sizeof(NR_CGI));
}

NR_CGI::NR_CGI(const NR_CGI & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	pLMNidentity_field = that.pLMNidentity_field;
	nRCellIdentity_field = that.nRCellIdentity_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(NR_CGI)
}

NR_CGI::NR_CGI(const pLMNidentity & pLMNidentity_val, const nRCellIdentity & nRCellIdentity_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	pLMNidentity_field = pLMNidentity_val;
	nRCellIdentity_field = nRCellIdentity_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(NR_CGI)
}

NR_CGI::NR_CGI(const pLMNidentity & pLMNidentity_val, const nRCellIdentity & nRCellIdentity_val) {
    OSSTRY {
	bit_mask = 0;
	pLMNidentity_field = pLMNidentity_val;
	nRCellIdentity_field = nRCellIdentity_val;
    } OSSCLEAN(NR_CGI)
}

NR_CGI & NR_CGI::operator = (const NR_CGI & that) {
    if (this == &that)
	return *this;
    this->~NR_CGI();
    bit_mask = that.bit_mask;
    pLMNidentity_field = that.pLMNidentity_field;
    nRCellIdentity_field = that.nRCellIdentity_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int NR_CGI::operator == (const NR_CGI & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (pLMNidentity_field != that.pLMNidentity_field)
	return 0;
    if (nRCellIdentity_field != that.nRCellIdentity_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int NR_CGI::operator != (const NR_CGI & that) const {
    return !(operator ==(that));
}

NR_CGI::pLMNidentity & NR_CGI::get_pLMNidentity() {
    return pLMNidentity_field;
}

const NR_CGI::pLMNidentity & NR_CGI::get_pLMNidentity() const {
    return pLMNidentity_field;
}

void NR_CGI::set_pLMNidentity(const pLMNidentity & pLMNidentity_val) {
    pLMNidentity_field = pLMNidentity_val;
}

NR_CGI::nRCellIdentity & NR_CGI::get_nRCellIdentity() {
    return nRCellIdentity_field;
}

const NR_CGI::nRCellIdentity & NR_CGI::get_nRCellIdentity() const {
    return nRCellIdentity_field;
}

void NR_CGI::set_nRCellIdentity(const nRCellIdentity & nRCellIdentity_val) {
    nRCellIdentity_field = nRCellIdentity_val;
}

NR_CGI::iE_Extensions *NR_CGI::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const NR_CGI::iE_Extensions *NR_CGI::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void NR_CGI::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int NR_CGI::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void NR_CGI::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__shared21::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared21::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared21::__shared21() {
    memset(this, 0, sizeof(__shared21));
}

__shared21::__shared21(const __shared21 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	nR_CGI_field = that.nR_CGI_field;
	numberOfBroadcasts_field = that.numberOfBroadcasts_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(__shared21)
}

__shared21::__shared21(const nR_CGI & nR_CGI_val, numberOfBroadcasts numberOfBroadcasts_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	nR_CGI_field = nR_CGI_val;
	numberOfBroadcasts_field = numberOfBroadcasts_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(__shared21)
}

__shared21::__shared21(const nR_CGI & nR_CGI_val, numberOfBroadcasts numberOfBroadcasts_val) {
    OSSTRY {
	bit_mask = 0;
	nR_CGI_field = nR_CGI_val;
	numberOfBroadcasts_field = numberOfBroadcasts_val;
    } OSSCLEAN(__shared21)
}

__shared21 & __shared21::operator = (const __shared21 & that) {
    if (this == &that)
	return *this;
    this->~__shared21();
    bit_mask = that.bit_mask;
    nR_CGI_field = that.nR_CGI_field;
    numberOfBroadcasts_field = that.numberOfBroadcasts_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int __shared21::operator == (const __shared21 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (nR_CGI_field != that.nR_CGI_field)
	return 0;
    if (numberOfBroadcasts_field != that.numberOfBroadcasts_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int __shared21::operator != (const __shared21 & that) const {
    return !(operator ==(that));
}

__shared21::nR_CGI & __shared21::get_nR_CGI() {
    return nR_CGI_field;
}

const __shared21::nR_CGI & __shared21::get_nR_CGI() const {
    return nR_CGI_field;
}

void __shared21::set_nR_CGI(const nR_CGI & nR_CGI_val) {
    nR_CGI_field = nR_CGI_val;
}

__shared21::numberOfBroadcasts & __shared21::get_numberOfBroadcasts() {
    return numberOfBroadcasts_field;
}

__shared21::numberOfBroadcasts __shared21::get_numberOfBroadcasts() const {
    return numberOfBroadcasts_field;
}

void __shared21::set_numberOfBroadcasts(numberOfBroadcasts numberOfBroadcasts_val) {
    numberOfBroadcasts_field = numberOfBroadcasts_val;
}

__shared21::iE_Extensions *__shared21::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const __shared21::iE_Extensions *__shared21::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void __shared21::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int __shared21::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __shared21::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__shared10::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared10::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared10::__shared10() {
    memset(this, 0, sizeof(__shared10));
}

__shared10::__shared10(const __shared10 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	eCGI_field = that.eCGI_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(__shared10)
}

__shared10::__shared10(const eCGI & eCGI_val, const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	eCGI_field = eCGI_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(__shared10)
}

__shared10::__shared10(const eCGI & eCGI_val) {
    OSSTRY {
	bit_mask = 0;
	eCGI_field = eCGI_val;
    } OSSCLEAN(__shared10)
}

__shared10 & __shared10::operator = (const __shared10 & that) {
    if (this == &that)
	return *this;
    this->~__shared10();
    bit_mask = that.bit_mask;
    eCGI_field = that.eCGI_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int __shared10::operator == (const __shared10 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (eCGI_field != that.eCGI_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int __shared10::operator != (const __shared10 & that) const {
    return !(operator ==(that));
}

__shared10::eCGI & __shared10::get_eCGI() {
    return eCGI_field;
}

const __shared10::eCGI & __shared10::get_eCGI() const {
    return eCGI_field;
}

void __shared10::set_eCGI(const eCGI & eCGI_val) {
    eCGI_field = eCGI_val;
}

__shared10::iE_Extensions *__shared10::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const __shared10::iE_Extensions *__shared10::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void __shared10::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int __shared10::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __shared10::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__shared14::operator new(size_t size) {
    return ossNewFunc(size);
}

void __shared14::operator delete(void *ptr) {
    asn1Free(ptr);
}

__shared14::__shared14() {
    memset(this, 0, sizeof(__shared14));
}

__shared14::__shared14(const __shared14 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	nR_CGI_field = that.nR_CGI_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(__shared14)
}

__shared14::__shared14(const nR_CGI & nR_CGI_val, const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	nR_CGI_field = nR_CGI_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(__shared14)
}

__shared14::__shared14(const nR_CGI & nR_CGI_val) {
    OSSTRY {
	bit_mask = 0;
	nR_CGI_field = nR_CGI_val;
    } OSSCLEAN(__shared14)
}

__shared14 & __shared14::operator = (const __shared14 & that) {
    if (this == &that)
	return *this;
    this->~__shared14();
    bit_mask = that.bit_mask;
    nR_CGI_field = that.nR_CGI_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int __shared14::operator == (const __shared14 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (nR_CGI_field != that.nR_CGI_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int __shared14::operator != (const __shared14 & that) const {
    return !(operator ==(that));
}

__shared14::nR_CGI & __shared14::get_nR_CGI() {
    return nR_CGI_field;
}

const __shared14::nR_CGI & __shared14::get_nR_CGI() const {
    return nR_CGI_field;
}

void __shared14::set_nR_CGI(const nR_CGI & nR_CGI_val) {
    nR_CGI_field = nR_CGI_val;
}

__shared14::iE_Extensions *__shared14::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const __shared14::iE_Extensions *__shared14::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void __shared14::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int __shared14::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __shared14::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__seq37::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq37::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq37::__seq37() {
    memset(this, 0, sizeof(__seq37));
}

__seq37::__seq37(const __seq37 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	iECriticality_field = that.iECriticality_field;
	iE_ID_field = that.iE_ID_field;
	typeOfError_field = that.typeOfError_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(__seq37)
}

__seq37::__seq37(iECriticality iECriticality_val, iE_ID iE_ID_val, typeOfError typeOfError_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	iECriticality_field = iECriticality_val;
	iE_ID_field = iE_ID_val;
	typeOfError_field = typeOfError_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(__seq37)
}

__seq37::__seq37(iECriticality iECriticality_val, iE_ID iE_ID_val, typeOfError typeOfError_val) {
    OSSTRY {
	bit_mask = 0;
	iECriticality_field = iECriticality_val;
	iE_ID_field = iE_ID_val;
	typeOfError_field = typeOfError_val;
    } OSSCLEAN(__seq37)
}

__seq37 & __seq37::operator = (const __seq37 & that) {
    if (this == &that)
	return *this;
    this->~__seq37();
    bit_mask = that.bit_mask;
    iECriticality_field = that.iECriticality_field;
    iE_ID_field = that.iE_ID_field;
    typeOfError_field = that.typeOfError_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int __seq37::operator == (const __seq37 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (iECriticality_field != that.iECriticality_field)
	return 0;
    if (iE_ID_field != that.iE_ID_field)
	return 0;
    if (typeOfError_field != that.typeOfError_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int __seq37::operator != (const __seq37 & that) const {
    return !(operator ==(that));
}

__seq37::iECriticality & __seq37::get_iECriticality() {
    return iECriticality_field;
}

__seq37::iECriticality __seq37::get_iECriticality() const {
    return iECriticality_field;
}

void __seq37::set_iECriticality(iECriticality iECriticality_val) {
    iECriticality_field = iECriticality_val;
}

__seq37::iE_ID & __seq37::get_iE_ID() {
    return iE_ID_field;
}

__seq37::iE_ID __seq37::get_iE_ID() const {
    return iE_ID_field;
}

void __seq37::set_iE_ID(iE_ID iE_ID_val) {
    iE_ID_field = iE_ID_val;
}

__seq37::typeOfError & __seq37::get_typeOfError() {
    return typeOfError_field;
}

__seq37::typeOfError __seq37::get_typeOfError() const {
    return typeOfError_field;
}

void __seq37::set_typeOfError(typeOfError typeOfError_val) {
    typeOfError_field = typeOfError_val;
}

__seq37::iE_Extensions *__seq37::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const __seq37::iE_Extensions *__seq37::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void __seq37::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int __seq37::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __seq37::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *EmergencyAreaID_Broadcast_List_Item::operator new(size_t size) {
    return ossNewFunc(size);
}

void EmergencyAreaID_Broadcast_List_Item::operator delete(void *ptr) {
    asn1Free(ptr);
}

EmergencyAreaID_Broadcast_List_Item::EmergencyAreaID_Broadcast_List_Item() {
    memset(this, 0, sizeof(EmergencyAreaID_Broadcast_List_Item));
}

EmergencyAreaID_Broadcast_List_Item::EmergencyAreaID_Broadcast_List_Item(const EmergencyAreaID_Broadcast_List_Item & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	emergencyAreaID_field = that.emergencyAreaID_field;
	scheduledCellinEAI_field = that.scheduledCellinEAI_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(EmergencyAreaID_Broadcast_List_Item)
}

EmergencyAreaID_Broadcast_List_Item::EmergencyAreaID_Broadcast_List_Item(const emergencyAreaID & emergencyAreaID_val, 
    const scheduledCellinEAI & scheduledCellinEAI_val, const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	emergencyAreaID_field = emergencyAreaID_val;
	scheduledCellinEAI_field = scheduledCellinEAI_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(EmergencyAreaID_Broadcast_List_Item)
}

EmergencyAreaID_Broadcast_List_Item::EmergencyAreaID_Broadcast_List_Item(const emergencyAreaID & emergencyAreaID_val, 
    const scheduledCellinEAI & scheduledCellinEAI_val) {
    OSSTRY {
	bit_mask = 0;
	emergencyAreaID_field = emergencyAreaID_val;
	scheduledCellinEAI_field = scheduledCellinEAI_val;
    } OSSCLEAN(EmergencyAreaID_Broadcast_List_Item)
}

EmergencyAreaID_Broadcast_List_Item & EmergencyAreaID_Broadcast_List_Item::operator = (const EmergencyAreaID_Broadcast_List_Item & that) {
    if (this == &that)
	return *this;
    this->~EmergencyAreaID_Broadcast_List_Item();
    bit_mask = that.bit_mask;
    emergencyAreaID_field = that.emergencyAreaID_field;
    scheduledCellinEAI_field = that.scheduledCellinEAI_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int EmergencyAreaID_Broadcast_List_Item::operator == (const EmergencyAreaID_Broadcast_List_Item & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (emergencyAreaID_field != that.emergencyAreaID_field)
	return 0;
    if (scheduledCellinEAI_field != that.scheduledCellinEAI_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int EmergencyAreaID_Broadcast_List_Item::operator != (const EmergencyAreaID_Broadcast_List_Item & that) const {
    return !(operator ==(that));
}

EmergencyAreaID_Broadcast_List_Item::emergencyAreaID & EmergencyAreaID_Broadcast_List_Item::get_emergencyAreaID() {
    return emergencyAreaID_field;
}

const EmergencyAreaID_Broadcast_List_Item::emergencyAreaID & EmergencyAreaID_Broadcast_List_Item::get_emergencyAreaID() const {
    return emergencyAreaID_field;
}

void EmergencyAreaID_Broadcast_List_Item::set_emergencyAreaID(const emergencyAreaID & emergencyAreaID_val) {
    emergencyAreaID_field = emergencyAreaID_val;
}

EmergencyAreaID_Broadcast_List_Item::scheduledCellinEAI & EmergencyAreaID_Broadcast_List_Item::get_scheduledCellinEAI() {
    return scheduledCellinEAI_field;
}

const EmergencyAreaID_Broadcast_List_Item::scheduledCellinEAI & EmergencyAreaID_Broadcast_List_Item::get_scheduledCellinEAI() const {
    return scheduledCellinEAI_field;
}

void EmergencyAreaID_Broadcast_List_Item::set_scheduledCellinEAI(const scheduledCellinEAI & scheduledCellinEAI_val) {
    scheduledCellinEAI_field = scheduledCellinEAI_val;
}

EmergencyAreaID_Broadcast_List_Item::iE_Extensions *EmergencyAreaID_Broadcast_List_Item::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const EmergencyAreaID_Broadcast_List_Item::iE_Extensions *EmergencyAreaID_Broadcast_List_Item::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void EmergencyAreaID_Broadcast_List_Item::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int EmergencyAreaID_Broadcast_List_Item::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void EmergencyAreaID_Broadcast_List_Item::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *EmergencyAreaID_Cancelled_Item::operator new(size_t size) {
    return ossNewFunc(size);
}

void EmergencyAreaID_Cancelled_Item::operator delete(void *ptr) {
    asn1Free(ptr);
}

EmergencyAreaID_Cancelled_Item::EmergencyAreaID_Cancelled_Item() {
    memset(this, 0, sizeof(EmergencyAreaID_Cancelled_Item));
}

EmergencyAreaID_Cancelled_Item::EmergencyAreaID_Cancelled_Item(const EmergencyAreaID_Cancelled_Item & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	emergencyAreaID_field = that.emergencyAreaID_field;
	cancelledCellinEAI_field = that.cancelledCellinEAI_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(EmergencyAreaID_Cancelled_Item)
}

EmergencyAreaID_Cancelled_Item::EmergencyAreaID_Cancelled_Item(const emergencyAreaID & emergencyAreaID_val, 
    const cancelledCellinEAI & cancelledCellinEAI_val, const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	emergencyAreaID_field = emergencyAreaID_val;
	cancelledCellinEAI_field = cancelledCellinEAI_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(EmergencyAreaID_Cancelled_Item)
}

EmergencyAreaID_Cancelled_Item::EmergencyAreaID_Cancelled_Item(const emergencyAreaID & emergencyAreaID_val, 
    const cancelledCellinEAI & cancelledCellinEAI_val) {
    OSSTRY {
	bit_mask = 0;
	emergencyAreaID_field = emergencyAreaID_val;
	cancelledCellinEAI_field = cancelledCellinEAI_val;
    } OSSCLEAN(EmergencyAreaID_Cancelled_Item)
}

EmergencyAreaID_Cancelled_Item & EmergencyAreaID_Cancelled_Item::operator = (const EmergencyAreaID_Cancelled_Item & that) {
    if (this == &that)
	return *this;
    this->~EmergencyAreaID_Cancelled_Item();
    bit_mask = that.bit_mask;
    emergencyAreaID_field = that.emergencyAreaID_field;
    cancelledCellinEAI_field = that.cancelledCellinEAI_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int EmergencyAreaID_Cancelled_Item::operator == (const EmergencyAreaID_Cancelled_Item & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (emergencyAreaID_field != that.emergencyAreaID_field)
	return 0;
    if (cancelledCellinEAI_field != that.cancelledCellinEAI_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int EmergencyAreaID_Cancelled_Item::operator != (const EmergencyAreaID_Cancelled_Item & that) const {
    return !(operator ==(that));
}

EmergencyAreaID_Cancelled_Item::emergencyAreaID & EmergencyAreaID_Cancelled_Item::get_emergencyAreaID() {
    return emergencyAreaID_field;
}

const EmergencyAreaID_Cancelled_Item::emergencyAreaID & EmergencyAreaID_Cancelled_Item::get_emergencyAreaID() const {
    return emergencyAreaID_field;
}

void EmergencyAreaID_Cancelled_Item::set_emergencyAreaID(const emergencyAreaID & emergencyAreaID_val) {
    emergencyAreaID_field = emergencyAreaID_val;
}

EmergencyAreaID_Cancelled_Item::cancelledCellinEAI & EmergencyAreaID_Cancelled_Item::get_cancelledCellinEAI() {
    return cancelledCellinEAI_field;
}

const EmergencyAreaID_Cancelled_Item::cancelledCellinEAI & EmergencyAreaID_Cancelled_Item::get_cancelledCellinEAI() const {
    return cancelledCellinEAI_field;
}

void EmergencyAreaID_Cancelled_Item::set_cancelledCellinEAI(const cancelledCellinEAI & cancelledCellinEAI_val) {
    cancelledCellinEAI_field = cancelledCellinEAI_val;
}

EmergencyAreaID_Cancelled_Item::iE_Extensions *EmergencyAreaID_Cancelled_Item::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const EmergencyAreaID_Cancelled_Item::iE_Extensions *EmergencyAreaID_Cancelled_Item::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void EmergencyAreaID_Cancelled_Item::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int EmergencyAreaID_Cancelled_Item::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void EmergencyAreaID_Cancelled_Item::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *TAI::operator new(size_t size) {
    return ossNewFunc(size);
}

void TAI::operator delete(void *ptr) {
    asn1Free(ptr);
}

TAI::TAI() {
    memset(this, 0, sizeof(TAI));
}

TAI::TAI(const TAI & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	pLMNidentity_field = that.pLMNidentity_field;
	tAC_field = that.tAC_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(TAI)
}

TAI::TAI(const pLMNidentity & pLMNidentity_val, const tAC & tAC_val, const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	pLMNidentity_field = pLMNidentity_val;
	tAC_field = tAC_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(TAI)
}

TAI::TAI(const pLMNidentity & pLMNidentity_val, const tAC & tAC_val) {
    OSSTRY {
	bit_mask = 0;
	pLMNidentity_field = pLMNidentity_val;
	tAC_field = tAC_val;
    } OSSCLEAN(TAI)
}

TAI & TAI::operator = (const TAI & that) {
    if (this == &that)
	return *this;
    this->~TAI();
    bit_mask = that.bit_mask;
    pLMNidentity_field = that.pLMNidentity_field;
    tAC_field = that.tAC_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int TAI::operator == (const TAI & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (pLMNidentity_field != that.pLMNidentity_field)
	return 0;
    if (tAC_field != that.tAC_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int TAI::operator != (const TAI & that) const {
    return !(operator ==(that));
}

TAI::pLMNidentity & TAI::get_pLMNidentity() {
    return pLMNidentity_field;
}

const TAI::pLMNidentity & TAI::get_pLMNidentity() const {
    return pLMNidentity_field;
}

void TAI::set_pLMNidentity(const pLMNidentity & pLMNidentity_val) {
    pLMNidentity_field = pLMNidentity_val;
}

TAI::tAC & TAI::get_tAC() {
    return tAC_field;
}

const TAI::tAC & TAI::get_tAC() const {
    return tAC_field;
}

void TAI::set_tAC(const tAC & tAC_val) {
    tAC_field = tAC_val;
}

TAI::iE_Extensions *TAI::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const TAI::iE_Extensions *TAI::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void TAI::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int TAI::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void TAI::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__seq43::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq43::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq43::__seq43() {
    memset(this, 0, sizeof(__seq43));
}

__seq43::__seq43(const __seq43 & that) {
    OSSTRY {
	tai_field = that.tai_field;
    } OSSCLEAN(__seq43)
}

__seq43::__seq43(const tai & tai_val) {
    OSSTRY {
	tai_field = tai_val;
    } OSSCLEAN(__seq43)
}

__seq43 & __seq43::operator = (const __seq43 & that) {
    if (this == &that)
	return *this;
    tai_field = that.tai_field;
    return *this;
}

int __seq43::operator == (const __seq43 & that) const {
    if (tai_field != that.tai_field)
	return 0;
    return 1;
}

int __seq43::operator != (const __seq43 & that) const {
    return !(operator ==(that));
}

__seq43::tai & __seq43::get_tai() {
    return tai_field;
}

const __seq43::tai & __seq43::get_tai() const {
    return tai_field;
}

void __seq43::set_tai(const tai & tai_val) {
    tai_field = tai_val;
}

NgENB_ID::NgENB_ID() {
    memset(this, 0, sizeof(NgENB_ID));
}

NgENB_ID::NgENB_ID(const NgENB_ID & that) {
    memset(this, 0, sizeof(NgENB_ID));
    operator =(that);
}

NgENB_ID::~NgENB_ID() {
    cleanup();
}

NgENB_ID & NgENB_ID::operator = (const NgENB_ID & that) {
    if (this == &that)
	return *this;
    cleanup();
    _choice = that._choice;
    switch (_choice) {
	case macroNgENB_ID_chosen:
	    *(macroNgENB_ID *)&macroNgENB_ID_field = *(macroNgENB_ID *)&that.macroNgENB_ID_field;
	    break;
	case shortMacroNgENB_ID_chosen:
	    *(shortMacroNgENB_ID *)&shortMacroNgENB_ID_field = *(shortMacroNgENB_ID *)&that.shortMacroNgENB_ID_field;
	    break;
	case longMacroNgENB_ID_chosen:
	    *(longMacroNgENB_ID *)&longMacroNgENB_ID_field = *(longMacroNgENB_ID *)&that.longMacroNgENB_ID_field;
	    break;
    }
    return *this;
}

int NgENB_ID::operator == (const NgENB_ID & that) const {
    if (_choice != that._choice)
	return 0;
    switch (_choice) {
	case macroNgENB_ID_chosen:
	    return *(macroNgENB_ID *)&macroNgENB_ID_field == *(macroNgENB_ID *)&that.macroNgENB_ID_field;
	case shortMacroNgENB_ID_chosen:
	    return *(shortMacroNgENB_ID *)&shortMacroNgENB_ID_field == *(shortMacroNgENB_ID *)&that.shortMacroNgENB_ID_field;
	case longMacroNgENB_ID_chosen:
	    return *(longMacroNgENB_ID *)&longMacroNgENB_ID_field == *(longMacroNgENB_ID *)&that.longMacroNgENB_ID_field;
    }

    return 1;
}

int NgENB_ID::operator != (const NgENB_ID & that) const {
    return !(operator ==(that));
}

NgENB_ID::macroNgENB_ID *NgENB_ID::get_macroNgENB_ID() {
    if (_choice == macroNgENB_ID_chosen)
	return (macroNgENB_ID *)&macroNgENB_ID_field;
    else
	return 0;
}

const NgENB_ID::macroNgENB_ID *NgENB_ID::get_macroNgENB_ID() const {
    if (_choice == macroNgENB_ID_chosen)
	return (const macroNgENB_ID *)&macroNgENB_ID_field;
    else
	return 0;
}

void NgENB_ID::set_macroNgENB_ID(const macroNgENB_ID & macroNgENB_ID_val) {
    cleanup();
    *(macroNgENB_ID *)&macroNgENB_ID_field = macroNgENB_ID_val;
    _choice = macroNgENB_ID_chosen;
}

NgENB_ID::shortMacroNgENB_ID *NgENB_ID::get_shortMacroNgENB_ID() {
    if (_choice == shortMacroNgENB_ID_chosen)
	return (shortMacroNgENB_ID *)&shortMacroNgENB_ID_field;
    else
	return 0;
}

const NgENB_ID::shortMacroNgENB_ID *NgENB_ID::get_shortMacroNgENB_ID() const {
    if (_choice == shortMacroNgENB_ID_chosen)
	return (const shortMacroNgENB_ID *)&shortMacroNgENB_ID_field;
    else
	return 0;
}

void NgENB_ID::set_shortMacroNgENB_ID(const shortMacroNgENB_ID & shortMacroNgENB_ID_val) {
    cleanup();
    *(shortMacroNgENB_ID *)&shortMacroNgENB_ID_field = shortMacroNgENB_ID_val;
    _choice = shortMacroNgENB_ID_chosen;
}

NgENB_ID::longMacroNgENB_ID *NgENB_ID::get_longMacroNgENB_ID() {
    if (_choice == longMacroNgENB_ID_chosen)
	return (longMacroNgENB_ID *)&longMacroNgENB_ID_field;
    else
	return 0;
}

const NgENB_ID::longMacroNgENB_ID *NgENB_ID::get_longMacroNgENB_ID() const {
    if (_choice == longMacroNgENB_ID_chosen)
	return (const longMacroNgENB_ID *)&longMacroNgENB_ID_field;
    else
	return 0;
}

void NgENB_ID::set_longMacroNgENB_ID(const longMacroNgENB_ID & longMacroNgENB_ID_val) {
    cleanup();
    *(longMacroNgENB_ID *)&longMacroNgENB_ID_field = longMacroNgENB_ID_val;
    _choice = longMacroNgENB_ID_chosen;
}

void NgENB_ID::cleanup() {
    switch (_choice) {
	case macroNgENB_ID_chosen:
	    ((macroNgENB_ID *)&macroNgENB_ID_field)->~OssBitString();
	    break;
	case shortMacroNgENB_ID_chosen:
	    ((shortMacroNgENB_ID *)&shortMacroNgENB_ID_field)->~OssBitString();
	    break;
	case longMacroNgENB_ID_chosen:
	    ((longMacroNgENB_ID *)&longMacroNgENB_ID_field)->~OssBitString();
	    break;
    }
    memset(this, 0, sizeof(*this));
}

void *TAI_Broadcast_List_Item::operator new(size_t size) {
    return ossNewFunc(size);
}

void TAI_Broadcast_List_Item::operator delete(void *ptr) {
    asn1Free(ptr);
}

TAI_Broadcast_List_Item::TAI_Broadcast_List_Item() {
    memset(this, 0, sizeof(TAI_Broadcast_List_Item));
}

TAI_Broadcast_List_Item::TAI_Broadcast_List_Item(const TAI_Broadcast_List_Item & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	tAI_field = that.tAI_field;
	scheduledCellinTAI_field = that.scheduledCellinTAI_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(TAI_Broadcast_List_Item)
}

TAI_Broadcast_List_Item::TAI_Broadcast_List_Item(const tAI & tAI_val, const scheduledCellinTAI & scheduledCellinTAI_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	tAI_field = tAI_val;
	scheduledCellinTAI_field = scheduledCellinTAI_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(TAI_Broadcast_List_Item)
}

TAI_Broadcast_List_Item::TAI_Broadcast_List_Item(const tAI & tAI_val, const scheduledCellinTAI & scheduledCellinTAI_val) {
    OSSTRY {
	bit_mask = 0;
	tAI_field = tAI_val;
	scheduledCellinTAI_field = scheduledCellinTAI_val;
    } OSSCLEAN(TAI_Broadcast_List_Item)
}

TAI_Broadcast_List_Item & TAI_Broadcast_List_Item::operator = (const TAI_Broadcast_List_Item & that) {
    if (this == &that)
	return *this;
    this->~TAI_Broadcast_List_Item();
    bit_mask = that.bit_mask;
    tAI_field = that.tAI_field;
    scheduledCellinTAI_field = that.scheduledCellinTAI_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int TAI_Broadcast_List_Item::operator == (const TAI_Broadcast_List_Item & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (tAI_field != that.tAI_field)
	return 0;
    if (scheduledCellinTAI_field != that.scheduledCellinTAI_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int TAI_Broadcast_List_Item::operator != (const TAI_Broadcast_List_Item & that) const {
    return !(operator ==(that));
}

TAI_Broadcast_List_Item::tAI & TAI_Broadcast_List_Item::get_tAI() {
    return tAI_field;
}

const TAI_Broadcast_List_Item::tAI & TAI_Broadcast_List_Item::get_tAI() const {
    return tAI_field;
}

void TAI_Broadcast_List_Item::set_tAI(const tAI & tAI_val) {
    tAI_field = tAI_val;
}

TAI_Broadcast_List_Item::scheduledCellinTAI & TAI_Broadcast_List_Item::get_scheduledCellinTAI() {
    return scheduledCellinTAI_field;
}

const TAI_Broadcast_List_Item::scheduledCellinTAI & TAI_Broadcast_List_Item::get_scheduledCellinTAI() const {
    return scheduledCellinTAI_field;
}

void TAI_Broadcast_List_Item::set_scheduledCellinTAI(const scheduledCellinTAI & scheduledCellinTAI_val) {
    scheduledCellinTAI_field = scheduledCellinTAI_val;
}

TAI_Broadcast_List_Item::iE_Extensions *TAI_Broadcast_List_Item::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const TAI_Broadcast_List_Item::iE_Extensions *TAI_Broadcast_List_Item::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void TAI_Broadcast_List_Item::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int TAI_Broadcast_List_Item::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void TAI_Broadcast_List_Item::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__seq51::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq51::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq51::__seq51() {
    memset(this, 0, sizeof(__seq51));
}

__seq51::__seq51(const __seq51 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	tAI_5GS_field = that.tAI_5GS_field;
	scheduledCellinTAI_5GS_field = that.scheduledCellinTAI_5GS_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(__seq51)
}

__seq51::__seq51(const tAI_5GS & tAI_5GS_val, const scheduledCellinTAI_5GS & scheduledCellinTAI_5GS_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	tAI_5GS_field = tAI_5GS_val;
	scheduledCellinTAI_5GS_field = scheduledCellinTAI_5GS_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(__seq51)
}

__seq51::__seq51(const tAI_5GS & tAI_5GS_val, const scheduledCellinTAI_5GS & scheduledCellinTAI_5GS_val) {
    OSSTRY {
	bit_mask = 0;
	tAI_5GS_field = tAI_5GS_val;
	scheduledCellinTAI_5GS_field = scheduledCellinTAI_5GS_val;
    } OSSCLEAN(__seq51)
}

__seq51 & __seq51::operator = (const __seq51 & that) {
    if (this == &that)
	return *this;
    this->~__seq51();
    bit_mask = that.bit_mask;
    tAI_5GS_field = that.tAI_5GS_field;
    scheduledCellinTAI_5GS_field = that.scheduledCellinTAI_5GS_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int __seq51::operator == (const __seq51 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (tAI_5GS_field != that.tAI_5GS_field)
	return 0;
    if (scheduledCellinTAI_5GS_field != that.scheduledCellinTAI_5GS_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int __seq51::operator != (const __seq51 & that) const {
    return !(operator ==(that));
}

__seq51::tAI_5GS & __seq51::get_tAI_5GS() {
    return tAI_5GS_field;
}

const __seq51::tAI_5GS & __seq51::get_tAI_5GS() const {
    return tAI_5GS_field;
}

void __seq51::set_tAI_5GS(const tAI_5GS & tAI_5GS_val) {
    tAI_5GS_field = tAI_5GS_val;
}

__seq51::scheduledCellinTAI_5GS & __seq51::get_scheduledCellinTAI_5GS() {
    return scheduledCellinTAI_5GS_field;
}

const __seq51::scheduledCellinTAI_5GS & __seq51::get_scheduledCellinTAI_5GS() const {
    return scheduledCellinTAI_5GS_field;
}

void __seq51::set_scheduledCellinTAI_5GS(const scheduledCellinTAI_5GS & scheduledCellinTAI_5GS_val) {
    scheduledCellinTAI_5GS_field = scheduledCellinTAI_5GS_val;
}

__seq51::iE_Extensions *__seq51::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const __seq51::iE_Extensions *__seq51::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void __seq51::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int __seq51::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __seq51::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *TAI_Cancelled_List_Item::operator new(size_t size) {
    return ossNewFunc(size);
}

void TAI_Cancelled_List_Item::operator delete(void *ptr) {
    asn1Free(ptr);
}

TAI_Cancelled_List_Item::TAI_Cancelled_List_Item() {
    memset(this, 0, sizeof(TAI_Cancelled_List_Item));
}

TAI_Cancelled_List_Item::TAI_Cancelled_List_Item(const TAI_Cancelled_List_Item & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	tAI_field = that.tAI_field;
	cancelledCellinTAI_field = that.cancelledCellinTAI_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(TAI_Cancelled_List_Item)
}

TAI_Cancelled_List_Item::TAI_Cancelled_List_Item(const tAI & tAI_val, const cancelledCellinTAI & cancelledCellinTAI_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	tAI_field = tAI_val;
	cancelledCellinTAI_field = cancelledCellinTAI_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(TAI_Cancelled_List_Item)
}

TAI_Cancelled_List_Item::TAI_Cancelled_List_Item(const tAI & tAI_val, const cancelledCellinTAI & cancelledCellinTAI_val) {
    OSSTRY {
	bit_mask = 0;
	tAI_field = tAI_val;
	cancelledCellinTAI_field = cancelledCellinTAI_val;
    } OSSCLEAN(TAI_Cancelled_List_Item)
}

TAI_Cancelled_List_Item & TAI_Cancelled_List_Item::operator = (const TAI_Cancelled_List_Item & that) {
    if (this == &that)
	return *this;
    this->~TAI_Cancelled_List_Item();
    bit_mask = that.bit_mask;
    tAI_field = that.tAI_field;
    cancelledCellinTAI_field = that.cancelledCellinTAI_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int TAI_Cancelled_List_Item::operator == (const TAI_Cancelled_List_Item & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (tAI_field != that.tAI_field)
	return 0;
    if (cancelledCellinTAI_field != that.cancelledCellinTAI_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int TAI_Cancelled_List_Item::operator != (const TAI_Cancelled_List_Item & that) const {
    return !(operator ==(that));
}

TAI_Cancelled_List_Item::tAI & TAI_Cancelled_List_Item::get_tAI() {
    return tAI_field;
}

const TAI_Cancelled_List_Item::tAI & TAI_Cancelled_List_Item::get_tAI() const {
    return tAI_field;
}

void TAI_Cancelled_List_Item::set_tAI(const tAI & tAI_val) {
    tAI_field = tAI_val;
}

TAI_Cancelled_List_Item::cancelledCellinTAI & TAI_Cancelled_List_Item::get_cancelledCellinTAI() {
    return cancelledCellinTAI_field;
}

const TAI_Cancelled_List_Item::cancelledCellinTAI & TAI_Cancelled_List_Item::get_cancelledCellinTAI() const {
    return cancelledCellinTAI_field;
}

void TAI_Cancelled_List_Item::set_cancelledCellinTAI(const cancelledCellinTAI & cancelledCellinTAI_val) {
    cancelledCellinTAI_field = cancelledCellinTAI_val;
}

TAI_Cancelled_List_Item::iE_Extensions *TAI_Cancelled_List_Item::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const TAI_Cancelled_List_Item::iE_Extensions *TAI_Cancelled_List_Item::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void TAI_Cancelled_List_Item::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int TAI_Cancelled_List_Item::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void TAI_Cancelled_List_Item::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

void *__seq54::operator new(size_t size) {
    return ossNewFunc(size);
}

void __seq54::operator delete(void *ptr) {
    asn1Free(ptr);
}

__seq54::__seq54() {
    memset(this, 0, sizeof(__seq54));
}

__seq54::__seq54(const __seq54 & that) {
    OSSTRY {
	bit_mask = that.bit_mask;
	tAI_5GS_field = that.tAI_5GS_field;
	cancelledCellinTAI_5GS_field = that.cancelledCellinTAI_5GS_field;
	iE_Extensions_field = that.iE_Extensions_field;
    } OSSCLEAN(__seq54)
}

__seq54::__seq54(const tAI_5GS & tAI_5GS_val, const cancelledCellinTAI_5GS & cancelledCellinTAI_5GS_val, 
    const iE_Extensions & iE_Extensions_val) {
    OSSTRY {
	bit_mask = 0x80000000;
	tAI_5GS_field = tAI_5GS_val;
	cancelledCellinTAI_5GS_field = cancelledCellinTAI_5GS_val;
	iE_Extensions_field = iE_Extensions_val;
    } OSSCLEAN(__seq54)
}

__seq54::__seq54(const tAI_5GS & tAI_5GS_val, const cancelledCellinTAI_5GS & cancelledCellinTAI_5GS_val) {
    OSSTRY {
	bit_mask = 0;
	tAI_5GS_field = tAI_5GS_val;
	cancelledCellinTAI_5GS_field = cancelledCellinTAI_5GS_val;
    } OSSCLEAN(__seq54)
}

__seq54 & __seq54::operator = (const __seq54 & that) {
    if (this == &that)
	return *this;
    this->~__seq54();
    bit_mask = that.bit_mask;
    tAI_5GS_field = that.tAI_5GS_field;
    cancelledCellinTAI_5GS_field = that.cancelledCellinTAI_5GS_field;
    iE_Extensions_field = that.iE_Extensions_field;
    return *this;
}

int __seq54::operator == (const __seq54 & that) const {
    if (bit_mask != that.bit_mask)
	return 0;
    if (tAI_5GS_field != that.tAI_5GS_field)
	return 0;
    if (cancelledCellinTAI_5GS_field != that.cancelledCellinTAI_5GS_field)
	return 0;
    if (bit_mask & 0x80000000) {
	if (iE_Extensions_field != that.iE_Extensions_field)
	    return 0;
    }
    return 1;
}

int __seq54::operator != (const __seq54 & that) const {
    return !(operator ==(that));
}

__seq54::tAI_5GS & __seq54::get_tAI_5GS() {
    return tAI_5GS_field;
}

const __seq54::tAI_5GS & __seq54::get_tAI_5GS() const {
    return tAI_5GS_field;
}

void __seq54::set_tAI_5GS(const tAI_5GS & tAI_5GS_val) {
    tAI_5GS_field = tAI_5GS_val;
}

__seq54::cancelledCellinTAI_5GS & __seq54::get_cancelledCellinTAI_5GS() {
    return cancelledCellinTAI_5GS_field;
}

const __seq54::cancelledCellinTAI_5GS & __seq54::get_cancelledCellinTAI_5GS() const {
    return cancelledCellinTAI_5GS_field;
}

void __seq54::set_cancelledCellinTAI_5GS(const cancelledCellinTAI_5GS & cancelledCellinTAI_5GS_val) {
    cancelledCellinTAI_5GS_field = cancelledCellinTAI_5GS_val;
}

__seq54::iE_Extensions *__seq54::get_iE_Extensions() {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

const __seq54::iE_Extensions *__seq54::get_iE_Extensions() const {
    if (bit_mask & 0x80000000)
	return &iE_Extensions_field;
    else
	return 0;
}

void __seq54::set_iE_Extensions(const iE_Extensions & iE_Extensions_val) {
    bit_mask |= 0x80000000;
    iE_Extensions_field = iE_Extensions_val;
}

int __seq54::iE_Extensions_is_present() const {
    return !!(bit_mask & 0x80000000);
}

void __seq54::omit_iE_Extensions() {
    iE_Extensions_field.~__shared2();
    bit_mask &= ~0x80000000;
}

/* Universal PDU class */

sbcap_PDU::sbcap_PDU() {
}

void sbcap_PDU::set_SBC_AP_PDU(SBC_AP_PDU & d) {
    index = 1;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

SBC_AP_PDU *sbcap_PDU::get_SBC_AP_PDU() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 1 && !constant)
#else
    if (index == 1)
#endif
	return (SBC_AP_PDU *)data;
    else
	return 0;
}

void sbcap_PDU::set_Write_Replace_Warning_Request(Write_Replace_Warning_Request & d) {
    index = 2;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Write_Replace_Warning_Request *sbcap_PDU::get_Write_Replace_Warning_Request() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 2 && !constant)
#else
    if (index == 2)
#endif
	return (Write_Replace_Warning_Request *)data;
    else
	return 0;
}

void sbcap_PDU::set_Write_Replace_Warning_Response(Write_Replace_Warning_Response & d) {
    index = 3;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Write_Replace_Warning_Response *sbcap_PDU::get_Write_Replace_Warning_Response() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 3 && !constant)
#else
    if (index == 3)
#endif
	return (Write_Replace_Warning_Response *)data;
    else
	return 0;
}

void sbcap_PDU::set_Stop_Warning_Request(Stop_Warning_Request & d) {
    index = 4;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_Warning_Request *sbcap_PDU::get_Stop_Warning_Request() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 4 && !constant)
#else
    if (index == 4)
#endif
	return (Stop_Warning_Request *)data;
    else
	return 0;
}

void sbcap_PDU::set_Stop_Warning_Response(Stop_Warning_Response & d) {
    index = 5;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_Warning_Response *sbcap_PDU::get_Stop_Warning_Response() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 5 && !constant)
#else
    if (index == 5)
#endif
	return (Stop_Warning_Response *)data;
    else
	return 0;
}

void sbcap_PDU::set_Write_Replace_Warning_Indication(Write_Replace_Warning_Indication & d) {
    index = 6;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Write_Replace_Warning_Indication *sbcap_PDU::get_Write_Replace_Warning_Indication() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 6 && !constant)
#else
    if (index == 6)
#endif
	return (Write_Replace_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_Stop_Warning_Indication(Stop_Warning_Indication & d) {
    index = 7;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_Warning_Indication *sbcap_PDU::get_Stop_Warning_Indication() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 7 && !constant)
#else
    if (index == 7)
#endif
	return (Stop_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_PWS_Restart_Indication(PWS_Restart_Indication & d) {
    index = 8;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PWS_Restart_Indication *sbcap_PDU::get_PWS_Restart_Indication() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 8 && !constant)
#else
    if (index == 8)
#endif
	return (PWS_Restart_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_PWS_Failure_Indication(PWS_Failure_Indication & d) {
    index = 9;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PWS_Failure_Indication *sbcap_PDU::get_PWS_Failure_Indication() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 9 && !constant)
#else
    if (index == 9)
#endif
	return (PWS_Failure_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_Error_Indication(Error_Indication & d) {
    index = 10;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Error_Indication *sbcap_PDU::get_Error_Indication() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 10 && !constant)
#else
    if (index == 10)
#endif
	return (Error_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_Broadcast_Scheduled_Area_List(Broadcast_Scheduled_Area_List & d) {
    index = 11;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Scheduled_Area_List *sbcap_PDU::get_Broadcast_Scheduled_Area_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 11 && !constant)
#else
    if (index == 11)
#endif
	return (Broadcast_Scheduled_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_Broadcast_Scheduled_Area_List_5GS(Broadcast_Scheduled_Area_List_5GS & d) {
    index = 12;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Scheduled_Area_List_5GS *sbcap_PDU::get_Broadcast_Scheduled_Area_List_5GS() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 12 && !constant)
#else
    if (index == 12)
#endif
	return (Broadcast_Scheduled_Area_List_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_Broadcast_Cancelled_Area_List(Broadcast_Cancelled_Area_List & d) {
    index = 13;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Cancelled_Area_List *sbcap_PDU::get_Broadcast_Cancelled_Area_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 13 && !constant)
#else
    if (index == 13)
#endif
	return (Broadcast_Cancelled_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_Broadcast_Cancelled_Area_List_5GS(Broadcast_Cancelled_Area_List_5GS & d) {
    index = 14;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Cancelled_Area_List_5GS *sbcap_PDU::get_Broadcast_Cancelled_Area_List_5GS() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 14 && !constant)
#else
    if (index == 14)
#endif
	return (Broadcast_Cancelled_Area_List_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_Broadcast_Empty_Area_List(Broadcast_Empty_Area_List & d) {
    index = 15;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Empty_Area_List *sbcap_PDU::get_Broadcast_Empty_Area_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 15 && !constant)
#else
    if (index == 15)
#endif
	return (Broadcast_Empty_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_Broadcast_Empty_Area_List_5GS(Broadcast_Empty_Area_List_5GS & d) {
    index = 16;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Empty_Area_List_5GS *sbcap_PDU::get_Broadcast_Empty_Area_List_5GS() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 16 && !constant)
#else
    if (index == 16)
#endif
	return (Broadcast_Empty_Area_List_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_Cause(Cause & d) {
    index = 17;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Cause *sbcap_PDU::get_Cause() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 17 && !constant)
#else
    if (index == 17)
#endif
	return (Cause *)data;
    else
	return 0;
}

void sbcap_PDU::set_Concurrent_Warning_Message_Indicator(Concurrent_Warning_Message_Indicator & d) {
    index = 18;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Concurrent_Warning_Message_Indicator *sbcap_PDU::get_Concurrent_Warning_Message_Indicator() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 18 && !constant)
#else
    if (index == 18)
#endif
	return (Concurrent_Warning_Message_Indicator *)data;
    else
	return 0;
}

void sbcap_PDU::set_Criticality_Diagnostics(Criticality_Diagnostics & d) {
    index = 19;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Criticality_Diagnostics *sbcap_PDU::get_Criticality_Diagnostics() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 19 && !constant)
#else
    if (index == 19)
#endif
	return (Criticality_Diagnostics *)data;
    else
	return 0;
}

void sbcap_PDU::set_Data_Coding_Scheme(Data_Coding_Scheme & d) {
    index = 20;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Data_Coding_Scheme *sbcap_PDU::get_Data_Coding_Scheme() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 20 && !constant)
#else
    if (index == 20)
#endif
	return (Data_Coding_Scheme *)data;
    else
	return 0;
}

void sbcap_PDU::set_Extended_Repetition_Period(Extended_Repetition_Period & d) {
    index = 21;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Extended_Repetition_Period *sbcap_PDU::get_Extended_Repetition_Period() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 21 && !constant)
#else
    if (index == 21)
#endif
	return (Extended_Repetition_Period *)data;
    else
	return 0;
}

void sbcap_PDU::set_Failed_Cell_List(Failed_Cell_List & d) {
    index = 22;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Failed_Cell_List *sbcap_PDU::get_Failed_Cell_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 22 && !constant)
#else
    if (index == 22)
#endif
	return (Failed_Cell_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_Failed_Cell_List_NR(Failed_Cell_List_NR & d) {
    index = 23;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Failed_Cell_List_NR *sbcap_PDU::get_Failed_Cell_List_NR() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 23 && !constant)
#else
    if (index == 23)
#endif
	return (Failed_Cell_List_NR *)data;
    else
	return 0;
}

void sbcap_PDU::set_Global_ENB_ID(Global_ENB_ID & d) {
    index = 24;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Global_ENB_ID *sbcap_PDU::get_Global_ENB_ID() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 24 && !constant)
#else
    if (index == 24)
#endif
	return (Global_ENB_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_Global_RAN_Node_ID(Global_RAN_Node_ID & d) {
    index = 25;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Global_RAN_Node_ID *sbcap_PDU::get_Global_RAN_Node_ID() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 25 && !constant)
#else
    if (index == 25)
#endif
	return (Global_RAN_Node_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_Global_GNB_ID(Global_GNB_ID & d) {
    index = 26;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Global_GNB_ID *sbcap_PDU::get_Global_GNB_ID() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 26 && !constant)
#else
    if (index == 26)
#endif
	return (Global_GNB_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_List_of_TAIs(List_of_TAIs & d) {
    index = 27;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_TAIs *sbcap_PDU::get_List_of_TAIs() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 27 && !constant)
#else
    if (index == 27)
#endif
	return (List_of_TAIs *)data;
    else
	return 0;
}

void sbcap_PDU::set_List_of_TAIs_Restart(List_of_TAIs_Restart & d) {
    index = 28;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_TAIs_Restart *sbcap_PDU::get_List_of_TAIs_Restart() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 28 && !constant)
#else
    if (index == 28)
#endif
	return (List_of_TAIs_Restart *)data;
    else
	return 0;
}

void sbcap_PDU::set_List_of_EAIs_Restart(List_of_EAIs_Restart & d) {
    index = 29;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_EAIs_Restart *sbcap_PDU::get_List_of_EAIs_Restart() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 29 && !constant)
#else
    if (index == 29)
#endif
	return (List_of_EAIs_Restart *)data;
    else
	return 0;
}

void sbcap_PDU::set_List_of_5GS_TAIs(List_of_5GS_TAIs & d) {
    index = 30;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_5GS_TAIs *sbcap_PDU::get_List_of_5GS_TAIs() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 30 && !constant)
#else
    if (index == 30)
#endif
	return (List_of_5GS_TAIs *)data;
    else
	return 0;
}

void sbcap_PDU::set_List_of_5GS_Cells_for_Failure(List_of_5GS_Cells_for_Failure & d) {
    index = 31;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_5GS_Cells_for_Failure *sbcap_PDU::get_List_of_5GS_Cells_for_Failure() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 31 && !constant)
#else
    if (index == 31)
#endif
	return (List_of_5GS_Cells_for_Failure *)data;
    else
	return 0;
}

void sbcap_PDU::set_List_of_5GS_TAI_for_Restart(List_of_5GS_TAI_for_Restart & d) {
    index = 32;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_5GS_TAI_for_Restart *sbcap_PDU::get_List_of_5GS_TAI_for_Restart() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 32 && !constant)
#else
    if (index == 32)
#endif
	return (List_of_5GS_TAI_for_Restart *)data;
    else
	return 0;
}

void sbcap_PDU::set_Message_Identifier(Message_Identifier & d) {
    index = 33;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Message_Identifier *sbcap_PDU::get_Message_Identifier() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 33 && !constant)
#else
    if (index == 33)
#endif
	return (Message_Identifier *)data;
    else
	return 0;
}

void sbcap_PDU::set_Number_of_Broadcasts_Requested(Number_of_Broadcasts_Requested & d) {
    index = 34;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Number_of_Broadcasts_Requested *sbcap_PDU::get_Number_of_Broadcasts_Requested() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 34 && !constant)
#else
    if (index == 34)
#endif
	return (Number_of_Broadcasts_Requested *)data;
    else
	return 0;
}

void sbcap_PDU::set_NgENB_ID(NgENB_ID & d) {
    index = 35;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

NgENB_ID *sbcap_PDU::get_NgENB_ID() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 35 && !constant)
#else
    if (index == 35)
#endif
	return (NgENB_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_Omc_Id(Omc_Id & d) {
    index = 36;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Omc_Id *sbcap_PDU::get_Omc_Id() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 36 && !constant)
#else
    if (index == 36)
#endif
	return (Omc_Id *)data;
    else
	return 0;
}

void sbcap_PDU::set_Repetition_Period(Repetition_Period & d) {
    index = 37;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Repetition_Period *sbcap_PDU::get_Repetition_Period() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 37 && !constant)
#else
    if (index == 37)
#endif
	return (Repetition_Period *)data;
    else
	return 0;
}

void sbcap_PDU::set_Restarted_Cell_List(Restarted_Cell_List & d) {
    index = 38;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Restarted_Cell_List *sbcap_PDU::get_Restarted_Cell_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 38 && !constant)
#else
    if (index == 38)
#endif
	return (Restarted_Cell_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_RAT_Selector_5GS(RAT_Selector_5GS & d) {
    index = 39;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

RAT_Selector_5GS *sbcap_PDU::get_RAT_Selector_5GS() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 39 && !constant)
#else
    if (index == 39)
#endif
	return (RAT_Selector_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_Restarted_Cell_List_NR(Restarted_Cell_List_NR & d) {
    index = 40;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Restarted_Cell_List_NR *sbcap_PDU::get_Restarted_Cell_List_NR() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 40 && !constant)
#else
    if (index == 40)
#endif
	return (Restarted_Cell_List_NR *)data;
    else
	return 0;
}

void sbcap_PDU::set_Send_Write_Replace_Warning_Indication(Send_Write_Replace_Warning_Indication & d) {
    index = 41;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Send_Write_Replace_Warning_Indication *sbcap_PDU::get_Send_Write_Replace_Warning_Indication() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 41 && !constant)
#else
    if (index == 41)
#endif
	return (Send_Write_Replace_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_Send_Stop_Warning_Indication(Send_Stop_Warning_Indication & d) {
    index = 42;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Send_Stop_Warning_Indication *sbcap_PDU::get_Send_Stop_Warning_Indication() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 42 && !constant)
#else
    if (index == 42)
#endif
	return (Send_Stop_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_Serial_Number(Serial_Number & d) {
    index = 43;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Serial_Number *sbcap_PDU::get_Serial_Number() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 43 && !constant)
#else
    if (index == 43)
#endif
	return (Serial_Number *)data;
    else
	return 0;
}

void sbcap_PDU::set_Stop_All_Indicator(Stop_All_Indicator & d) {
    index = 44;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_All_Indicator *sbcap_PDU::get_Stop_All_Indicator() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 44 && !constant)
#else
    if (index == 44)
#endif
	return (Stop_All_Indicator *)data;
    else
	return 0;
}

void sbcap_PDU::set_Unknown_Tracking_Area_List(Unknown_Tracking_Area_List & d) {
    index = 45;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Unknown_Tracking_Area_List *sbcap_PDU::get_Unknown_Tracking_Area_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 45 && !constant)
#else
    if (index == 45)
#endif
	return (Unknown_Tracking_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_Unknown_5GS_Tracking_Area_List(Unknown_5GS_Tracking_Area_List & d) {
    index = 46;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Unknown_5GS_Tracking_Area_List *sbcap_PDU::get_Unknown_5GS_Tracking_Area_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 46 && !constant)
#else
    if (index == 46)
#endif
	return (Unknown_5GS_Tracking_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_Warning_Area_List(Warning_Area_List & d) {
    index = 47;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Area_List *sbcap_PDU::get_Warning_Area_List() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 47 && !constant)
#else
    if (index == 47)
#endif
	return (Warning_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_Warning_Message_Content(Warning_Message_Content & d) {
    index = 48;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Message_Content *sbcap_PDU::get_Warning_Message_Content() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 48 && !constant)
#else
    if (index == 48)
#endif
	return (Warning_Message_Content *)data;
    else
	return 0;
}

void sbcap_PDU::set_Warning_Area_Coordinates(Warning_Area_Coordinates & d) {
    index = 49;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Area_Coordinates *sbcap_PDU::get_Warning_Area_Coordinates() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 49 && !constant)
#else
    if (index == 49)
#endif
	return (Warning_Area_Coordinates *)data;
    else
	return 0;
}

void sbcap_PDU::set_Warning_Security_Information(Warning_Security_Information & d) {
    index = 50;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Security_Information *sbcap_PDU::get_Warning_Security_Information() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 50 && !constant)
#else
    if (index == 50)
#endif
	return (Warning_Security_Information *)data;
    else
	return 0;
}

void sbcap_PDU::set_Warning_Type(Warning_Type & d) {
    index = 51;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Type *sbcap_PDU::get_Warning_Type() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 51 && !constant)
#else
    if (index == 51)
#endif
	return (Warning_Type *)data;
    else
	return 0;
}

void sbcap_PDU::set_Warning_Area_List_5GS(Warning_Area_List_5GS & d) {
    index = 52;
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Area_List_5GS *sbcap_PDU::get_Warning_Area_List_5GS() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (index == 52 && !constant)
#else
    if (index == 52)
#endif
	return (Warning_Area_List_5GS *)data;
    else
	return 0;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
void sbcap_PDU::set_const_SBC_AP_PDU(const SBC_AP_PDU & d) {
    index = 1;
    data = (void *)&d;
    constant = 1;
}

const SBC_AP_PDU *sbcap_PDU::get_const_SBC_AP_PDU() const {
    if (index == 1)
	return (const SBC_AP_PDU *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Write_Replace_Warning_Request(const Write_Replace_Warning_Request & d) {
    index = 2;
    data = (void *)&d;
    constant = 1;
}

const Write_Replace_Warning_Request *sbcap_PDU::get_const_Write_Replace_Warning_Request() const {
    if (index == 2)
	return (const Write_Replace_Warning_Request *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Write_Replace_Warning_Response(const Write_Replace_Warning_Response & d) {
    index = 3;
    data = (void *)&d;
    constant = 1;
}

const Write_Replace_Warning_Response *sbcap_PDU::get_const_Write_Replace_Warning_Response() const {
    if (index == 3)
	return (const Write_Replace_Warning_Response *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Stop_Warning_Request(const Stop_Warning_Request & d) {
    index = 4;
    data = (void *)&d;
    constant = 1;
}

const Stop_Warning_Request *sbcap_PDU::get_const_Stop_Warning_Request() const {
    if (index == 4)
	return (const Stop_Warning_Request *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Stop_Warning_Response(const Stop_Warning_Response & d) {
    index = 5;
    data = (void *)&d;
    constant = 1;
}

const Stop_Warning_Response *sbcap_PDU::get_const_Stop_Warning_Response() const {
    if (index == 5)
	return (const Stop_Warning_Response *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Write_Replace_Warning_Indication(const Write_Replace_Warning_Indication & d) {
    index = 6;
    data = (void *)&d;
    constant = 1;
}

const Write_Replace_Warning_Indication *sbcap_PDU::get_const_Write_Replace_Warning_Indication() const {
    if (index == 6)
	return (const Write_Replace_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Stop_Warning_Indication(const Stop_Warning_Indication & d) {
    index = 7;
    data = (void *)&d;
    constant = 1;
}

const Stop_Warning_Indication *sbcap_PDU::get_const_Stop_Warning_Indication() const {
    if (index == 7)
	return (const Stop_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_PWS_Restart_Indication(const PWS_Restart_Indication & d) {
    index = 8;
    data = (void *)&d;
    constant = 1;
}

const PWS_Restart_Indication *sbcap_PDU::get_const_PWS_Restart_Indication() const {
    if (index == 8)
	return (const PWS_Restart_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_PWS_Failure_Indication(const PWS_Failure_Indication & d) {
    index = 9;
    data = (void *)&d;
    constant = 1;
}

const PWS_Failure_Indication *sbcap_PDU::get_const_PWS_Failure_Indication() const {
    if (index == 9)
	return (const PWS_Failure_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Error_Indication(const Error_Indication & d) {
    index = 10;
    data = (void *)&d;
    constant = 1;
}

const Error_Indication *sbcap_PDU::get_const_Error_Indication() const {
    if (index == 10)
	return (const Error_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Broadcast_Scheduled_Area_List(const Broadcast_Scheduled_Area_List & d) {
    index = 11;
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Scheduled_Area_List *sbcap_PDU::get_const_Broadcast_Scheduled_Area_List() const {
    if (index == 11)
	return (const Broadcast_Scheduled_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Broadcast_Scheduled_Area_List_5GS(const Broadcast_Scheduled_Area_List_5GS & d) {
    index = 12;
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Scheduled_Area_List_5GS *sbcap_PDU::get_const_Broadcast_Scheduled_Area_List_5GS() const {
    if (index == 12)
	return (const Broadcast_Scheduled_Area_List_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Broadcast_Cancelled_Area_List(const Broadcast_Cancelled_Area_List & d) {
    index = 13;
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Cancelled_Area_List *sbcap_PDU::get_const_Broadcast_Cancelled_Area_List() const {
    if (index == 13)
	return (const Broadcast_Cancelled_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Broadcast_Cancelled_Area_List_5GS(const Broadcast_Cancelled_Area_List_5GS & d) {
    index = 14;
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Cancelled_Area_List_5GS *sbcap_PDU::get_const_Broadcast_Cancelled_Area_List_5GS() const {
    if (index == 14)
	return (const Broadcast_Cancelled_Area_List_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Broadcast_Empty_Area_List(const Broadcast_Empty_Area_List & d) {
    index = 15;
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Empty_Area_List *sbcap_PDU::get_const_Broadcast_Empty_Area_List() const {
    if (index == 15)
	return (const Broadcast_Empty_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Broadcast_Empty_Area_List_5GS(const Broadcast_Empty_Area_List_5GS & d) {
    index = 16;
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Empty_Area_List_5GS *sbcap_PDU::get_const_Broadcast_Empty_Area_List_5GS() const {
    if (index == 16)
	return (const Broadcast_Empty_Area_List_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Cause(const Cause & d) {
    index = 17;
    data = (void *)&d;
    constant = 1;
}

const Cause *sbcap_PDU::get_const_Cause() const {
    if (index == 17)
	return (const Cause *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Concurrent_Warning_Message_Indicator(const Concurrent_Warning_Message_Indicator & d) {
    index = 18;
    data = (void *)&d;
    constant = 1;
}

const Concurrent_Warning_Message_Indicator *sbcap_PDU::get_const_Concurrent_Warning_Message_Indicator() const {
    if (index == 18)
	return (const Concurrent_Warning_Message_Indicator *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Criticality_Diagnostics(const Criticality_Diagnostics & d) {
    index = 19;
    data = (void *)&d;
    constant = 1;
}

const Criticality_Diagnostics *sbcap_PDU::get_const_Criticality_Diagnostics() const {
    if (index == 19)
	return (const Criticality_Diagnostics *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Data_Coding_Scheme(const Data_Coding_Scheme & d) {
    index = 20;
    data = (void *)&d;
    constant = 1;
}

const Data_Coding_Scheme *sbcap_PDU::get_const_Data_Coding_Scheme() const {
    if (index == 20)
	return (const Data_Coding_Scheme *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Extended_Repetition_Period(const Extended_Repetition_Period & d) {
    index = 21;
    data = (void *)&d;
    constant = 1;
}

const Extended_Repetition_Period *sbcap_PDU::get_const_Extended_Repetition_Period() const {
    if (index == 21)
	return (const Extended_Repetition_Period *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Failed_Cell_List(const Failed_Cell_List & d) {
    index = 22;
    data = (void *)&d;
    constant = 1;
}

const Failed_Cell_List *sbcap_PDU::get_const_Failed_Cell_List() const {
    if (index == 22)
	return (const Failed_Cell_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Failed_Cell_List_NR(const Failed_Cell_List_NR & d) {
    index = 23;
    data = (void *)&d;
    constant = 1;
}

const Failed_Cell_List_NR *sbcap_PDU::get_const_Failed_Cell_List_NR() const {
    if (index == 23)
	return (const Failed_Cell_List_NR *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Global_ENB_ID(const Global_ENB_ID & d) {
    index = 24;
    data = (void *)&d;
    constant = 1;
}

const Global_ENB_ID *sbcap_PDU::get_const_Global_ENB_ID() const {
    if (index == 24)
	return (const Global_ENB_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Global_RAN_Node_ID(const Global_RAN_Node_ID & d) {
    index = 25;
    data = (void *)&d;
    constant = 1;
}

const Global_RAN_Node_ID *sbcap_PDU::get_const_Global_RAN_Node_ID() const {
    if (index == 25)
	return (const Global_RAN_Node_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Global_GNB_ID(const Global_GNB_ID & d) {
    index = 26;
    data = (void *)&d;
    constant = 1;
}

const Global_GNB_ID *sbcap_PDU::get_const_Global_GNB_ID() const {
    if (index == 26)
	return (const Global_GNB_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_List_of_TAIs(const List_of_TAIs & d) {
    index = 27;
    data = (void *)&d;
    constant = 1;
}

const List_of_TAIs *sbcap_PDU::get_const_List_of_TAIs() const {
    if (index == 27)
	return (const List_of_TAIs *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_List_of_TAIs_Restart(const List_of_TAIs_Restart & d) {
    index = 28;
    data = (void *)&d;
    constant = 1;
}

const List_of_TAIs_Restart *sbcap_PDU::get_const_List_of_TAIs_Restart() const {
    if (index == 28)
	return (const List_of_TAIs_Restart *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_List_of_EAIs_Restart(const List_of_EAIs_Restart & d) {
    index = 29;
    data = (void *)&d;
    constant = 1;
}

const List_of_EAIs_Restart *sbcap_PDU::get_const_List_of_EAIs_Restart() const {
    if (index == 29)
	return (const List_of_EAIs_Restart *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_List_of_5GS_TAIs(const List_of_5GS_TAIs & d) {
    index = 30;
    data = (void *)&d;
    constant = 1;
}

const List_of_5GS_TAIs *sbcap_PDU::get_const_List_of_5GS_TAIs() const {
    if (index == 30)
	return (const List_of_5GS_TAIs *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_List_of_5GS_Cells_for_Failure(const List_of_5GS_Cells_for_Failure & d) {
    index = 31;
    data = (void *)&d;
    constant = 1;
}

const List_of_5GS_Cells_for_Failure *sbcap_PDU::get_const_List_of_5GS_Cells_for_Failure() const {
    if (index == 31)
	return (const List_of_5GS_Cells_for_Failure *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_List_of_5GS_TAI_for_Restart(const List_of_5GS_TAI_for_Restart & d) {
    index = 32;
    data = (void *)&d;
    constant = 1;
}

const List_of_5GS_TAI_for_Restart *sbcap_PDU::get_const_List_of_5GS_TAI_for_Restart() const {
    if (index == 32)
	return (const List_of_5GS_TAI_for_Restart *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Message_Identifier(const Message_Identifier & d) {
    index = 33;
    data = (void *)&d;
    constant = 1;
}

const Message_Identifier *sbcap_PDU::get_const_Message_Identifier() const {
    if (index == 33)
	return (const Message_Identifier *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Number_of_Broadcasts_Requested(const Number_of_Broadcasts_Requested & d) {
    index = 34;
    data = (void *)&d;
    constant = 1;
}

const Number_of_Broadcasts_Requested *sbcap_PDU::get_const_Number_of_Broadcasts_Requested() const {
    if (index == 34)
	return (const Number_of_Broadcasts_Requested *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_NgENB_ID(const NgENB_ID & d) {
    index = 35;
    data = (void *)&d;
    constant = 1;
}

const NgENB_ID *sbcap_PDU::get_const_NgENB_ID() const {
    if (index == 35)
	return (const NgENB_ID *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Omc_Id(const Omc_Id & d) {
    index = 36;
    data = (void *)&d;
    constant = 1;
}

const Omc_Id *sbcap_PDU::get_const_Omc_Id() const {
    if (index == 36)
	return (const Omc_Id *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Repetition_Period(const Repetition_Period & d) {
    index = 37;
    data = (void *)&d;
    constant = 1;
}

const Repetition_Period *sbcap_PDU::get_const_Repetition_Period() const {
    if (index == 37)
	return (const Repetition_Period *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Restarted_Cell_List(const Restarted_Cell_List & d) {
    index = 38;
    data = (void *)&d;
    constant = 1;
}

const Restarted_Cell_List *sbcap_PDU::get_const_Restarted_Cell_List() const {
    if (index == 38)
	return (const Restarted_Cell_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_RAT_Selector_5GS(const RAT_Selector_5GS & d) {
    index = 39;
    data = (void *)&d;
    constant = 1;
}

const RAT_Selector_5GS *sbcap_PDU::get_const_RAT_Selector_5GS() const {
    if (index == 39)
	return (const RAT_Selector_5GS *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Restarted_Cell_List_NR(const Restarted_Cell_List_NR & d) {
    index = 40;
    data = (void *)&d;
    constant = 1;
}

const Restarted_Cell_List_NR *sbcap_PDU::get_const_Restarted_Cell_List_NR() const {
    if (index == 40)
	return (const Restarted_Cell_List_NR *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Send_Write_Replace_Warning_Indication(const Send_Write_Replace_Warning_Indication & d) {
    index = 41;
    data = (void *)&d;
    constant = 1;
}

const Send_Write_Replace_Warning_Indication *sbcap_PDU::get_const_Send_Write_Replace_Warning_Indication() const {
    if (index == 41)
	return (const Send_Write_Replace_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Send_Stop_Warning_Indication(const Send_Stop_Warning_Indication & d) {
    index = 42;
    data = (void *)&d;
    constant = 1;
}

const Send_Stop_Warning_Indication *sbcap_PDU::get_const_Send_Stop_Warning_Indication() const {
    if (index == 42)
	return (const Send_Stop_Warning_Indication *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Serial_Number(const Serial_Number & d) {
    index = 43;
    data = (void *)&d;
    constant = 1;
}

const Serial_Number *sbcap_PDU::get_const_Serial_Number() const {
    if (index == 43)
	return (const Serial_Number *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Stop_All_Indicator(const Stop_All_Indicator & d) {
    index = 44;
    data = (void *)&d;
    constant = 1;
}

const Stop_All_Indicator *sbcap_PDU::get_const_Stop_All_Indicator() const {
    if (index == 44)
	return (const Stop_All_Indicator *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Unknown_Tracking_Area_List(const Unknown_Tracking_Area_List & d) {
    index = 45;
    data = (void *)&d;
    constant = 1;
}

const Unknown_Tracking_Area_List *sbcap_PDU::get_const_Unknown_Tracking_Area_List() const {
    if (index == 45)
	return (const Unknown_Tracking_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Unknown_5GS_Tracking_Area_List(const Unknown_5GS_Tracking_Area_List & d) {
    index = 46;
    data = (void *)&d;
    constant = 1;
}

const Unknown_5GS_Tracking_Area_List *sbcap_PDU::get_const_Unknown_5GS_Tracking_Area_List() const {
    if (index == 46)
	return (const Unknown_5GS_Tracking_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Warning_Area_List(const Warning_Area_List & d) {
    index = 47;
    data = (void *)&d;
    constant = 1;
}

const Warning_Area_List *sbcap_PDU::get_const_Warning_Area_List() const {
    if (index == 47)
	return (const Warning_Area_List *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Warning_Message_Content(const Warning_Message_Content & d) {
    index = 48;
    data = (void *)&d;
    constant = 1;
}

const Warning_Message_Content *sbcap_PDU::get_const_Warning_Message_Content() const {
    if (index == 48)
	return (const Warning_Message_Content *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Warning_Area_Coordinates(const Warning_Area_Coordinates & d) {
    index = 49;
    data = (void *)&d;
    constant = 1;
}

const Warning_Area_Coordinates *sbcap_PDU::get_const_Warning_Area_Coordinates() const {
    if (index == 49)
	return (const Warning_Area_Coordinates *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Warning_Security_Information(const Warning_Security_Information & d) {
    index = 50;
    data = (void *)&d;
    constant = 1;
}

const Warning_Security_Information *sbcap_PDU::get_const_Warning_Security_Information() const {
    if (index == 50)
	return (const Warning_Security_Information *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Warning_Type(const Warning_Type & d) {
    index = 51;
    data = (void *)&d;
    constant = 1;
}

const Warning_Type *sbcap_PDU::get_const_Warning_Type() const {
    if (index == 51)
	return (const Warning_Type *)data;
    else
	return 0;
}

void sbcap_PDU::set_const_Warning_Area_List_5GS(const Warning_Area_List_5GS & d) {
    index = 52;
    data = (void *)&d;
    constant = 1;
}

const Warning_Area_List_5GS *sbcap_PDU::get_const_Warning_Area_List_5GS() const {
    if (index == 52)
	return (const Warning_Area_List_5GS *)data;
    else
	return 0;
}

#endif
/* Specific PDU classes */

SBC_AP_PDU_PDU::SBC_AP_PDU_PDU() {
}

void SBC_AP_PDU_PDU::set_data(SBC_AP_PDU & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

SBC_AP_PDU *SBC_AP_PDU_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (SBC_AP_PDU *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void SBC_AP_PDU_PDU::set_const_data(const SBC_AP_PDU & d) {
    data = (void *)&d;
    constant = 1;
}

const SBC_AP_PDU *SBC_AP_PDU_PDU::get_const_data() const {
    return (const SBC_AP_PDU *)data;
}

#endif

OssTypeIndex SBC_AP_PDU_PDU::get_index() const {
    return 1;
}

Write_Replace_Warning_Request_PDU::Write_Replace_Warning_Request_PDU() {
}

void Write_Replace_Warning_Request_PDU::set_data(Write_Replace_Warning_Request & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Write_Replace_Warning_Request *Write_Replace_Warning_Request_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Write_Replace_Warning_Request *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Write_Replace_Warning_Request_PDU::set_const_data(const Write_Replace_Warning_Request & d) {
    data = (void *)&d;
    constant = 1;
}

const Write_Replace_Warning_Request *Write_Replace_Warning_Request_PDU::get_const_data() const {
    return (const Write_Replace_Warning_Request *)data;
}

#endif

OssTypeIndex Write_Replace_Warning_Request_PDU::get_index() const {
    return 2;
}

Write_Replace_Warning_Response_PDU::Write_Replace_Warning_Response_PDU() {
}

void Write_Replace_Warning_Response_PDU::set_data(Write_Replace_Warning_Response & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Write_Replace_Warning_Response *Write_Replace_Warning_Response_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Write_Replace_Warning_Response *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Write_Replace_Warning_Response_PDU::set_const_data(const Write_Replace_Warning_Response & d) {
    data = (void *)&d;
    constant = 1;
}

const Write_Replace_Warning_Response *Write_Replace_Warning_Response_PDU::get_const_data() const {
    return (const Write_Replace_Warning_Response *)data;
}

#endif

OssTypeIndex Write_Replace_Warning_Response_PDU::get_index() const {
    return 3;
}

Stop_Warning_Request_PDU::Stop_Warning_Request_PDU() {
}

void Stop_Warning_Request_PDU::set_data(Stop_Warning_Request & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_Warning_Request *Stop_Warning_Request_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Stop_Warning_Request *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Stop_Warning_Request_PDU::set_const_data(const Stop_Warning_Request & d) {
    data = (void *)&d;
    constant = 1;
}

const Stop_Warning_Request *Stop_Warning_Request_PDU::get_const_data() const {
    return (const Stop_Warning_Request *)data;
}

#endif

OssTypeIndex Stop_Warning_Request_PDU::get_index() const {
    return 4;
}

Stop_Warning_Response_PDU::Stop_Warning_Response_PDU() {
}

void Stop_Warning_Response_PDU::set_data(Stop_Warning_Response & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_Warning_Response *Stop_Warning_Response_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Stop_Warning_Response *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Stop_Warning_Response_PDU::set_const_data(const Stop_Warning_Response & d) {
    data = (void *)&d;
    constant = 1;
}

const Stop_Warning_Response *Stop_Warning_Response_PDU::get_const_data() const {
    return (const Stop_Warning_Response *)data;
}

#endif

OssTypeIndex Stop_Warning_Response_PDU::get_index() const {
    return 5;
}

Write_Replace_Warning_Indication_PDU::Write_Replace_Warning_Indication_PDU() {
}

void Write_Replace_Warning_Indication_PDU::set_data(Write_Replace_Warning_Indication & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Write_Replace_Warning_Indication *Write_Replace_Warning_Indication_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Write_Replace_Warning_Indication *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Write_Replace_Warning_Indication_PDU::set_const_data(const Write_Replace_Warning_Indication & d) {
    data = (void *)&d;
    constant = 1;
}

const Write_Replace_Warning_Indication *Write_Replace_Warning_Indication_PDU::get_const_data() const {
    return (const Write_Replace_Warning_Indication *)data;
}

#endif

OssTypeIndex Write_Replace_Warning_Indication_PDU::get_index() const {
    return 6;
}

Stop_Warning_Indication_PDU::Stop_Warning_Indication_PDU() {
}

void Stop_Warning_Indication_PDU::set_data(Stop_Warning_Indication & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_Warning_Indication *Stop_Warning_Indication_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Stop_Warning_Indication *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Stop_Warning_Indication_PDU::set_const_data(const Stop_Warning_Indication & d) {
    data = (void *)&d;
    constant = 1;
}

const Stop_Warning_Indication *Stop_Warning_Indication_PDU::get_const_data() const {
    return (const Stop_Warning_Indication *)data;
}

#endif

OssTypeIndex Stop_Warning_Indication_PDU::get_index() const {
    return 7;
}

PWS_Restart_Indication_PDU::PWS_Restart_Indication_PDU() {
}

void PWS_Restart_Indication_PDU::set_data(PWS_Restart_Indication & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PWS_Restart_Indication *PWS_Restart_Indication_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (PWS_Restart_Indication *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void PWS_Restart_Indication_PDU::set_const_data(const PWS_Restart_Indication & d) {
    data = (void *)&d;
    constant = 1;
}

const PWS_Restart_Indication *PWS_Restart_Indication_PDU::get_const_data() const {
    return (const PWS_Restart_Indication *)data;
}

#endif

OssTypeIndex PWS_Restart_Indication_PDU::get_index() const {
    return 8;
}

PWS_Failure_Indication_PDU::PWS_Failure_Indication_PDU() {
}

void PWS_Failure_Indication_PDU::set_data(PWS_Failure_Indication & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

PWS_Failure_Indication *PWS_Failure_Indication_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (PWS_Failure_Indication *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void PWS_Failure_Indication_PDU::set_const_data(const PWS_Failure_Indication & d) {
    data = (void *)&d;
    constant = 1;
}

const PWS_Failure_Indication *PWS_Failure_Indication_PDU::get_const_data() const {
    return (const PWS_Failure_Indication *)data;
}

#endif

OssTypeIndex PWS_Failure_Indication_PDU::get_index() const {
    return 9;
}

Error_Indication_PDU::Error_Indication_PDU() {
}

void Error_Indication_PDU::set_data(Error_Indication & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Error_Indication *Error_Indication_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Error_Indication *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Error_Indication_PDU::set_const_data(const Error_Indication & d) {
    data = (void *)&d;
    constant = 1;
}

const Error_Indication *Error_Indication_PDU::get_const_data() const {
    return (const Error_Indication *)data;
}

#endif

OssTypeIndex Error_Indication_PDU::get_index() const {
    return 10;
}

Broadcast_Scheduled_Area_List_PDU::Broadcast_Scheduled_Area_List_PDU() {
}

void Broadcast_Scheduled_Area_List_PDU::set_data(Broadcast_Scheduled_Area_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Scheduled_Area_List *Broadcast_Scheduled_Area_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Broadcast_Scheduled_Area_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Broadcast_Scheduled_Area_List_PDU::set_const_data(const Broadcast_Scheduled_Area_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Scheduled_Area_List *Broadcast_Scheduled_Area_List_PDU::get_const_data() const {
    return (const Broadcast_Scheduled_Area_List *)data;
}

#endif

OssTypeIndex Broadcast_Scheduled_Area_List_PDU::get_index() const {
    return 11;
}

Broadcast_Scheduled_Area_List_5GS_PDU::Broadcast_Scheduled_Area_List_5GS_PDU() {
}

void Broadcast_Scheduled_Area_List_5GS_PDU::set_data(Broadcast_Scheduled_Area_List_5GS & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Scheduled_Area_List_5GS *Broadcast_Scheduled_Area_List_5GS_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Broadcast_Scheduled_Area_List_5GS *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Broadcast_Scheduled_Area_List_5GS_PDU::set_const_data(const Broadcast_Scheduled_Area_List_5GS & d) {
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Scheduled_Area_List_5GS *Broadcast_Scheduled_Area_List_5GS_PDU::get_const_data() const {
    return (const Broadcast_Scheduled_Area_List_5GS *)data;
}

#endif

OssTypeIndex Broadcast_Scheduled_Area_List_5GS_PDU::get_index() const {
    return 12;
}

Broadcast_Cancelled_Area_List_PDU::Broadcast_Cancelled_Area_List_PDU() {
}

void Broadcast_Cancelled_Area_List_PDU::set_data(Broadcast_Cancelled_Area_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Cancelled_Area_List *Broadcast_Cancelled_Area_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Broadcast_Cancelled_Area_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Broadcast_Cancelled_Area_List_PDU::set_const_data(const Broadcast_Cancelled_Area_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Cancelled_Area_List *Broadcast_Cancelled_Area_List_PDU::get_const_data() const {
    return (const Broadcast_Cancelled_Area_List *)data;
}

#endif

OssTypeIndex Broadcast_Cancelled_Area_List_PDU::get_index() const {
    return 13;
}

Broadcast_Cancelled_Area_List_5GS_PDU::Broadcast_Cancelled_Area_List_5GS_PDU() {
}

void Broadcast_Cancelled_Area_List_5GS_PDU::set_data(Broadcast_Cancelled_Area_List_5GS & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Cancelled_Area_List_5GS *Broadcast_Cancelled_Area_List_5GS_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Broadcast_Cancelled_Area_List_5GS *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Broadcast_Cancelled_Area_List_5GS_PDU::set_const_data(const Broadcast_Cancelled_Area_List_5GS & d) {
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Cancelled_Area_List_5GS *Broadcast_Cancelled_Area_List_5GS_PDU::get_const_data() const {
    return (const Broadcast_Cancelled_Area_List_5GS *)data;
}

#endif

OssTypeIndex Broadcast_Cancelled_Area_List_5GS_PDU::get_index() const {
    return 14;
}

Broadcast_Empty_Area_List_PDU::Broadcast_Empty_Area_List_PDU() {
}

void Broadcast_Empty_Area_List_PDU::set_data(Broadcast_Empty_Area_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Empty_Area_List *Broadcast_Empty_Area_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Broadcast_Empty_Area_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Broadcast_Empty_Area_List_PDU::set_const_data(const Broadcast_Empty_Area_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Empty_Area_List *Broadcast_Empty_Area_List_PDU::get_const_data() const {
    return (const Broadcast_Empty_Area_List *)data;
}

#endif

OssTypeIndex Broadcast_Empty_Area_List_PDU::get_index() const {
    return 15;
}

Broadcast_Empty_Area_List_5GS_PDU::Broadcast_Empty_Area_List_5GS_PDU() {
}

void Broadcast_Empty_Area_List_5GS_PDU::set_data(Broadcast_Empty_Area_List_5GS & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Broadcast_Empty_Area_List_5GS *Broadcast_Empty_Area_List_5GS_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Broadcast_Empty_Area_List_5GS *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Broadcast_Empty_Area_List_5GS_PDU::set_const_data(const Broadcast_Empty_Area_List_5GS & d) {
    data = (void *)&d;
    constant = 1;
}

const Broadcast_Empty_Area_List_5GS *Broadcast_Empty_Area_List_5GS_PDU::get_const_data() const {
    return (const Broadcast_Empty_Area_List_5GS *)data;
}

#endif

OssTypeIndex Broadcast_Empty_Area_List_5GS_PDU::get_index() const {
    return 16;
}

Cause_PDU::Cause_PDU() {
}

void Cause_PDU::set_data(Cause & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Cause *Cause_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Cause *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Cause_PDU::set_const_data(const Cause & d) {
    data = (void *)&d;
    constant = 1;
}

const Cause *Cause_PDU::get_const_data() const {
    return (const Cause *)data;
}

#endif

OssTypeIndex Cause_PDU::get_index() const {
    return 17;
}

Concurrent_Warning_Message_Indicator_PDU::Concurrent_Warning_Message_Indicator_PDU() {
}

void Concurrent_Warning_Message_Indicator_PDU::set_data(Concurrent_Warning_Message_Indicator & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Concurrent_Warning_Message_Indicator *Concurrent_Warning_Message_Indicator_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Concurrent_Warning_Message_Indicator *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Concurrent_Warning_Message_Indicator_PDU::set_const_data(const Concurrent_Warning_Message_Indicator & d) {
    data = (void *)&d;
    constant = 1;
}

const Concurrent_Warning_Message_Indicator *Concurrent_Warning_Message_Indicator_PDU::get_const_data() const {
    return (const Concurrent_Warning_Message_Indicator *)data;
}

#endif

OssTypeIndex Concurrent_Warning_Message_Indicator_PDU::get_index() const {
    return 18;
}

Criticality_Diagnostics_PDU::Criticality_Diagnostics_PDU() {
}

void Criticality_Diagnostics_PDU::set_data(Criticality_Diagnostics & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Criticality_Diagnostics *Criticality_Diagnostics_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Criticality_Diagnostics *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Criticality_Diagnostics_PDU::set_const_data(const Criticality_Diagnostics & d) {
    data = (void *)&d;
    constant = 1;
}

const Criticality_Diagnostics *Criticality_Diagnostics_PDU::get_const_data() const {
    return (const Criticality_Diagnostics *)data;
}

#endif

OssTypeIndex Criticality_Diagnostics_PDU::get_index() const {
    return 19;
}

Data_Coding_Scheme_PDU::Data_Coding_Scheme_PDU() {
}

void Data_Coding_Scheme_PDU::set_data(Data_Coding_Scheme & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Data_Coding_Scheme *Data_Coding_Scheme_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Data_Coding_Scheme *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Data_Coding_Scheme_PDU::set_const_data(const Data_Coding_Scheme & d) {
    data = (void *)&d;
    constant = 1;
}

const Data_Coding_Scheme *Data_Coding_Scheme_PDU::get_const_data() const {
    return (const Data_Coding_Scheme *)data;
}

#endif

OssTypeIndex Data_Coding_Scheme_PDU::get_index() const {
    return 20;
}

Extended_Repetition_Period_PDU::Extended_Repetition_Period_PDU() {
}

void Extended_Repetition_Period_PDU::set_data(Extended_Repetition_Period & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Extended_Repetition_Period *Extended_Repetition_Period_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Extended_Repetition_Period *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Extended_Repetition_Period_PDU::set_const_data(const Extended_Repetition_Period & d) {
    data = (void *)&d;
    constant = 1;
}

const Extended_Repetition_Period *Extended_Repetition_Period_PDU::get_const_data() const {
    return (const Extended_Repetition_Period *)data;
}

#endif

OssTypeIndex Extended_Repetition_Period_PDU::get_index() const {
    return 21;
}

Failed_Cell_List_PDU::Failed_Cell_List_PDU() {
}

void Failed_Cell_List_PDU::set_data(Failed_Cell_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Failed_Cell_List *Failed_Cell_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Failed_Cell_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Failed_Cell_List_PDU::set_const_data(const Failed_Cell_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Failed_Cell_List *Failed_Cell_List_PDU::get_const_data() const {
    return (const Failed_Cell_List *)data;
}

#endif

OssTypeIndex Failed_Cell_List_PDU::get_index() const {
    return 22;
}

Failed_Cell_List_NR_PDU::Failed_Cell_List_NR_PDU() {
}

void Failed_Cell_List_NR_PDU::set_data(Failed_Cell_List_NR & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Failed_Cell_List_NR *Failed_Cell_List_NR_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Failed_Cell_List_NR *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Failed_Cell_List_NR_PDU::set_const_data(const Failed_Cell_List_NR & d) {
    data = (void *)&d;
    constant = 1;
}

const Failed_Cell_List_NR *Failed_Cell_List_NR_PDU::get_const_data() const {
    return (const Failed_Cell_List_NR *)data;
}

#endif

OssTypeIndex Failed_Cell_List_NR_PDU::get_index() const {
    return 23;
}

Global_ENB_ID_PDU::Global_ENB_ID_PDU() {
}

void Global_ENB_ID_PDU::set_data(Global_ENB_ID & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Global_ENB_ID *Global_ENB_ID_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Global_ENB_ID *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Global_ENB_ID_PDU::set_const_data(const Global_ENB_ID & d) {
    data = (void *)&d;
    constant = 1;
}

const Global_ENB_ID *Global_ENB_ID_PDU::get_const_data() const {
    return (const Global_ENB_ID *)data;
}

#endif

OssTypeIndex Global_ENB_ID_PDU::get_index() const {
    return 24;
}

Global_RAN_Node_ID_PDU::Global_RAN_Node_ID_PDU() {
}

void Global_RAN_Node_ID_PDU::set_data(Global_RAN_Node_ID & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Global_RAN_Node_ID *Global_RAN_Node_ID_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Global_RAN_Node_ID *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Global_RAN_Node_ID_PDU::set_const_data(const Global_RAN_Node_ID & d) {
    data = (void *)&d;
    constant = 1;
}

const Global_RAN_Node_ID *Global_RAN_Node_ID_PDU::get_const_data() const {
    return (const Global_RAN_Node_ID *)data;
}

#endif

OssTypeIndex Global_RAN_Node_ID_PDU::get_index() const {
    return 25;
}

Global_GNB_ID_PDU::Global_GNB_ID_PDU() {
}

void Global_GNB_ID_PDU::set_data(Global_GNB_ID & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Global_GNB_ID *Global_GNB_ID_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Global_GNB_ID *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Global_GNB_ID_PDU::set_const_data(const Global_GNB_ID & d) {
    data = (void *)&d;
    constant = 1;
}

const Global_GNB_ID *Global_GNB_ID_PDU::get_const_data() const {
    return (const Global_GNB_ID *)data;
}

#endif

OssTypeIndex Global_GNB_ID_PDU::get_index() const {
    return 26;
}

List_of_TAIs_PDU::List_of_TAIs_PDU() {
}

void List_of_TAIs_PDU::set_data(List_of_TAIs & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_TAIs *List_of_TAIs_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (List_of_TAIs *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void List_of_TAIs_PDU::set_const_data(const List_of_TAIs & d) {
    data = (void *)&d;
    constant = 1;
}

const List_of_TAIs *List_of_TAIs_PDU::get_const_data() const {
    return (const List_of_TAIs *)data;
}

#endif

OssTypeIndex List_of_TAIs_PDU::get_index() const {
    return 27;
}

List_of_TAIs_Restart_PDU::List_of_TAIs_Restart_PDU() {
}

void List_of_TAIs_Restart_PDU::set_data(List_of_TAIs_Restart & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_TAIs_Restart *List_of_TAIs_Restart_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (List_of_TAIs_Restart *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void List_of_TAIs_Restart_PDU::set_const_data(const List_of_TAIs_Restart & d) {
    data = (void *)&d;
    constant = 1;
}

const List_of_TAIs_Restart *List_of_TAIs_Restart_PDU::get_const_data() const {
    return (const List_of_TAIs_Restart *)data;
}

#endif

OssTypeIndex List_of_TAIs_Restart_PDU::get_index() const {
    return 28;
}

List_of_EAIs_Restart_PDU::List_of_EAIs_Restart_PDU() {
}

void List_of_EAIs_Restart_PDU::set_data(List_of_EAIs_Restart & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_EAIs_Restart *List_of_EAIs_Restart_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (List_of_EAIs_Restart *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void List_of_EAIs_Restart_PDU::set_const_data(const List_of_EAIs_Restart & d) {
    data = (void *)&d;
    constant = 1;
}

const List_of_EAIs_Restart *List_of_EAIs_Restart_PDU::get_const_data() const {
    return (const List_of_EAIs_Restart *)data;
}

#endif

OssTypeIndex List_of_EAIs_Restart_PDU::get_index() const {
    return 29;
}

List_of_5GS_TAIs_PDU::List_of_5GS_TAIs_PDU() {
}

void List_of_5GS_TAIs_PDU::set_data(List_of_5GS_TAIs & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_5GS_TAIs *List_of_5GS_TAIs_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (List_of_5GS_TAIs *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void List_of_5GS_TAIs_PDU::set_const_data(const List_of_5GS_TAIs & d) {
    data = (void *)&d;
    constant = 1;
}

const List_of_5GS_TAIs *List_of_5GS_TAIs_PDU::get_const_data() const {
    return (const List_of_5GS_TAIs *)data;
}

#endif

OssTypeIndex List_of_5GS_TAIs_PDU::get_index() const {
    return 30;
}

List_of_5GS_Cells_for_Failure_PDU::List_of_5GS_Cells_for_Failure_PDU() {
}

void List_of_5GS_Cells_for_Failure_PDU::set_data(List_of_5GS_Cells_for_Failure & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_5GS_Cells_for_Failure *List_of_5GS_Cells_for_Failure_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (List_of_5GS_Cells_for_Failure *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void List_of_5GS_Cells_for_Failure_PDU::set_const_data(const List_of_5GS_Cells_for_Failure & d) {
    data = (void *)&d;
    constant = 1;
}

const List_of_5GS_Cells_for_Failure *List_of_5GS_Cells_for_Failure_PDU::get_const_data() const {
    return (const List_of_5GS_Cells_for_Failure *)data;
}

#endif

OssTypeIndex List_of_5GS_Cells_for_Failure_PDU::get_index() const {
    return 31;
}

List_of_5GS_TAI_for_Restart_PDU::List_of_5GS_TAI_for_Restart_PDU() {
}

void List_of_5GS_TAI_for_Restart_PDU::set_data(List_of_5GS_TAI_for_Restart & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

List_of_5GS_TAI_for_Restart *List_of_5GS_TAI_for_Restart_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (List_of_5GS_TAI_for_Restart *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void List_of_5GS_TAI_for_Restart_PDU::set_const_data(const List_of_5GS_TAI_for_Restart & d) {
    data = (void *)&d;
    constant = 1;
}

const List_of_5GS_TAI_for_Restart *List_of_5GS_TAI_for_Restart_PDU::get_const_data() const {
    return (const List_of_5GS_TAI_for_Restart *)data;
}

#endif

OssTypeIndex List_of_5GS_TAI_for_Restart_PDU::get_index() const {
    return 32;
}

Message_Identifier_PDU::Message_Identifier_PDU() {
}

void Message_Identifier_PDU::set_data(Message_Identifier & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Message_Identifier *Message_Identifier_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Message_Identifier *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Message_Identifier_PDU::set_const_data(const Message_Identifier & d) {
    data = (void *)&d;
    constant = 1;
}

const Message_Identifier *Message_Identifier_PDU::get_const_data() const {
    return (const Message_Identifier *)data;
}

#endif

OssTypeIndex Message_Identifier_PDU::get_index() const {
    return 33;
}

Number_of_Broadcasts_Requested_PDU::Number_of_Broadcasts_Requested_PDU() {
}

void Number_of_Broadcasts_Requested_PDU::set_data(Number_of_Broadcasts_Requested & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Number_of_Broadcasts_Requested *Number_of_Broadcasts_Requested_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Number_of_Broadcasts_Requested *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Number_of_Broadcasts_Requested_PDU::set_const_data(const Number_of_Broadcasts_Requested & d) {
    data = (void *)&d;
    constant = 1;
}

const Number_of_Broadcasts_Requested *Number_of_Broadcasts_Requested_PDU::get_const_data() const {
    return (const Number_of_Broadcasts_Requested *)data;
}

#endif

OssTypeIndex Number_of_Broadcasts_Requested_PDU::get_index() const {
    return 34;
}

NgENB_ID_PDU::NgENB_ID_PDU() {
}

void NgENB_ID_PDU::set_data(NgENB_ID & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

NgENB_ID *NgENB_ID_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (NgENB_ID *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void NgENB_ID_PDU::set_const_data(const NgENB_ID & d) {
    data = (void *)&d;
    constant = 1;
}

const NgENB_ID *NgENB_ID_PDU::get_const_data() const {
    return (const NgENB_ID *)data;
}

#endif

OssTypeIndex NgENB_ID_PDU::get_index() const {
    return 35;
}

Omc_Id_PDU::Omc_Id_PDU() {
}

void Omc_Id_PDU::set_data(Omc_Id & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Omc_Id *Omc_Id_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Omc_Id *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Omc_Id_PDU::set_const_data(const Omc_Id & d) {
    data = (void *)&d;
    constant = 1;
}

const Omc_Id *Omc_Id_PDU::get_const_data() const {
    return (const Omc_Id *)data;
}

#endif

OssTypeIndex Omc_Id_PDU::get_index() const {
    return 36;
}

Repetition_Period_PDU::Repetition_Period_PDU() {
}

void Repetition_Period_PDU::set_data(Repetition_Period & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Repetition_Period *Repetition_Period_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Repetition_Period *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Repetition_Period_PDU::set_const_data(const Repetition_Period & d) {
    data = (void *)&d;
    constant = 1;
}

const Repetition_Period *Repetition_Period_PDU::get_const_data() const {
    return (const Repetition_Period *)data;
}

#endif

OssTypeIndex Repetition_Period_PDU::get_index() const {
    return 37;
}

Restarted_Cell_List_PDU::Restarted_Cell_List_PDU() {
}

void Restarted_Cell_List_PDU::set_data(Restarted_Cell_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Restarted_Cell_List *Restarted_Cell_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Restarted_Cell_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Restarted_Cell_List_PDU::set_const_data(const Restarted_Cell_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Restarted_Cell_List *Restarted_Cell_List_PDU::get_const_data() const {
    return (const Restarted_Cell_List *)data;
}

#endif

OssTypeIndex Restarted_Cell_List_PDU::get_index() const {
    return 38;
}

RAT_Selector_5GS_PDU::RAT_Selector_5GS_PDU() {
}

void RAT_Selector_5GS_PDU::set_data(RAT_Selector_5GS & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

RAT_Selector_5GS *RAT_Selector_5GS_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (RAT_Selector_5GS *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void RAT_Selector_5GS_PDU::set_const_data(const RAT_Selector_5GS & d) {
    data = (void *)&d;
    constant = 1;
}

const RAT_Selector_5GS *RAT_Selector_5GS_PDU::get_const_data() const {
    return (const RAT_Selector_5GS *)data;
}

#endif

OssTypeIndex RAT_Selector_5GS_PDU::get_index() const {
    return 39;
}

Restarted_Cell_List_NR_PDU::Restarted_Cell_List_NR_PDU() {
}

void Restarted_Cell_List_NR_PDU::set_data(Restarted_Cell_List_NR & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Restarted_Cell_List_NR *Restarted_Cell_List_NR_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Restarted_Cell_List_NR *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Restarted_Cell_List_NR_PDU::set_const_data(const Restarted_Cell_List_NR & d) {
    data = (void *)&d;
    constant = 1;
}

const Restarted_Cell_List_NR *Restarted_Cell_List_NR_PDU::get_const_data() const {
    return (const Restarted_Cell_List_NR *)data;
}

#endif

OssTypeIndex Restarted_Cell_List_NR_PDU::get_index() const {
    return 40;
}

Send_Write_Replace_Warning_Indication_PDU::Send_Write_Replace_Warning_Indication_PDU() {
}

void Send_Write_Replace_Warning_Indication_PDU::set_data(Send_Write_Replace_Warning_Indication & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Send_Write_Replace_Warning_Indication *Send_Write_Replace_Warning_Indication_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Send_Write_Replace_Warning_Indication *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Send_Write_Replace_Warning_Indication_PDU::set_const_data(const Send_Write_Replace_Warning_Indication & d) {
    data = (void *)&d;
    constant = 1;
}

const Send_Write_Replace_Warning_Indication *Send_Write_Replace_Warning_Indication_PDU::get_const_data() const {
    return (const Send_Write_Replace_Warning_Indication *)data;
}

#endif

OssTypeIndex Send_Write_Replace_Warning_Indication_PDU::get_index() const {
    return 41;
}

Send_Stop_Warning_Indication_PDU::Send_Stop_Warning_Indication_PDU() {
}

void Send_Stop_Warning_Indication_PDU::set_data(Send_Stop_Warning_Indication & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Send_Stop_Warning_Indication *Send_Stop_Warning_Indication_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Send_Stop_Warning_Indication *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Send_Stop_Warning_Indication_PDU::set_const_data(const Send_Stop_Warning_Indication & d) {
    data = (void *)&d;
    constant = 1;
}

const Send_Stop_Warning_Indication *Send_Stop_Warning_Indication_PDU::get_const_data() const {
    return (const Send_Stop_Warning_Indication *)data;
}

#endif

OssTypeIndex Send_Stop_Warning_Indication_PDU::get_index() const {
    return 42;
}

Serial_Number_PDU::Serial_Number_PDU() {
}

void Serial_Number_PDU::set_data(Serial_Number & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Serial_Number *Serial_Number_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Serial_Number *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Serial_Number_PDU::set_const_data(const Serial_Number & d) {
    data = (void *)&d;
    constant = 1;
}

const Serial_Number *Serial_Number_PDU::get_const_data() const {
    return (const Serial_Number *)data;
}

#endif

OssTypeIndex Serial_Number_PDU::get_index() const {
    return 43;
}

Stop_All_Indicator_PDU::Stop_All_Indicator_PDU() {
}

void Stop_All_Indicator_PDU::set_data(Stop_All_Indicator & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Stop_All_Indicator *Stop_All_Indicator_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Stop_All_Indicator *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Stop_All_Indicator_PDU::set_const_data(const Stop_All_Indicator & d) {
    data = (void *)&d;
    constant = 1;
}

const Stop_All_Indicator *Stop_All_Indicator_PDU::get_const_data() const {
    return (const Stop_All_Indicator *)data;
}

#endif

OssTypeIndex Stop_All_Indicator_PDU::get_index() const {
    return 44;
}

Unknown_Tracking_Area_List_PDU::Unknown_Tracking_Area_List_PDU() {
}

void Unknown_Tracking_Area_List_PDU::set_data(Unknown_Tracking_Area_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Unknown_Tracking_Area_List *Unknown_Tracking_Area_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Unknown_Tracking_Area_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Unknown_Tracking_Area_List_PDU::set_const_data(const Unknown_Tracking_Area_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Unknown_Tracking_Area_List *Unknown_Tracking_Area_List_PDU::get_const_data() const {
    return (const Unknown_Tracking_Area_List *)data;
}

#endif

OssTypeIndex Unknown_Tracking_Area_List_PDU::get_index() const {
    return 45;
}

Unknown_5GS_Tracking_Area_List_PDU::Unknown_5GS_Tracking_Area_List_PDU() {
}

void Unknown_5GS_Tracking_Area_List_PDU::set_data(Unknown_5GS_Tracking_Area_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Unknown_5GS_Tracking_Area_List *Unknown_5GS_Tracking_Area_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Unknown_5GS_Tracking_Area_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Unknown_5GS_Tracking_Area_List_PDU::set_const_data(const Unknown_5GS_Tracking_Area_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Unknown_5GS_Tracking_Area_List *Unknown_5GS_Tracking_Area_List_PDU::get_const_data() const {
    return (const Unknown_5GS_Tracking_Area_List *)data;
}

#endif

OssTypeIndex Unknown_5GS_Tracking_Area_List_PDU::get_index() const {
    return 46;
}

Warning_Area_List_PDU::Warning_Area_List_PDU() {
}

void Warning_Area_List_PDU::set_data(Warning_Area_List & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Area_List *Warning_Area_List_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Warning_Area_List *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Warning_Area_List_PDU::set_const_data(const Warning_Area_List & d) {
    data = (void *)&d;
    constant = 1;
}

const Warning_Area_List *Warning_Area_List_PDU::get_const_data() const {
    return (const Warning_Area_List *)data;
}

#endif

OssTypeIndex Warning_Area_List_PDU::get_index() const {
    return 47;
}

Warning_Message_Content_PDU::Warning_Message_Content_PDU() {
}

void Warning_Message_Content_PDU::set_data(Warning_Message_Content & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Message_Content *Warning_Message_Content_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Warning_Message_Content *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Warning_Message_Content_PDU::set_const_data(const Warning_Message_Content & d) {
    data = (void *)&d;
    constant = 1;
}

const Warning_Message_Content *Warning_Message_Content_PDU::get_const_data() const {
    return (const Warning_Message_Content *)data;
}

#endif

OssTypeIndex Warning_Message_Content_PDU::get_index() const {
    return 48;
}

Warning_Area_Coordinates_PDU::Warning_Area_Coordinates_PDU() {
}

void Warning_Area_Coordinates_PDU::set_data(Warning_Area_Coordinates & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Area_Coordinates *Warning_Area_Coordinates_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Warning_Area_Coordinates *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Warning_Area_Coordinates_PDU::set_const_data(const Warning_Area_Coordinates & d) {
    data = (void *)&d;
    constant = 1;
}

const Warning_Area_Coordinates *Warning_Area_Coordinates_PDU::get_const_data() const {
    return (const Warning_Area_Coordinates *)data;
}

#endif

OssTypeIndex Warning_Area_Coordinates_PDU::get_index() const {
    return 49;
}

Warning_Security_Information_PDU::Warning_Security_Information_PDU() {
}

void Warning_Security_Information_PDU::set_data(Warning_Security_Information & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Security_Information *Warning_Security_Information_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Warning_Security_Information *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Warning_Security_Information_PDU::set_const_data(const Warning_Security_Information & d) {
    data = (void *)&d;
    constant = 1;
}

const Warning_Security_Information *Warning_Security_Information_PDU::get_const_data() const {
    return (const Warning_Security_Information *)data;
}

#endif

OssTypeIndex Warning_Security_Information_PDU::get_index() const {
    return 50;
}

Warning_Type_PDU::Warning_Type_PDU() {
}

void Warning_Type_PDU::set_data(Warning_Type & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Type *Warning_Type_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Warning_Type *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Warning_Type_PDU::set_const_data(const Warning_Type & d) {
    data = (void *)&d;
    constant = 1;
}

const Warning_Type *Warning_Type_PDU::get_const_data() const {
    return (const Warning_Type *)data;
}

#endif

OssTypeIndex Warning_Type_PDU::get_index() const {
    return 51;
}

Warning_Area_List_5GS_PDU::Warning_Area_List_5GS_PDU() {
}

void Warning_Area_List_5GS_PDU::set_data(Warning_Area_List_5GS & d) {
    data = &d;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    constant = 0;
#endif
}

Warning_Area_List_5GS *Warning_Area_List_5GS_PDU::get_data() const {
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    if (constant)
	return 0;
#endif
    return (Warning_Area_List_5GS *)data;
}

#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED

void Warning_Area_List_5GS_PDU::set_const_data(const Warning_Area_List_5GS & d) {
    data = (void *)&d;
    constant = 1;
}

const Warning_Area_List_5GS *Warning_Area_List_5GS_PDU::get_const_data() const {
    return (const Warning_Area_List_5GS *)data;
}

#endif

OssTypeIndex Warning_Area_List_5GS_PDU::get_index() const {
    return 52;
}

/* Control object class */

sbcap_Control::sbcap_Control() : OssControl(&sbcap_Table, sbcap_TableType::internal) {
}

sbcap_Control::sbcap_Control(const sbcap_Control & that) : OssControl(that) {
}

#if OSS_TOED_API_LEVEL < 40
#define OSS_MEMCPY(w, dest, dmax, src, slen)        memcpy(dest, src, (size_t)(slen))
#define OSS_MEMMOVE(w, dest, dmax, src, slen)       memmove(dest, src, (size_t)(slen))
#define OSS_MEMCMP(w, dest, dmax, src, slen, diff)  memcmp(dest, src, (size_t)(slen))
#define OSS_MEMSET(w, dest, dmax, value, n)         memset(dest, value, (size_t)(n))
#define OSS_STRCPY(w, dest, dmax, src)              strcpy(dest, src)
#define OSS_STRCMP(w, dest, dmax, src, ind)         strcmp(dest, src)
#define OSS_STRNCPY(w, dest, dmax, src, slen)       strncpy(dest, src, (size_t)(slen))
#define OSS_STRNLEN(dest, dmax)                     strlen(dest)
#define OSS_SPRINTF(w, s, n, format, ...)           sprintf(s, format, __VA_ARGS__)
#endif
#if OSS_TOED_API_LEVEL >= 32
#define OSS_DEF_VAR_ESE(st)             struct ossExtStackElement st;
#else
#define OSS_DEF_VAR_ESE(st)
#define _oss_begin_otype_or_ext(_g, st) _oss_fast_push_global(_g)
#define _oss_end_otype_or_ext(_g, st)   _oss_fast_pop_global(_g)
#endif

/* ASN.1 data initialization */
static enum Criticality _v0 = ignore;


struct _SBC_AP_ELEMENTARY_PROCEDURE {
    OSS_UINT32 bit_mask;
    unsigned short InitiatingMessage;
    unsigned short SuccessfulOutcome;
    unsigned short UnsuccessfulOutcome;
    OSS_UINT32 procedureCode;
    enum Criticality criticality;
};
static _SBC_AP_ELEMENTARY_PROCEDURE _v1 = {
    0x80000000 | 0x20000000,
    2,
    3,
    0,
    0,
    reject
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v2 = {
    0x80000000 | 0x20000000,
    4,
    5,
    0,
    1,
    reject
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v3 = {
    0x20000000,
    10,
    0,
    0,
    2,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v4 = {
    0x20000000,
    6,
    0,
    0,
    3,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v5 = {
    0x20000000,
    7,
    0,
    0,
    4,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v6 = {
    0x20000000,
    8,
    0,
    0,
    5,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v7 = {
    0x20000000,
    9,
    0,
    0,
    6,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v8 = {
    0x80000000 | 0x20000000,
    2,
    3,
    0,
    0,
    reject
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v9 = {
    0x80000000 | 0x20000000,
    4,
    5,
    0,
    1,
    reject
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v10 = {
    0x20000000,
    10,
    0,
    0,
    2,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v11 = {
    0x20000000,
    6,
    0,
    0,
    3,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v12 = {
    0x20000000,
    7,
    0,
    0,
    4,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v13 = {
    0x20000000,
    8,
    0,
    0,
    5,
    ignore
};

static _SBC_AP_ELEMENTARY_PROCEDURE _v14 = {
    0x20000000,
    9,
    0,
    0,
    6,
    ignore
};

static enum Criticality _v15 = ignore;


struct _SBC_AP_PROTOCOL_IES {
    OSS_UINT32 bit_mask;
    OSS_UINT32 id;
    enum Criticality criticality;
    unsigned short Value;
    enum Presence presence;
};
static _SBC_AP_PROTOCOL_IES _v16 = {
    0x80000000,
    5,
    reject,
    33,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v17 = {
    0x80000000,
    11,
    reject,
    43,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v18 = {
    0x80000000,
    14,
    reject,
    27,
    optional
};

static _SBC_AP_PROTOCOL_IES _v19 = {
    0x80000000,
    15,
    ignore,
    47,
    optional
};

static _SBC_AP_PROTOCOL_IES _v20 = {
    0x80000000,
    10,
    reject,
    37,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v21 = {
    0x80000000,
    21,
    reject,
    21,
    optional
};

static _SBC_AP_PROTOCOL_IES _v22 = {
    0x80000000,
    7,
    reject,
    34,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v23 = {
    0x80000000,
    18,
    ignore,
    51,
    optional
};

static _SBC_AP_PROTOCOL_IES _v24 = {
    0x80000000,
    17,
    ignore,
    50,
    optional
};

static _SBC_AP_PROTOCOL_IES _v25 = {
    0x80000000,
    3,
    ignore,
    20,
    optional
};

static _SBC_AP_PROTOCOL_IES _v26 = {
    0x80000000,
    16,
    ignore,
    48,
    optional
};

static _SBC_AP_PROTOCOL_IES _v27 = {
    0x80000000,
    19,
    ignore,
    36,
    optional
};

static _SBC_AP_PROTOCOL_IES _v28 = {
    0x80000000,
    20,
    reject,
    18,
    optional
};

static _SBC_AP_PROTOCOL_IES _v29 = {
    0x80000000,
    24,
    ignore,
    41,
    optional
};

static _SBC_AP_PROTOCOL_IES _v30 = {
    0x80000000,
    28,
    ignore,
    24,
    optional
};

static _SBC_AP_PROTOCOL_IES _v31 = {
    0x80000000,
    46,
    ignore,
    49,
    optional
};

static enum Criticality _v32 = ignore;


struct _SBC_AP_PROTOCOL_EXTENSION {
    OSS_UINT32 bit_mask;
    OSS_UINT32 id;
    enum Criticality criticality;
    unsigned short Extension;
    enum Presence presence;
};
static _SBC_AP_PROTOCOL_EXTENSION _v33 = {
    0x80000000,
    34,
    ignore,
    30,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v34 = {
    0x80000000,
    35,
    ignore,
    52,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v35 = {
    0x80000000,
    36,
    ignore,
    25,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v36 = {
    0x80000000,
    38,
    ignore,
    39,
    optional
};

static _SBC_AP_PROTOCOL_IES _v37 = {
    0x80000000,
    5,
    reject,
    33,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v38 = {
    0x80000000,
    11,
    reject,
    43,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v39 = {
    0x80000000,
    1,
    reject,
    17,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v40 = {
    0x80000000,
    2,
    ignore,
    19,
    optional
};

static _SBC_AP_PROTOCOL_IES _v41 = {
    0x80000000,
    22,
    ignore,
    27,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v42 = {
    0x80000000,
    39,
    ignore,
    46,
    optional
};

static _SBC_AP_PROTOCOL_IES _v43 = {
    0x80000000,
    5,
    reject,
    33,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v44 = {
    0x80000000,
    11,
    reject,
    43,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v45 = {
    0x80000000,
    14,
    reject,
    27,
    optional
};

static _SBC_AP_PROTOCOL_IES _v46 = {
    0x80000000,
    15,
    ignore,
    47,
    optional
};

static _SBC_AP_PROTOCOL_IES _v47 = {
    0x80000000,
    19,
    ignore,
    36,
    optional
};

static _SBC_AP_PROTOCOL_IES _v48 = {
    0x80000000,
    26,
    ignore,
    42,
    optional
};

static _SBC_AP_PROTOCOL_IES _v49 = {
    0x80000000,
    27,
    reject,
    44,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v50 = {
    0x80000000,
    34,
    ignore,
    30,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v51 = {
    0x80000000,
    35,
    ignore,
    52,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v52 = {
    0x80000000,
    38,
    ignore,
    39,
    optional
};

static _SBC_AP_PROTOCOL_IES _v53 = {
    0x80000000,
    5,
    reject,
    33,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v54 = {
    0x80000000,
    11,
    reject,
    43,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v55 = {
    0x80000000,
    1,
    reject,
    17,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v56 = {
    0x80000000,
    2,
    ignore,
    19,
    optional
};

static _SBC_AP_PROTOCOL_IES _v57 = {
    0x80000000,
    22,
    ignore,
    27,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v58 = {
    0x80000000,
    39,
    ignore,
    46,
    optional
};

static _SBC_AP_PROTOCOL_IES _v59 = {
    0x80000000,
    5,
    reject,
    33,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v60 = {
    0x80000000,
    11,
    reject,
    43,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v61 = {
    0x80000000,
    23,
    reject,
    11,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v62 = {
    0x80000000,
    40,
    ignore,
    12,
    optional
};

static _SBC_AP_PROTOCOL_IES _v63 = {
    0x80000000,
    5,
    reject,
    33,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v64 = {
    0x80000000,
    11,
    reject,
    43,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v65 = {
    0x80000000,
    25,
    reject,
    13,
    optional
};

static _SBC_AP_PROTOCOL_IES _v66 = {
    0x80000000,
    29,
    ignore,
    15,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v67 = {
    0x80000000,
    41,
    ignore,
    14,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v68 = {
    0x80000000,
    42,
    ignore,
    16,
    optional
};

static _SBC_AP_PROTOCOL_IES _v69 = {
    0x80000000,
    30,
    reject,
    38,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v70 = {
    0x80000000,
    28,
    reject,
    24,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v71 = {
    0x80000000,
    31,
    reject,
    28,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v72 = {
    0x80000000,
    32,
    reject,
    29,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v73 = {
    0x80000000,
    43,
    ignore,
    40,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v74 = {
    0x80000000,
    45,
    ignore,
    32,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v75 = {
    0x80000000,
    37,
    ignore,
    26,
    optional
};

static _SBC_AP_PROTOCOL_IES _v76 = {
    0x80000000,
    33,
    reject,
    22,
    mandatory
};

static _SBC_AP_PROTOCOL_IES _v77 = {
    0x80000000,
    28,
    reject,
    24,
    mandatory
};

static _SBC_AP_PROTOCOL_EXTENSION _v78 = {
    0x80000000,
    44,
    ignore,
    23,
    optional
};

static _SBC_AP_PROTOCOL_EXTENSION _v79 = {
    0x80000000,
    37,
    ignore,
    26,
    optional
};

static _SBC_AP_PROTOCOL_IES _v80 = {
    0x80000000,
    1,
    ignore,
    17,
    optional
};

static _SBC_AP_PROTOCOL_IES _v81 = {
    0x80000000,
    2,
    ignore,
    19,
    optional
};

static ObjectSetEntry const SBC_AP_ELEMENTARY_PROCEDURES[7] = {
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[1], &_v1, NULL, NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[2], &_v2, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[0], NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[3], &_v3, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[1], NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[4], &_v4, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[2], NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[5], &_v5, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[3], NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[6], &_v6, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[4], NULL},
    {NULL, &_v7, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES[5], NULL}
};

static ObjectSetEntry const SBC_AP_ELEMENTARY_PROCEDURES_CLASS_1[2] = {
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_1[1], &_v8, NULL, NULL},
    {NULL, &_v9, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_1[0], NULL}
};

static ObjectSetEntry const SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[5] = {
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[1], &_v10, NULL, NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[2], &_v11, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[0], NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[3], &_v12, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[1], NULL},
    {(ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[4], &_v13, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[2], NULL},
    {NULL, &_v14, (ObjectSetEntry *)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[3], NULL}
};

static ObjectSetEntry const Write_Replace_Warning_Request_IEs[16] = {
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[1], &_v16, NULL, NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[2], &_v17, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[0], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[3], &_v18, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[1], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[4], &_v19, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[2], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[5], &_v20, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[3], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[6], &_v21, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[4], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[7], &_v22, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[5], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[8], &_v23, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[6], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[9], &_v24, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[7], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[10], &_v25, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[8], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[11], &_v26, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[9], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[12], &_v27, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[10], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[13], &_v28, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[11], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[14], &_v29, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[12], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[15], &_v30, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[13], NULL},
    {NULL, &_v31, (ObjectSetEntry *)&Write_Replace_Warning_Request_IEs[14], NULL}
};

static ObjectSetEntry const Write_Replace_Warning_Request_Extensions[4] = {
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_Extensions[1], &_v33, NULL, NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_Extensions[2], &_v34, (ObjectSetEntry *)&Write_Replace_Warning_Request_Extensions[0], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Request_Extensions[3], &_v35, (ObjectSetEntry *)&Write_Replace_Warning_Request_Extensions[1], NULL},
    {NULL, &_v36, (ObjectSetEntry *)&Write_Replace_Warning_Request_Extensions[2], NULL}
};

static ObjectSetEntry const Write_Replace_Warning_Response_IEs[5] = {
    {(ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[1], &_v37, NULL, NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[2], &_v38, (ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[0], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[3], &_v39, (ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[1], NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[4], &_v40, (ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[2], NULL},
    {NULL, &_v41, (ObjectSetEntry *)&Write_Replace_Warning_Response_IEs[3], NULL}
};

static ObjectSetEntry const Write_Replace_Warning_Response_Extensions[1] = {
    {NULL, &_v42, NULL, NULL}
};

static ObjectSetEntry const Stop_Warning_Request_IEs[7] = {
    {(ObjectSetEntry *)&Stop_Warning_Request_IEs[1], &_v43, NULL, NULL},
    {(ObjectSetEntry *)&Stop_Warning_Request_IEs[2], &_v44, (ObjectSetEntry *)&Stop_Warning_Request_IEs[0], NULL},
    {(ObjectSetEntry *)&Stop_Warning_Request_IEs[3], &_v45, (ObjectSetEntry *)&Stop_Warning_Request_IEs[1], NULL},
    {(ObjectSetEntry *)&Stop_Warning_Request_IEs[4], &_v46, (ObjectSetEntry *)&Stop_Warning_Request_IEs[2], NULL},
    {(ObjectSetEntry *)&Stop_Warning_Request_IEs[5], &_v47, (ObjectSetEntry *)&Stop_Warning_Request_IEs[3], NULL},
    {(ObjectSetEntry *)&Stop_Warning_Request_IEs[6], &_v48, (ObjectSetEntry *)&Stop_Warning_Request_IEs[4], NULL},
    {NULL, &_v49, (ObjectSetEntry *)&Stop_Warning_Request_IEs[5], NULL}
};

static ObjectSetEntry const Stop_Warning_Request_Extensions[3] = {
    {(ObjectSetEntry *)&Stop_Warning_Request_Extensions[1], &_v50, NULL, NULL},
    {(ObjectSetEntry *)&Stop_Warning_Request_Extensions[2], &_v51, (ObjectSetEntry *)&Stop_Warning_Request_Extensions[0], NULL},
    {NULL, &_v52, (ObjectSetEntry *)&Stop_Warning_Request_Extensions[1], NULL}
};

static ObjectSetEntry const Stop_Warning_Response_IEs[5] = {
    {(ObjectSetEntry *)&Stop_Warning_Response_IEs[1], &_v53, NULL, NULL},
    {(ObjectSetEntry *)&Stop_Warning_Response_IEs[2], &_v54, (ObjectSetEntry *)&Stop_Warning_Response_IEs[0], NULL},
    {(ObjectSetEntry *)&Stop_Warning_Response_IEs[3], &_v55, (ObjectSetEntry *)&Stop_Warning_Response_IEs[1], NULL},
    {(ObjectSetEntry *)&Stop_Warning_Response_IEs[4], &_v56, (ObjectSetEntry *)&Stop_Warning_Response_IEs[2], NULL},
    {NULL, &_v57, (ObjectSetEntry *)&Stop_Warning_Response_IEs[3], NULL}
};

static ObjectSetEntry const Stop_Warning_Response_Extensions[1] = {
    {NULL, &_v58, NULL, NULL}
};

static ObjectSetEntry const Write_Replace_Warning_Indication_IEs[3] = {
    {(ObjectSetEntry *)&Write_Replace_Warning_Indication_IEs[1], &_v59, NULL, NULL},
    {(ObjectSetEntry *)&Write_Replace_Warning_Indication_IEs[2], &_v60, (ObjectSetEntry *)&Write_Replace_Warning_Indication_IEs[0], NULL},
    {NULL, &_v61, (ObjectSetEntry *)&Write_Replace_Warning_Indication_IEs[1], NULL}
};

static ObjectSetEntry const Write_Replace_Warning_Indication_Extensions[1] = {
    {NULL, &_v62, NULL, NULL}
};

static ObjectSetEntry const Stop_Warning_Indication_IEs[4] = {
    {(ObjectSetEntry *)&Stop_Warning_Indication_IEs[1], &_v63, NULL, NULL},
    {(ObjectSetEntry *)&Stop_Warning_Indication_IEs[2], &_v64, (ObjectSetEntry *)&Stop_Warning_Indication_IEs[0], NULL},
    {(ObjectSetEntry *)&Stop_Warning_Indication_IEs[3], &_v65, (ObjectSetEntry *)&Stop_Warning_Indication_IEs[1], NULL},
    {NULL, &_v66, (ObjectSetEntry *)&Stop_Warning_Indication_IEs[2], NULL}
};

static ObjectSetEntry const Stop_Warning_Indication_Extensions[2] = {
    {(ObjectSetEntry *)&Stop_Warning_Indication_Extensions[1], &_v67, NULL, NULL},
    {NULL, &_v68, (ObjectSetEntry *)&Stop_Warning_Indication_Extensions[0], NULL}
};

static ObjectSetEntry const PWS_Restart_Indication_IEs[4] = {
    {(ObjectSetEntry *)&PWS_Restart_Indication_IEs[1], &_v69, NULL, NULL},
    {(ObjectSetEntry *)&PWS_Restart_Indication_IEs[2], &_v70, (ObjectSetEntry *)&PWS_Restart_Indication_IEs[0], NULL},
    {(ObjectSetEntry *)&PWS_Restart_Indication_IEs[3], &_v71, (ObjectSetEntry *)&PWS_Restart_Indication_IEs[1], NULL},
    {NULL, &_v72, (ObjectSetEntry *)&PWS_Restart_Indication_IEs[2], NULL}
};

static ObjectSetEntry const PWS_Restart_Indication_Extensions[3] = {
    {(ObjectSetEntry *)&PWS_Restart_Indication_Extensions[1], &_v73, NULL, NULL},
    {(ObjectSetEntry *)&PWS_Restart_Indication_Extensions[2], &_v74, (ObjectSetEntry *)&PWS_Restart_Indication_Extensions[0], NULL},
    {NULL, &_v75, (ObjectSetEntry *)&PWS_Restart_Indication_Extensions[1], NULL}
};

static ObjectSetEntry const PWS_Failure_Indication_IEs[2] = {
    {(ObjectSetEntry *)&PWS_Failure_Indication_IEs[1], &_v76, NULL, NULL},
    {NULL, &_v77, (ObjectSetEntry *)&PWS_Failure_Indication_IEs[0], NULL}
};

static ObjectSetEntry const PWS_Failure_Indication_Extensions[2] = {
    {(ObjectSetEntry *)&PWS_Failure_Indication_Extensions[1], &_v78, NULL, NULL},
    {NULL, &_v79, (ObjectSetEntry *)&PWS_Failure_Indication_Extensions[0], NULL}
};

static ObjectSetEntry const ErrorIndicationIEs[2] = {
    {(ObjectSetEntry *)&ErrorIndicationIEs[1], &_v80, NULL, NULL},
    {NULL, &_v81, (ObjectSetEntry *)&ErrorIndicationIEs[0], NULL}
};

static ObjectSetEntry const Broadcast_Scheduled_Area_List_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const Broadcast_Scheduled_Area_List_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const Broadcast_Cancelled_Area_List_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const Broadcast_Cancelled_Area_List_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CancelledCellinEAI_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CancelledCellinTAI_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CancelledCellinTAI_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CellId_Broadcast_List_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CellId_Broadcast_List_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CellID_Cancelled_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CellID_Cancelled_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CriticalityDiagnostics_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const CriticalityDiagnostics_IE_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const EmergencyAreaID_Broadcast_List_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const EmergencyAreaID_Cancelled_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const EUTRAN_CGI_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const GlobalENB_ID_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const Global_GNB_ID_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const Global_NgENB_ID_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const NR_CGI_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const ScheduledCellinEAI_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const ScheduledCellinTAI_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const ScheduledCellinTAI_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const TAI_Broadcast_List_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const TAI_Broadcast_List_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const TAI_Cancelled_List_Item_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const TAI_Cancelled_List_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const TAI_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry const TAI_5GS_ExtIEs[1] = {{NULL, NULL, NULL, NULL}};

static ObjectSetEntry * const _oss_OSet_info[1] = {(ObjectSetEntry*)NULL};

static XOSetInfoEntry const _oss_XOSet_info[49] = {
  {(ObjectSetEntry*)&SBC_AP_ELEMENTARY_PROCEDURES[0], NULL, NULL, 7},
 {(ObjectSetEntry*)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_1[0], NULL, NULL, 2},
 {(ObjectSetEntry*)&SBC_AP_ELEMENTARY_PROCEDURES_CLASS_2[0], NULL, NULL, 5},
 {(ObjectSetEntry*)&Write_Replace_Warning_Request_IEs[0], NULL, NULL, 16},
 {(ObjectSetEntry*)&Write_Replace_Warning_Request_Extensions[0], NULL, NULL, 4},
 {(ObjectSetEntry*)&Write_Replace_Warning_Response_IEs[0], NULL, NULL, 5},
 {(ObjectSetEntry*)&Write_Replace_Warning_Response_Extensions[0], NULL, NULL, 1},
 {(ObjectSetEntry*)&Stop_Warning_Request_IEs[0], NULL, NULL, 7},
 {(ObjectSetEntry*)&Stop_Warning_Request_Extensions[0], NULL, NULL, 3},
 {(ObjectSetEntry*)&Stop_Warning_Response_IEs[0], NULL, NULL, 5},
 {(ObjectSetEntry*)&Stop_Warning_Response_Extensions[0], NULL, NULL, 1},
 {(ObjectSetEntry*)&Write_Replace_Warning_Indication_IEs[0], NULL, NULL, 3},
 {(ObjectSetEntry*)&Write_Replace_Warning_Indication_Extensions[0], NULL, NULL, 1},
 {(ObjectSetEntry*)&Stop_Warning_Indication_IEs[0], NULL, NULL, 4},
 {(ObjectSetEntry*)&Stop_Warning_Indication_Extensions[0], NULL, NULL, 2},
 {(ObjectSetEntry*)&PWS_Restart_Indication_IEs[0], NULL, NULL, 4},
 {(ObjectSetEntry*)&PWS_Restart_Indication_Extensions[0], NULL, NULL, 3},
 {(ObjectSetEntry*)&PWS_Failure_Indication_IEs[0], NULL, NULL, 2},
 {(ObjectSetEntry*)&PWS_Failure_Indication_Extensions[0], NULL, NULL, 2},
 {(ObjectSetEntry*)&ErrorIndicationIEs[0], NULL, NULL, 2},
 {(ObjectSetEntry*)&Broadcast_Scheduled_Area_List_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&Broadcast_Scheduled_Area_List_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&Broadcast_Cancelled_Area_List_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&Broadcast_Cancelled_Area_List_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CancelledCellinEAI_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CancelledCellinTAI_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CancelledCellinTAI_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CellId_Broadcast_List_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CellId_Broadcast_List_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CellID_Cancelled_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CellID_Cancelled_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CriticalityDiagnostics_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&CriticalityDiagnostics_IE_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&EmergencyAreaID_Broadcast_List_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&EmergencyAreaID_Cancelled_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&EUTRAN_CGI_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&GlobalENB_ID_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&Global_GNB_ID_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&Global_NgENB_ID_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&NR_CGI_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&ScheduledCellinEAI_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&ScheduledCellinTAI_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&ScheduledCellinTAI_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&TAI_Broadcast_List_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&TAI_Broadcast_List_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&TAI_Cancelled_List_Item_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&TAI_Cancelled_List_5GS_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&TAI_ExtIEs[0], NULL, NULL, 0},
 {(ObjectSetEntry*)&TAI_5GS_ExtIEs[0], NULL, NULL, 0}
};

/* Local control table initialization */

extern "C" void _oss_run_TOED_on_AMD64_LINUX_64_BIT(void);

extern "C" {
static void _oss_post_init(struct ossGlobal *world);

/* TOED internal function declarations */

#ifdef OSS_INFOOBJ_API
static int _coSBC_AP_Containers(struct ossGlobal * _g, int osetNum, void * obj1, void  *obj2, int mode);
#endif
#ifdef OSS_COPY_VALUE
static int _CPSBC_AP_Containers(struct ossGlobal * _g, int pduNum, void * src, void ** pdst);
#endif /* OSS_COPY_VALUE */

#ifdef OSS_COMPARE_VALUE
static int _CMSBC_AP_Containers(struct ossGlobal * _g, int _pduNum, void * _odata, void * _cdata);
#endif /* OSS_COMPARE_VALUE */

#ifdef OSS_NO_DETAIL_MM_ERROR_CODES
static void _oeSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf);
static void * _odSBC_AP_Containers(OssGlobal * _g, int _pdunum);
#endif
#if OSS_TOED_API_LEVEL >= 34
static void _jeSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf);
static void * _jdSBC_AP_Containers(OssGlobal * _g, int _pdunum);
#endif
#if OSS_TOED_API_LEVEL >= 41
static void _veSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf);
static void * _vdSBC_AP_Containers(OssGlobal * _g, int _pdunum);
#endif
static const _oss_xapi_entries_struct _oss_xapi_entries = {
     OSS_COMPILER_API_LEVEL
#ifdef OSS_COPY_VALUE
    ,_CPSBC_AP_Containers
#else
    ,NULL
#endif
#ifdef OSS_COMPARE_VALUE
    ,_CMSBC_AP_Containers
#else
    ,NULL
#endif
    ,NULL
    ,NULL
    ,2
    ,NULL
    ,NULL
#if OSS_TOED_API_LEVEL >= 24
    ,NULL
    ,NULL
    ,0
#endif
#ifdef OSS_NO_DETAIL_MM_ERROR_CODES
    ,0
    ,_oeSBC_AP_Containers
    ,_odSBC_AP_Containers
#endif
#if OSS_TOED_API_LEVEL >= 34
    ,0
    ,_jeSBC_AP_Containers
    ,_jdSBC_AP_Containers
#endif
#if OSS_TOED_API_LEVEL >= 41
    ,0
    ,_veSBC_AP_Containers
    ,_vdSBC_AP_Containers
#endif
};

/* Local control table initialization */

static unsigned char _privateFlags[] = {0x02,0x00,0x00};
extern "C" void _ossinit_sbcap(struct ossGlobal *world) {
    _oss_run_TOED_on_AMD64_LINUX_64_BIT();
    ossPrivateSetMoreFlags(world, 18, _privateFlags);
    ossLinkPer(world);
    ossSetEncodingRules(world, OSS_PER_ALIGNED);
#ifdef OSS_INFOOBJ_API
#ifdef OSS_NO_DETAIL_MM_ERROR_CODES
    ossInitXObjectSetTable(world, _oss_OSet_info, 49, _oss_XOSet_info, 49, _coSBC_AP_Containers);
#else
    ossInitXObjectSetTable(world, _oss_OSet_info, 49, _oss_XOSet_info, 49, (void *)_coSBC_AP_Containers);
#endif
#else
    ossInitXObjectSetTable(world, _oss_OSet_info, 49, _oss_XOSet_info, 49, NULL);
#endif
    ossInitXAPIentries(world, &_oss_xapi_entries);
    _oss_post_init(world);
}

/* TOED internal function declarations */


struct _InitiatingMessage {
    OSS_UINT32  procedureCode;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _SuccessfulOutcome {
    OSS_UINT32  procedureCode;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _UnsuccessfulOutcome {
    OSS_UINT32  procedureCode;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _SBC_AP_PDU {
    OSS_UINT32 choice;
    union {
	_InitiatingMessage * initiatingMessage;
	_SuccessfulOutcome * successfulOutcome;
	_UnsuccessfulOutcome * unsuccessfulOutcome;
    } u;
};
#ifdef OSS_DETECT_UNKNOWN_EXTENSION
#define OSS_UNKNOWN_EXT_FOUND(_g)	((_EncDecGlobals *)((_g)->encDecVar))->_genflags |= _F_UEXT_FOUND
#else
#define OSS_UNKNOWN_EXT_FOUND(_g)
#endif


struct _seq1 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof1 {
    struct _seqof1 * next;
    _seq1  value;
};

struct _seq2 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof2 {
    struct _seqof2 * next;
    _seq2  value;
};

struct _Write_Replace_Warning_Request {
    OSS_UINT32 bit_mask;
    _seqof1 * protocolIEs;
    _seqof2 * protocolExtensions;
};

struct _seq3 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof3 {
    struct _seqof3 * next;
    _seq3  value;
};

struct _seq4 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof4 {
    struct _seqof4 * next;
    _seq4  value;
};

struct _Write_Replace_Warning_Response {
    OSS_UINT32 bit_mask;
    _seqof3 * protocolIEs;
    _seqof4 * protocolExtensions;
};

struct _seq5 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof5 {
    struct _seqof5 * next;
    _seq5  value;
};

struct _seq6 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof6 {
    struct _seqof6 * next;
    _seq6  value;
};

struct _Stop_Warning_Request {
    OSS_UINT32 bit_mask;
    _seqof5 * protocolIEs;
    _seqof6 * protocolExtensions;
};

struct _seq9 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof9 {
    struct _seqof9 * next;
    _seq9  value;
};

struct _seq10 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof10 {
    struct _seqof10 * next;
    _seq10  value;
};

struct _Write_Replace_Warning_Indication {
    OSS_UINT32 bit_mask;
    _seqof9 * protocolIEs;
    _seqof10 * protocolExtensions;
};

struct _seq11 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof11 {
    struct _seqof11 * next;
    _seq11  value;
};

struct _seq12 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof12 {
    struct _seqof12 * next;
    _seq12  value;
};

struct _Stop_Warning_Indication {
    OSS_UINT32 bit_mask;
    _seqof11 * protocolIEs;
    _seqof12 * protocolExtensions;
};

struct _seq13 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof13 {
    struct _seqof13 * next;
    _seq13  value;
};

struct _seq14 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof14 {
    struct _seqof14 * next;
    _seq14  value;
};

struct _PWS_Restart_Indication {
    OSS_UINT32 bit_mask;
    _seqof13 * protocolIEs;
    _seqof14 * protocolExtensions;
};

struct _seq15 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof15 {
    struct _seqof15 * next;
    _seq15  value;
};

struct _seq16 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof16 {
    struct _seqof16 * next;
    _seq16  value;
};

struct _PWS_Failure_Indication {
    OSS_UINT32 bit_mask;
    _seqof15 * protocolIEs;
    _seqof16 * protocolExtensions;
};

struct _seq17 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  value;
};

struct _seqof17 {
    struct _seqof17 * next;
    _seq17  value;
};

struct _Error_Indication {
    _seqof17 * protocolIEs;
};

struct _seq42 {
    OSS_UINT32  id;
    enum Criticality  criticality;
    OSSC::COssConstrainedOpenType  extensionValue;
};

struct _seqof38 {
    struct _seqof38 * next;
    _seq42  value;
};

struct _EUTRAN_CGI {
    OSS_UINT32 bit_mask;
    OSSC::COssString  pLMNidentity;
    OSSC::COssBitString  cell_ID;
    _seqof38 * iE_Extensions;
};

struct _CellId_Broadcast_List_Item {
    OSS_UINT32 bit_mask;
    _EUTRAN_CGI  eCGI;
    _seqof38 * iE_Extensions;
};

struct _CellId_Broadcast_List {
    struct _CellId_Broadcast_List * next;
    _CellId_Broadcast_List_Item  value;
};

struct _TAI {
    OSS_UINT32 bit_mask;
    OSSC::COssString  pLMNidentity;
    OSSC::COssString  tAC;
    _seqof38 * iE_Extensions;
};

struct _TAI_Broadcast_List_Item {
    OSS_UINT32 bit_mask;
    _TAI  tAI;
    _CellId_Broadcast_List * scheduledCellinTAI;
    _seqof38 * iE_Extensions;
};

struct _TAI_Broadcast_List {
    struct _TAI_Broadcast_List * next;
    _TAI_Broadcast_List_Item  value;
};

struct _EmergencyAreaID_Broadcast_List_Item {
    OSS_UINT32 bit_mask;
    OSSC::COssString  emergencyAreaID;
    _CellId_Broadcast_List * scheduledCellinEAI;
    _seqof38 * iE_Extensions;
};

struct _EmergencyAreaID_Broadcast_List {
    struct _EmergencyAreaID_Broadcast_List * next;
    _EmergencyAreaID_Broadcast_List_Item  value;
};

struct _Broadcast_Scheduled_Area_List {
    OSS_UINT32 bit_mask;
    _CellId_Broadcast_List * cellId_Broadcast_List;
    _TAI_Broadcast_List * tAI_Broadcast_List;
    _EmergencyAreaID_Broadcast_List * emergencyAreaID_Broadcast_List;
    _seqof38 * iE_Extensions;
};

struct _NR_CGI {
    OSS_UINT32 bit_mask;
    OSSC::COssString  pLMNidentity;
    OSSC::COssBitString  nRCellIdentity;
    _seqof38 * iE_Extensions;
};

struct _seq31 {
    OSS_UINT32 bit_mask;
    _NR_CGI  nR_CGI;
    _seqof38 * iE_Extensions;
};

struct _CellId_Broadcast_List_5GS {
    struct _CellId_Broadcast_List_5GS * next;
    _seq31  value;
};

struct _TAI_5GS {
    OSS_UINT32 bit_mask;
    OSSC::COssString  pLMNidentity;
    OSSC::COssString  tAC_5GS;
    _seqof38 * iE_Extensions;
};

struct _seq51 {
    OSS_UINT32 bit_mask;
    _TAI_5GS  tAI_5GS;
    _CellId_Broadcast_List_5GS * scheduledCellinTAI_5GS;
    _seqof38 * iE_Extensions;
};

struct _TAI_Broadcast_List_5GS {
    struct _TAI_Broadcast_List_5GS * next;
    _seq51  value;
};

struct _Broadcast_Scheduled_Area_List_5GS {
    OSS_UINT32 bit_mask;
    _CellId_Broadcast_List_5GS * cellId_Broadcast_List_5GS;
    _TAI_Broadcast_List_5GS * tAI_Broadcast_List_5GS;
    _EmergencyAreaID_Broadcast_List * emergencyAreaID_Broadcast_List;
    _seqof38 * iE_Extensions;
};

struct _CellID_Cancelled_Item {
    OSS_UINT32 bit_mask;
    _EUTRAN_CGI  eCGI;
    OSS_UINT32  numberOfBroadcasts;
    _seqof38 * iE_Extensions;
};

struct _CellID_Cancelled_List {
    struct _CellID_Cancelled_List * next;
    _CellID_Cancelled_Item  value;
};

struct _TAI_Cancelled_List_Item {
    OSS_UINT32 bit_mask;
    _TAI  tAI;
    _CellID_Cancelled_List * cancelledCellinTAI;
    _seqof38 * iE_Extensions;
};

struct _TAI_Cancelled_List {
    struct _TAI_Cancelled_List * next;
    _TAI_Cancelled_List_Item  value;
};

struct _EmergencyAreaID_Cancelled_Item {
    OSS_UINT32 bit_mask;
    OSSC::COssString  emergencyAreaID;
    _CellID_Cancelled_List * cancelledCellinEAI;
    _seqof38 * iE_Extensions;
};

struct _EmergencyAreaID_Cancelled_List {
    struct _EmergencyAreaID_Cancelled_List * next;
    _EmergencyAreaID_Cancelled_Item  value;
};

struct _Broadcast_Cancelled_Area_List {
    OSS_UINT32 bit_mask;
    _CellID_Cancelled_List * cellID_Cancelled_List;
    _TAI_Cancelled_List * tAI_Cancelled_List;
    _EmergencyAreaID_Cancelled_List * emergencyAreaID_Cancelled_List;
    _seqof38 * iE_Extensions;
};

struct _seq34 {
    OSS_UINT32 bit_mask;
    _NR_CGI  nR_CGI;
    OSS_UINT32  numberOfBroadcasts;
    _seqof38 * iE_Extensions;
};

struct _CellID_Cancelled_List_5GS {
    struct _CellID_Cancelled_List_5GS * next;
    _seq34  value;
};

struct _seq54 {
    OSS_UINT32 bit_mask;
    _TAI_5GS  tAI_5GS;
    _CellID_Cancelled_List_5GS * cancelledCellinTAI_5GS;
    _seqof38 * iE_Extensions;
};

struct _TAI_Cancelled_List_5GS {
    struct _TAI_Cancelled_List_5GS * next;
    _seq54  value;
};

struct _Broadcast_Cancelled_Area_List_5GS {
    OSS_UINT32 bit_mask;
    _CellID_Cancelled_List_5GS * cellID_Cancelled_List_5GS;
    _TAI_Cancelled_List_5GS * tAI_Cancelled_List_5GS;
    _EmergencyAreaID_Cancelled_List * emergencyAreaID_Cancelled_List;
    _seqof38 * iE_Extensions;
};

struct _ENB_ID {
    OSS_UINT32 choice;
    union {
	OSSC::COssBitString  macroENB_ID;
	OSSC::COssBitString  homeENB_ID;
	OSSC::COssBitString  short_macroENB_ID;
	OSSC::COssBitString  long_macroENB_ID;
    } u;
};

struct _Global_ENB_ID {
    OSS_UINT32 bit_mask;
    OSSC::COssString  pLMNidentity;
    _ENB_ID  eNB_ID;
    _seqof38 * iE_Extensions;
};

struct _Broadcast_Empty_Area_List {
    struct _Broadcast_Empty_Area_List * next;
    _Global_ENB_ID  value;
};

struct _GNB_ID {
    OSS_UINT32 choice;
    union {
	OSSC::COssBitString  gNB_ID;
    } u;
};

struct _Global_GNB_ID {
    OSS_UINT32 bit_mask;
    OSSC::COssString  pLMNidentity;
    _GNB_ID  gNB_ID;
    _seqof38 * iE_Extensions;
};

struct _Global_NgENB_ID {
    OSS_UINT32 bit_mask;
    OSSC::COssString  pLMNidentity;
    _ENB_ID  ngENB_ID;
    _seqof38 * iE_Extensions;
};

struct _Global_RAN_Node_ID {
    OSS_UINT32 choice;
    union {
	_Global_GNB_ID * global_GNB_ID;
	_Global_NgENB_ID * global_NgENB_ID;
    } u;
};

struct _Broadcast_Empty_Area_List_5GS {
    struct _Broadcast_Empty_Area_List_5GS * next;
    _Global_RAN_Node_ID  value;
};

struct _seq37 {
    OSS_UINT32 bit_mask;
    enum Criticality  iECriticality;
    OSS_UINT32  iE_ID;
    enum TypeOfError  typeOfError;
    _seqof38 * iE_Extensions;
};

struct _CriticalityDiagnostics_IE_List {
    struct _CriticalityDiagnostics_IE_List * next;
    _seq37  value;
};

struct _Criticality_Diagnostics {
    OSS_UINT32 bit_mask;
    OSS_UINT32  procedureCode;
    enum TriggeringMessage  triggeringMessage;
    enum Criticality  procedureCriticality;
    _CriticalityDiagnostics_IE_List * iE_CriticalityDiagnostics;
    _seqof38 * iE_Extensions;
};

struct _ECGIList {
    struct _ECGIList * next;
    _EUTRAN_CGI  value;
};

struct _NR_CGIList {
    struct _NR_CGIList * next;
    _NR_CGI  value;
};
static void _ep_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _in_data);
static void _dp_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _data_ptr);
#endif
static void _ep_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _in_data);
static void _dp_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _data_ptr);
#endif
static void _ep_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _in_data);
static void _dp_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _data_ptr);
#endif

struct _seq43 {
    _TAI  tai;
};

struct _List_of_TAIs {
    struct _List_of_TAIs * next;
    _seq43  value;
};

struct _Emergency_Area_ID_List {
    struct _Emergency_Area_ID_List * next;
    OSSC::COssString  value;
};

struct _List_of_5GS_TAIs {
    struct _List_of_5GS_TAIs * next;
    _TAI_5GS  value;
};

struct _NgENB_ID {
    OSS_UINT32 choice;
    union {
	OSSC::COssBitString  macroNgENB_ID;
	OSSC::COssBitString  shortMacroNgENB_ID;
	OSSC::COssBitString  longMacroNgENB_ID;
    } u;
};

struct _TAI_List_for_Warning {
    struct _TAI_List_for_Warning * next;
    _TAI  value;
};

struct _Warning_Area_List {
    OSS_UINT32 choice;
    union {
	_ECGIList * cell_ID_List;
	_TAI_List_for_Warning * tracking_Area_List_for_Warning;
	_Emergency_Area_ID_List * emergency_Area_ID_List;
    } u;
};

struct _Warning_Area_List_5GS {
    OSS_UINT32 choice;
    union {
	_ECGIList * cell_ID_List;
	_NR_CGIList * nR_CGIList;
	_TAI_5GS * tAIList_5GS;
	_Emergency_Area_ID_List * emergencyAreaIDList;
    } u;
};
static void _ep_ENB_ID(OssGlobal * _g, _ENB_ID * _in_data);
static void _dp_ENB_ID(OssGlobal * _g, _ENB_ID * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_ENB_ID(OssGlobal * _g, _ENB_ID * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_ENB_ID(OssGlobal * _g, _ENB_ID * _data_ptr);
#endif
static void _ep_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _in_data);
static void _dp_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _data_ptr);
#endif
static void _ep_NR_CGI(OssGlobal * _g, _NR_CGI * _in_data);
static void _dp_NR_CGI(OssGlobal * _g, _NR_CGI * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_NR_CGI(OssGlobal * _g, _NR_CGI * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_NR_CGI(OssGlobal * _g, _NR_CGI * _data_ptr);
#endif
static void _ep_ECGIList(OssGlobal * _g, _ECGIList ** _in_data);
static void _dp_ECGIList(OssGlobal * _g, _ECGIList ** _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_ECGIList(OssGlobal * _g, _ECGIList ** _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_ECGIList(OssGlobal * _g, _ECGIList ** _data_ptr);
#endif
static void _ep_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _in_data);
static void _dp_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _data_ptr);
#endif
static void _ep_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _in_data);
static void _dp_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _data_ptr);
#endif
static void _ep_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _in_data);
static void _dp_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _data_ptr);
#endif
static void _ep_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _in_data);
static void _dp_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _data_ptr);
#endif
static void _ep_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _in_data);
static void _dp_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _data_ptr);
#endif
static void _ep_TAI(OssGlobal * _g, _TAI * _in_data);
static void _dp_TAI(OssGlobal * _g, _TAI * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_TAI(OssGlobal * _g, _TAI * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_TAI(OssGlobal * _g, _TAI * _data_ptr);
#endif
static void _ep__seq43(OssGlobal * _g, _seq43 * _in_data);
static void _dp__seq43(OssGlobal * _g, _seq43 * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f__seq43(OssGlobal * _g, _seq43 * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p__seq43(OssGlobal * _g, _seq43 * _data_ptr);
#endif
static void _ep_TAI_5GS(OssGlobal * _g, _TAI_5GS * _in_data);
static void _dp_TAI_5GS(OssGlobal * _g, _TAI_5GS * _out_data);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f_TAI_5GS(OssGlobal * _g, _TAI_5GS * _data_ptr);
#endif
#ifdef OSSPRINT
static void _p_TAI_5GS(OssGlobal * _g, _TAI_5GS * _data_ptr);
#endif
static int _gmSBC_AP_ELEMENTARY_PROCEDURE(OssGlobal * _g, unsigned short _fCnt, void ** _fVal, unsigned short ** _fId, _SBC_AP_ELEMENTARY_PROCEDURE * _object);
static int _goSBC_AP_ELEMENTARY_PROCEDURE(struct ossGlobal * _g, unsigned int osetNum, unsigned short fCnt, void ** fVal, unsigned short ** fId, _SBC_AP_ELEMENTARY_PROCEDURE ** obj);
static int _gmSBC_AP_PROTOCOL_IES(OssGlobal * _g, unsigned short _fCnt, void ** _fVal, unsigned short ** _fId, _SBC_AP_PROTOCOL_IES * _object);
static int _goSBC_AP_PROTOCOL_IES(struct ossGlobal * _g, unsigned int osetNum, unsigned short fCnt, void ** fVal, unsigned short ** fId, _SBC_AP_PROTOCOL_IES ** obj);
static int _gmSBC_AP_PROTOCOL_EXTENSION(OssGlobal * _g, unsigned short _fCnt, void ** _fVal, unsigned short ** _fId, _SBC_AP_PROTOCOL_EXTENSION * _object);
static int _goSBC_AP_PROTOCOL_EXTENSION(struct ossGlobal * _g, unsigned int osetNum, unsigned short fCnt, void ** fVal, unsigned short ** fId, _SBC_AP_PROTOCOL_EXTENSION ** obj);
#ifdef OSS_INFOOBJ_API
static int _cmSBC_AP_ELEMENTARY_PROCEDURE(OssGlobal * _g, _SBC_AP_ELEMENTARY_PROCEDURE  * _odata, _SBC_AP_ELEMENTARY_PROCEDURE  * _cdata, int _mode);
static int _cmSBC_AP_PROTOCOL_IES(OssGlobal * _g, _SBC_AP_PROTOCOL_IES  * _odata, _SBC_AP_PROTOCOL_IES  * _cdata, int _mode);
static int _cmSBC_AP_PROTOCOL_EXTENSION(OssGlobal * _g, _SBC_AP_PROTOCOL_EXTENSION  * _odata, _SBC_AP_PROTOCOL_EXTENSION  * _cdata, int _mode);
#endif

static void _epSBC_AP_PDU(OssGlobal * _g, void * _inbuf);
static void * _dpSBC_AP_PDU(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fSBC_AP_PDU(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pSBC_AP_PDU(OssGlobal * _g, void * _data);
#endif
static void _ep0Write_Replace_Warning_Reque(OssGlobal * _g, void * _inbuf);
static void * _dp0Write_Replace_Warning_Reque(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f0Write_Replace_Warning_Reque(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p0Write_Replace_Warning_Reque(OssGlobal * _g, void * _data);
#endif
static void _ep1Write_Replace_Warning_Respo(OssGlobal * _g, void * _inbuf);
static void * _dp1Write_Replace_Warning_Respo(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f1Write_Replace_Warning_Respo(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p1Write_Replace_Warning_Respo(OssGlobal * _g, void * _data);
#endif
static void _epStop_Warning_Request(OssGlobal * _g, void * _inbuf);
static void * _dpStop_Warning_Request(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fStop_Warning_Request(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pStop_Warning_Request(OssGlobal * _g, void * _data);
#endif
static void _epStop_Warning_Response(OssGlobal * _g, void * _inbuf);
static void * _dpStop_Warning_Response(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fStop_Warning_Response(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pStop_Warning_Response(OssGlobal * _g, void * _data);
#endif
static void _ep2Write_Replace_Warning_Indic(OssGlobal * _g, void * _inbuf);
static void * _dp2Write_Replace_Warning_Indic(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f2Write_Replace_Warning_Indic(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p2Write_Replace_Warning_Indic(OssGlobal * _g, void * _data);
#endif
static void _epStop_Warning_Indication(OssGlobal * _g, void * _inbuf);
static void * _dpStop_Warning_Indication(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fStop_Warning_Indication(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pStop_Warning_Indication(OssGlobal * _g, void * _data);
#endif
static void _epPWS_Restart_Indication(OssGlobal * _g, void * _inbuf);
static void * _dpPWS_Restart_Indication(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fPWS_Restart_Indication(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pPWS_Restart_Indication(OssGlobal * _g, void * _data);
#endif
static void _epPWS_Failure_Indication(OssGlobal * _g, void * _inbuf);
static void * _dpPWS_Failure_Indication(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fPWS_Failure_Indication(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pPWS_Failure_Indication(OssGlobal * _g, void * _data);
#endif
static void _epError_Indication(OssGlobal * _g, void * _inbuf);
static void * _dpError_Indication(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fError_Indication(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pError_Indication(OssGlobal * _g, void * _data);
#endif
static void _ep3Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _inbuf);
static void * _dp3Broadcast_Scheduled_Area_Li(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f3Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p3Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data);
#endif
static void _ep4Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _inbuf);
static void * _dp4Broadcast_Scheduled_Area_Li(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f4Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p4Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data);
#endif
static void _ep5Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _inbuf);
static void * _dp5Broadcast_Cancelled_Area_Li(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f5Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p5Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data);
#endif
static void _ep6Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _inbuf);
static void * _dp6Broadcast_Cancelled_Area_Li(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f6Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p6Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data);
#endif
static void _epBroadcast_Empty_Area_List(OssGlobal * _g, void * _inbuf);
static void * _dpBroadcast_Empty_Area_List(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fBroadcast_Empty_Area_List(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pBroadcast_Empty_Area_List(OssGlobal * _g, void * _data);
#endif
static void _ep7Broadcast_Empty_Area_List_5(OssGlobal * _g, void * _inbuf);
static void * _dp7Broadcast_Empty_Area_List_5(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f7Broadcast_Empty_Area_List_5(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p7Broadcast_Empty_Area_List_5(OssGlobal * _g, void * _data);
#endif
static void _epCause(OssGlobal * _g, void * _inbuf);
static void * _dpCause(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fCause(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pCause(OssGlobal * _g, void * _data);
#endif
static void _ep8Concurrent_Warning_Message_(OssGlobal * _g, void * _inbuf);
static void * _dp8Concurrent_Warning_Message_(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f8Concurrent_Warning_Message_(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p8Concurrent_Warning_Message_(OssGlobal * _g, void * _data);
#endif
static void _epCriticality_Diagnostics(OssGlobal * _g, void * _inbuf);
static void * _dpCriticality_Diagnostics(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fCriticality_Diagnostics(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pCriticality_Diagnostics(OssGlobal * _g, void * _data);
#endif
static void _epData_Coding_Scheme(OssGlobal * _g, void * _inbuf);
static void * _dpData_Coding_Scheme(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fData_Coding_Scheme(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pData_Coding_Scheme(OssGlobal * _g, void * _data);
#endif
static void _epExtended_Repetition_Period(OssGlobal * _g, void * _inbuf);
static void * _dpExtended_Repetition_Period(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fExtended_Repetition_Period(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pExtended_Repetition_Period(OssGlobal * _g, void * _data);
#endif
static void _epFailed_Cell_List(OssGlobal * _g, void * _inbuf);
static void * _dpFailed_Cell_List(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fFailed_Cell_List(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pFailed_Cell_List(OssGlobal * _g, void * _data);
#endif
static void _epFailed_Cell_List_NR(OssGlobal * _g, void * _inbuf);
static void * _dpFailed_Cell_List_NR(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fFailed_Cell_List_NR(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pFailed_Cell_List_NR(OssGlobal * _g, void * _data);
#endif
static void _epGlobal_ENB_ID(OssGlobal * _g, void * _inbuf);
static void * _dpGlobal_ENB_ID(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fGlobal_ENB_ID(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pGlobal_ENB_ID(OssGlobal * _g, void * _data);
#endif
static void _epGlobal_RAN_Node_ID(OssGlobal * _g, void * _inbuf);
static void * _dpGlobal_RAN_Node_ID(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fGlobal_RAN_Node_ID(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pGlobal_RAN_Node_ID(OssGlobal * _g, void * _data);
#endif
static void _epGlobal_GNB_ID(OssGlobal * _g, void * _inbuf);
static void * _dpGlobal_GNB_ID(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fGlobal_GNB_ID(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pGlobal_GNB_ID(OssGlobal * _g, void * _data);
#endif
static void _epList_of_TAIs(OssGlobal * _g, void * _inbuf);
static void * _dpList_of_TAIs(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fList_of_TAIs(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pList_of_TAIs(OssGlobal * _g, void * _data);
#endif
static void _epList_of_TAIs_Restart(OssGlobal * _g, void * _inbuf);
static void * _dpList_of_TAIs_Restart(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fList_of_TAIs_Restart(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pList_of_TAIs_Restart(OssGlobal * _g, void * _data);
#endif
static void _epList_of_EAIs_Restart(OssGlobal * _g, void * _inbuf);
static void * _dpList_of_EAIs_Restart(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fList_of_EAIs_Restart(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pList_of_EAIs_Restart(OssGlobal * _g, void * _data);
#endif
static void _epList_of_5GS_TAIs(OssGlobal * _g, void * _inbuf);
static void * _dpList_of_5GS_TAIs(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fList_of_5GS_TAIs(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pList_of_5GS_TAIs(OssGlobal * _g, void * _data);
#endif
static void _ep9List_of_5GS_Cells_for_Failu(OssGlobal * _g, void * _inbuf);
static void * _dp9List_of_5GS_Cells_for_Failu(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f9List_of_5GS_Cells_for_Failu(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p9List_of_5GS_Cells_for_Failu(OssGlobal * _g, void * _data);
#endif
static void _epList_of_5GS_TAI_for_Restart(OssGlobal * _g, void * _inbuf);
static void * _dpList_of_5GS_TAI_for_Restart(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fList_of_5GS_TAI_for_Restart(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pList_of_5GS_TAI_for_Restart(OssGlobal * _g, void * _data);
#endif
static void _epMessage_Identifier(OssGlobal * _g, void * _inbuf);
static void * _dpMessage_Identifier(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fMessage_Identifier(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pMessage_Identifier(OssGlobal * _g, void * _data);
#endif
static void _ep10Number_of_Broadcasts_Reque(OssGlobal * _g, void * _inbuf);
static void * _dp10Number_of_Broadcasts_Reque(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f10Number_of_Broadcasts_Reque(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p10Number_of_Broadcasts_Reque(OssGlobal * _g, void * _data);
#endif
static void _epNgENB_ID(OssGlobal * _g, void * _inbuf);
static void * _dpNgENB_ID(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fNgENB_ID(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pNgENB_ID(OssGlobal * _g, void * _data);
#endif
static void _epOmc_Id(OssGlobal * _g, void * _inbuf);
static void * _dpOmc_Id(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fOmc_Id(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pOmc_Id(OssGlobal * _g, void * _data);
#endif
static void _epRepetition_Period(OssGlobal * _g, void * _inbuf);
static void * _dpRepetition_Period(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fRepetition_Period(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pRepetition_Period(OssGlobal * _g, void * _data);
#endif
static void _epRestarted_Cell_List(OssGlobal * _g, void * _inbuf);
static void * _dpRestarted_Cell_List(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fRestarted_Cell_List(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pRestarted_Cell_List(OssGlobal * _g, void * _data);
#endif
static void _epRAT_Selector_5GS(OssGlobal * _g, void * _inbuf);
static void * _dpRAT_Selector_5GS(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fRAT_Selector_5GS(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pRAT_Selector_5GS(OssGlobal * _g, void * _data);
#endif
static void _epRestarted_Cell_List_NR(OssGlobal * _g, void * _inbuf);
static void * _dpRestarted_Cell_List_NR(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fRestarted_Cell_List_NR(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pRestarted_Cell_List_NR(OssGlobal * _g, void * _data);
#endif
static void _ep11Send_Write_Replace_Warning(OssGlobal * _g, void * _inbuf);
static void * _dp11Send_Write_Replace_Warning(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f11Send_Write_Replace_Warning(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p11Send_Write_Replace_Warning(OssGlobal * _g, void * _data);
#endif
static void _epSend_Stop_Warning_Indication(OssGlobal * _g, void * _inbuf);
static void * _dpSend_Stop_Warning_Indication(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fSend_Stop_Warning_Indication(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pSend_Stop_Warning_Indication(OssGlobal * _g, void * _data);
#endif
static void _epSerial_Number(OssGlobal * _g, void * _inbuf);
static void * _dpSerial_Number(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fSerial_Number(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pSerial_Number(OssGlobal * _g, void * _data);
#endif
static void _epStop_All_Indicator(OssGlobal * _g, void * _inbuf);
static void * _dpStop_All_Indicator(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fStop_All_Indicator(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pStop_All_Indicator(OssGlobal * _g, void * _data);
#endif
static void _epUnknown_Tracking_Area_List(OssGlobal * _g, void * _inbuf);
static void * _dpUnknown_Tracking_Area_List(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fUnknown_Tracking_Area_List(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pUnknown_Tracking_Area_List(OssGlobal * _g, void * _data);
#endif
static void _ep12Unknown_5GS_Tracking_Area_(OssGlobal * _g, void * _inbuf);
static void * _dp12Unknown_5GS_Tracking_Area_(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _f12Unknown_5GS_Tracking_Area_(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _p12Unknown_5GS_Tracking_Area_(OssGlobal * _g, void * _data);
#endif
static void _epWarning_Area_List(OssGlobal * _g, void * _inbuf);
static void * _dpWarning_Area_List(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fWarning_Area_List(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pWarning_Area_List(OssGlobal * _g, void * _data);
#endif
static void _epWarning_Message_Content(OssGlobal * _g, void * _inbuf);
static void * _dpWarning_Message_Content(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fWarning_Message_Content(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pWarning_Message_Content(OssGlobal * _g, void * _data);
#endif
static void _epWarning_Area_Coordinates(OssGlobal * _g, void * _inbuf);
static void * _dpWarning_Area_Coordinates(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fWarning_Area_Coordinates(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pWarning_Area_Coordinates(OssGlobal * _g, void * _data);
#endif
static void _epWarning_Security_Information(OssGlobal * _g, void * _inbuf);
static void * _dpWarning_Security_Information(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fWarning_Security_Information(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pWarning_Security_Information(OssGlobal * _g, void * _data);
#endif
static void _epWarning_Type(OssGlobal * _g, void * _inbuf);
static void * _dpWarning_Type(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fWarning_Type(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pWarning_Type(OssGlobal * _g, void * _data);
#endif
static void _epWarning_Area_List_5GS(OssGlobal * _g, void * _inbuf);
static void * _dpWarning_Area_List_5GS(OssGlobal * _g);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void _fWarning_Area_List_5GS(OssGlobal * _g, void * _data);
#endif
#ifdef OSSPRINT
static int _pWarning_Area_List_5GS(OssGlobal * _g, void * _data);
#endif
static void _peSBC_AP_Containers(struct ossGlobal * _g, int _pdunum, void * _inbuf);
static void _PeSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf);
static void * _PdSBC_AP_Containers(OssGlobal * _g, int * _pdunum);
static void _pdSBC_AP_Containers(struct ossGlobal * _g, int * _pdunum, void ** _outbuf);
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static int _fmSBC_AP_Containers(struct ossGlobal * _g, int _pdunum, void * _data);
#endif
#ifdef OSSPRINT
static int _pmSBC_AP_Containers(struct ossGlobal * _g, int _pdunum, void * _data);
#endif



#ifdef OSS_COPY_VALUE
static _Global_ENB_ID  * _cpGlobal_ENB_ID(OssGlobal * _g, _Global_ENB_ID  * psVal, _Global_ENB_ID  * pdVal);
static _Global_RAN_Node_ID  * _cpGlobal_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID  * psVal, _Global_RAN_Node_ID  * pdVal);
static _Global_GNB_ID  * _cpGlobal_GNB_ID(OssGlobal * _g, _Global_GNB_ID  * psVal, _Global_GNB_ID  * pdVal);
static _ENB_ID  * _cpENB_ID(OssGlobal * _g, _ENB_ID  * psVal, _ENB_ID  * pdVal);
static _seqof38 * * _cp_seqof23(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal);
static _EUTRAN_CGI  * _cpEUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI  * psVal, _EUTRAN_CGI  * pdVal);
static _seqof38 * * _cp_seqof26(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal);
static _NR_CGI  * _cpNR_CGI(OssGlobal * _g, _NR_CGI  * psVal, _NR_CGI  * pdVal);
static _ECGIList * * _cpECGIList(OssGlobal * _g, _ECGIList * * psVal, _ECGIList * * pdVal);
static _Emergency_Area_ID_List * * _cpEmergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List * * psVal, _Emergency_Area_ID_List * * pdVal);
static _EmergencyAreaID_Broadcast_List_Item  * _cp13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item  * psVal, _EmergencyAreaID_Broadcast_List_Item  * pdVal);
static _EmergencyAreaID_Broadcast_List * * _cp14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List * * psVal, _EmergencyAreaID_Broadcast_List * * pdVal);
static _EmergencyAreaID_Cancelled_Item  * _cp15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item  * psVal, _EmergencyAreaID_Cancelled_Item  * pdVal);
static _EmergencyAreaID_Cancelled_List * * _cp16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List * * psVal, _EmergencyAreaID_Cancelled_List * * pdVal);
static _seqof38 * * _cp_seqof38(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal);
static _TAI  * _cpTAI(OssGlobal * _g, _TAI  * psVal, _TAI  * pdVal);
static _seq43  * _cp_seq43(OssGlobal * _g, _seq43  * psVal, _seq43  * pdVal);
static _seqof38 * * _cp_seqof39(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal);
static _TAI_5GS  * _cpTAI_5GS(OssGlobal * _g, _TAI_5GS  * psVal, _TAI_5GS  * pdVal);
#endif /* OSS_COPY_VALUE */

#ifdef OSS_COMPARE_VALUE
static int _cmGlobal_ENB_ID(OssGlobal * _g, _Global_ENB_ID  * _odata, _Global_ENB_ID  * _cdata);
static int _cmGlobal_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID  * _odata, _Global_RAN_Node_ID  * _cdata);
static int _cmGlobal_GNB_ID(OssGlobal * _g, _Global_GNB_ID  * _odata, _Global_GNB_ID  * _cdata);
static int _cmENB_ID(OssGlobal * _g, _ENB_ID  * _odata, _ENB_ID  * _cdata);
static int _cm_seqof23(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata);
static int _cmEUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI  * _odata, _EUTRAN_CGI  * _cdata);
static int _cm_seqof26(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata);
static int _cmNR_CGI(OssGlobal * _g, _NR_CGI  * _odata, _NR_CGI  * _cdata);
static int _cmECGIList(OssGlobal * _g, _ECGIList * * _odata, _ECGIList * * _cdata);
static int _cmEmergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List * * _odata, _Emergency_Area_ID_List * * _cdata);
static int _cm13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item  * _odata, _EmergencyAreaID_Broadcast_List_Item  * _cdata);
static int _cm14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List * * _odata, _EmergencyAreaID_Broadcast_List * * _cdata);
static int _cm15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item  * _odata, _EmergencyAreaID_Cancelled_Item  * _cdata);
static int _cm16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List * * _odata, _EmergencyAreaID_Cancelled_List * * _cdata);
static int _cm_seqof38(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata);
static int _cmTAI(OssGlobal * _g, _TAI  * _odata, _TAI  * _cdata);
static int _cm_seq43(OssGlobal * _g, _seq43  * _odata, _seq43  * _cdata);
static int _cm_seqof39(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata);
static int _cmTAI_5GS(OssGlobal * _g, _TAI_5GS  * _odata, _TAI_5GS  * _cdata);
#endif /* OSS_COMPARE_VALUE */

static void (* const _pEncoders[52])(OssGlobal *, void *) = {
    _epSBC_AP_PDU,
    _ep0Write_Replace_Warning_Reque,
    _ep1Write_Replace_Warning_Respo,
    _epStop_Warning_Request,
    _epStop_Warning_Response,
    _ep2Write_Replace_Warning_Indic,
    _epStop_Warning_Indication,
    _epPWS_Restart_Indication,
    _epPWS_Failure_Indication,
    _epError_Indication,
    _ep3Broadcast_Scheduled_Area_Li,
    _ep4Broadcast_Scheduled_Area_Li,
    _ep5Broadcast_Cancelled_Area_Li,
    _ep6Broadcast_Cancelled_Area_Li,
    _epBroadcast_Empty_Area_List,
    _ep7Broadcast_Empty_Area_List_5,
    _epCause,
    _ep8Concurrent_Warning_Message_,
    _epCriticality_Diagnostics,
    _epData_Coding_Scheme,
    _epExtended_Repetition_Period,
    _epFailed_Cell_List,
    _epFailed_Cell_List_NR,
    _epGlobal_ENB_ID,
    _epGlobal_RAN_Node_ID,
    _epGlobal_GNB_ID,
    _epList_of_TAIs,
    _epList_of_TAIs_Restart,
    _epList_of_EAIs_Restart,
    _epList_of_5GS_TAIs,
    _ep9List_of_5GS_Cells_for_Failu,
    _epList_of_5GS_TAI_for_Restart,
    _epMessage_Identifier,
    _ep10Number_of_Broadcasts_Reque,
    _epNgENB_ID,
    _epOmc_Id,
    _epRepetition_Period,
    _epRestarted_Cell_List,
    _epRAT_Selector_5GS,
    _epRestarted_Cell_List_NR,
    _ep11Send_Write_Replace_Warning,
    _epSend_Stop_Warning_Indication,
    _epSerial_Number,
    _epStop_All_Indicator,
    _epUnknown_Tracking_Area_List,
    _ep12Unknown_5GS_Tracking_Area_,
    _epWarning_Area_List,
    _epWarning_Message_Content,
    _epWarning_Area_Coordinates,
    _epWarning_Security_Information,
    _epWarning_Type,
    _epWarning_Area_List_5GS
};
static void *(* const _pDecoders[52])(OssGlobal *) = {
    _dpSBC_AP_PDU,
    _dp0Write_Replace_Warning_Reque,
    _dp1Write_Replace_Warning_Respo,
    _dpStop_Warning_Request,
    _dpStop_Warning_Response,
    _dp2Write_Replace_Warning_Indic,
    _dpStop_Warning_Indication,
    _dpPWS_Restart_Indication,
    _dpPWS_Failure_Indication,
    _dpError_Indication,
    _dp3Broadcast_Scheduled_Area_Li,
    _dp4Broadcast_Scheduled_Area_Li,
    _dp5Broadcast_Cancelled_Area_Li,
    _dp6Broadcast_Cancelled_Area_Li,
    _dpBroadcast_Empty_Area_List,
    _dp7Broadcast_Empty_Area_List_5,
    _dpCause,
    _dp8Concurrent_Warning_Message_,
    _dpCriticality_Diagnostics,
    _dpData_Coding_Scheme,
    _dpExtended_Repetition_Period,
    _dpFailed_Cell_List,
    _dpFailed_Cell_List_NR,
    _dpGlobal_ENB_ID,
    _dpGlobal_RAN_Node_ID,
    _dpGlobal_GNB_ID,
    _dpList_of_TAIs,
    _dpList_of_TAIs_Restart,
    _dpList_of_EAIs_Restart,
    _dpList_of_5GS_TAIs,
    _dp9List_of_5GS_Cells_for_Failu,
    _dpList_of_5GS_TAI_for_Restart,
    _dpMessage_Identifier,
    _dp10Number_of_Broadcasts_Reque,
    _dpNgENB_ID,
    _dpOmc_Id,
    _dpRepetition_Period,
    _dpRestarted_Cell_List,
    _dpRAT_Selector_5GS,
    _dpRestarted_Cell_List_NR,
    _dp11Send_Write_Replace_Warning,
    _dpSend_Stop_Warning_Indication,
    _dpSerial_Number,
    _dpStop_All_Indicator,
    _dpUnknown_Tracking_Area_List,
    _dp12Unknown_5GS_Tracking_Area_,
    _dpWarning_Area_List,
    _dpWarning_Message_Content,
    _dpWarning_Area_Coordinates,
    _dpWarning_Security_Information,
    _dpWarning_Type,
    _dpWarning_Area_List_5GS
};
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
static void (* const _FreePDU[52])(OssGlobal *, void *) = {
    _fSBC_AP_PDU,
    _f0Write_Replace_Warning_Reque,
    _f1Write_Replace_Warning_Respo,
    _fStop_Warning_Request,
    _fStop_Warning_Response,
    _f2Write_Replace_Warning_Indic,
    _fStop_Warning_Indication,
    _fPWS_Restart_Indication,
    _fPWS_Failure_Indication,
    _fError_Indication,
    _f3Broadcast_Scheduled_Area_Li,
    _f4Broadcast_Scheduled_Area_Li,
    _f5Broadcast_Cancelled_Area_Li,
    _f6Broadcast_Cancelled_Area_Li,
    _fBroadcast_Empty_Area_List,
    _f7Broadcast_Empty_Area_List_5,
    _fCause,
    _f8Concurrent_Warning_Message_,
    _fCriticality_Diagnostics,
    _fData_Coding_Scheme,
    _fExtended_Repetition_Period,
    _fFailed_Cell_List,
    _fFailed_Cell_List_NR,
    _fGlobal_ENB_ID,
    _fGlobal_RAN_Node_ID,
    _fGlobal_GNB_ID,
    _fList_of_TAIs,
    _fList_of_TAIs_Restart,
    _fList_of_EAIs_Restart,
    _fList_of_5GS_TAIs,
    _f9List_of_5GS_Cells_for_Failu,
    _fList_of_5GS_TAI_for_Restart,
    _fMessage_Identifier,
    _f10Number_of_Broadcasts_Reque,
    _fNgENB_ID,
    _fOmc_Id,
    _fRepetition_Period,
    _fRestarted_Cell_List,
    _fRAT_Selector_5GS,
    _fRestarted_Cell_List_NR,
    _f11Send_Write_Replace_Warning,
    _fSend_Stop_Warning_Indication,
    _fSerial_Number,
    _fStop_All_Indicator,
    _fUnknown_Tracking_Area_List,
    _f12Unknown_5GS_Tracking_Area_,
    _fWarning_Area_List,
    _fWarning_Message_Content,
    _fWarning_Area_Coordinates,
    _fWarning_Security_Information,
    _fWarning_Type,
    _fWarning_Area_List_5GS
};
#endif
#ifdef OSSPRINT
static _print_pdu_ const _PrintPDU[52] = {
    { _pSBC_AP_PDU, (char *)"SBC-AP-PDU" },
    { _p0Write_Replace_Warning_Reque, (char *)"Write-Replace-Warning-Request" },
    { _p1Write_Replace_Warning_Respo, (char *)"Write-Replace-Warning-Response" },
    { _pStop_Warning_Request, (char *)"Stop-Warning-Request" },
    { _pStop_Warning_Response, (char *)"Stop-Warning-Response" },
    { _p2Write_Replace_Warning_Indic, (char *)"Write-Replace-Warning-Indication" },
    { _pStop_Warning_Indication, (char *)"Stop-Warning-Indication" },
    { _pPWS_Restart_Indication, (char *)"PWS-Restart-Indication" },
    { _pPWS_Failure_Indication, (char *)"PWS-Failure-Indication" },
    { _pError_Indication, (char *)"Error-Indication" },
    { _p3Broadcast_Scheduled_Area_Li, (char *)"Broadcast-Scheduled-Area-List" },
    { _p4Broadcast_Scheduled_Area_Li, (char *)"Broadcast-Scheduled-Area-List-5GS" },
    { _p5Broadcast_Cancelled_Area_Li, (char *)"Broadcast-Cancelled-Area-List" },
    { _p6Broadcast_Cancelled_Area_Li, (char *)"Broadcast-Cancelled-Area-List-5GS" },
    { _pBroadcast_Empty_Area_List, (char *)"Broadcast-Empty-Area-List" },
    { _p7Broadcast_Empty_Area_List_5, (char *)"Broadcast-Empty-Area-List-5GS" },
    { _pCause, (char *)"Cause" },
    { _p8Concurrent_Warning_Message_, (char *)"Concurrent-Warning-Message-Indicator" },
    { _pCriticality_Diagnostics, (char *)"Criticality-Diagnostics" },
    { _pData_Coding_Scheme, (char *)"Data-Coding-Scheme" },
    { _pExtended_Repetition_Period, (char *)"Extended-Repetition-Period" },
    { _pFailed_Cell_List, (char *)"Failed-Cell-List" },
    { _pFailed_Cell_List_NR, (char *)"Failed-Cell-List-NR" },
    { _pGlobal_ENB_ID, (char *)"Global-ENB-ID" },
    { _pGlobal_RAN_Node_ID, (char *)"Global-RAN-Node-ID" },
    { _pGlobal_GNB_ID, (char *)"Global-GNB-ID" },
    { _pList_of_TAIs, (char *)"List-of-TAIs" },
    { _pList_of_TAIs_Restart, (char *)"List-of-TAIs-Restart" },
    { _pList_of_EAIs_Restart, (char *)"List-of-EAIs-Restart" },
    { _pList_of_5GS_TAIs, (char *)"List-of-5GS-TAIs" },
    { _p9List_of_5GS_Cells_for_Failu, (char *)"List-of-5GS-Cells-for-Failure" },
    { _pList_of_5GS_TAI_for_Restart, (char *)"List-of-5GS-TAI-for-Restart" },
    { _pMessage_Identifier, (char *)"Message-Identifier" },
    { _p10Number_of_Broadcasts_Reque, (char *)"Number-of-Broadcasts-Requested" },
    { _pNgENB_ID, (char *)"NgENB-ID" },
    { _pOmc_Id, (char *)"Omc-Id" },
    { _pRepetition_Period, (char *)"Repetition-Period" },
    { _pRestarted_Cell_List, (char *)"Restarted-Cell-List" },
    { _pRAT_Selector_5GS, (char *)"RAT-Selector-5GS" },
    { _pRestarted_Cell_List_NR, (char *)"Restarted-Cell-List-NR" },
    { _p11Send_Write_Replace_Warning, (char *)"Send-Write-Replace-Warning-Indication" },
    { _pSend_Stop_Warning_Indication, (char *)"Send-Stop-Warning-Indication" },
    { _pSerial_Number, (char *)"Serial-Number" },
    { _pStop_All_Indicator, (char *)"Stop-All-Indicator" },
    { _pUnknown_Tracking_Area_List, (char *)"Unknown-Tracking-Area-List" },
    { _p12Unknown_5GS_Tracking_Area_, (char *)"Unknown-5GS-Tracking-Area-List" },
    { _pWarning_Area_List, (char *)"Warning-Area-List" },
    { _pWarning_Message_Content, (char *)"Warning-Message-Content" },
    { _pWarning_Area_Coordinates, (char *)"Warning-Area-Coordinates" },
    { _pWarning_Security_Information, (char *)"Warning-Security-Information" },
    { _pWarning_Type, (char *)"Warning-Type" },
    { _pWarning_Area_List_5GS, (char *)"Warning-Area-List-5GS" }
};
#endif

/* TOED internal function implementations */

#if OSSDEBUG > 1
static const _Context_Id _context_id[] = {
    {(char *)"pLMNidentity", (char *)"PLMNidentity", _octetstring_type},
    {(char *)"eNB-ID", (char *)"ENB-ID", _choice_type},
    {(char *)"iE-Extensions", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"global-GNB-ID", (char *)"Global-GNB-ID", _sequence_type},
    {(char *)"global-NgENB-ID", (char *)"Global-NgENB-ID", _sequence_type},
    {(char *)"ngENB-ID", (char *)"ENB-ID", _choice_type},
    {(char *)"gNB-ID", (char *)"GNB-ID", _choice_type},
    {(char *)"gNB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"macroENB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"homeENB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"short-macroENB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"long-macroENB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"cell-ID", (char *)"CellIdentity", _bitstring_type},
    {(char *)"nRCellIdentity", (char *)"NRCellIdentity", _bitstring_type},
    {NULL, (char *)"EUTRAN-CGI", _sequence_type},
    {NULL, (char *)"Emergency-Area-ID", _octetstring_type},
    {(char *)"emergencyAreaID", (char *)"Emergency-Area-ID", _octetstring_type},
    {(char *)"scheduledCellinEAI", (char *)"ScheduledCellinEAI", _sequence_of_type},
    {NULL, (char *)"ScheduledCellinEAI-Item", _sequence_type},
    {(char *)"eCGI", (char *)"EUTRAN-CGI", _sequence_type},
    {NULL, (char *)"EmergencyAreaID-Broadcast-List-Item", _sequence_type},
    {(char *)"cancelledCellinEAI", (char *)"CancelledCellinEAI", _sequence_of_type},
    {NULL, (char *)"CancelledCellinEAI-Item", _sequence_type},
    {(char *)"numberOfBroadcasts", (char *)"NumberOfBroadcasts", _integer_type},
    {NULL, (char *)"EmergencyAreaID-Cancelled-Item", _sequence_type},
    {(char *)"tAC", (char *)"TAC", _octetstring_type},
    {(char *)"tai", (char *)"TAI", _sequence_type},
    {(char *)"tAC-5GS", (char *)"TAC-5GS", _octetstring_type},
    {(char *)"SBC-AP-PDU", (char *)"CHOICE", _choice_type},
    {(char *)"initiatingMessage", (char *)"InitiatingMessage", _sequence_type},
    {(char *)"procedureCode", (char *)"ProcedureCode", _integer_type},
    {(char *)"criticality", (char *)"Criticality", _enumerated_type},
    {(char *)"value", (char *)"OpenType", _opentype},
    {(char *)"successfulOutcome", (char *)"SuccessfulOutcome", _sequence_type},
    {(char *)"unsuccessfulOutcome", (char *)"UnsuccessfulOutcome", _sequence_type},
    {(char *)"Write-Replace-Warning-Request", (char *)"SEQUENCE", _sequence_type},
    {(char *)"protocolIEs", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"protocolExtensions", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"Write-Replace-Warning-Response", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Stop-Warning-Request", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Stop-Warning-Response", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Write-Replace-Warning-Indication", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Stop-Warning-Indication", (char *)"SEQUENCE", _sequence_type},
    {(char *)"PWS-Restart-Indication", (char *)"SEQUENCE", _sequence_type},
    {(char *)"PWS-Failure-Indication", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Error-Indication", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Broadcast-Scheduled-Area-List", (char *)"SEQUENCE", _sequence_type},
    {(char *)"cellId-Broadcast-List", (char *)"CellId-Broadcast-List", _sequence_of_type},
    {NULL, (char *)"CellId-Broadcast-List-Item", _sequence_type},
    {(char *)"tAI-Broadcast-List", (char *)"TAI-Broadcast-List", _sequence_of_type},
    {NULL, (char *)"TAI-Broadcast-List-Item", _sequence_type},
    {(char *)"tAI", (char *)"TAI", _sequence_type},
    {(char *)"scheduledCellinTAI", (char *)"ScheduledCellinTAI", _sequence_of_type},
    {NULL, (char *)"ScheduledCellinTAI-Item", _sequence_type},
    {(char *)"emergencyAreaID-Broadcast-List", (char *)"EmergencyAreaID-Broadcast-List", _sequence_of_type},
    {(char *)"Broadcast-Scheduled-Area-List-5GS", (char *)"SEQUENCE", _sequence_type},
    {(char *)"cellId-Broadcast-List-5GS", (char *)"CellId-Broadcast-List-5GS", _sequence_of_type},
    {NULL, (char *)"SEQUENCE", _sequence_type},
    {(char *)"nR-CGI", (char *)"NR-CGI", _sequence_type},
    {(char *)"tAI-Broadcast-List-5GS", (char *)"TAI-Broadcast-List-5GS", _sequence_of_type},
    {(char *)"tAI-5GS", (char *)"TAI-5GS", _sequence_type},
    {(char *)"scheduledCellinTAI-5GS", (char *)"ScheduledCellinTAI-5GS", _sequence_of_type},
    {(char *)"Broadcast-Cancelled-Area-List", (char *)"SEQUENCE", _sequence_type},
    {(char *)"cellID-Cancelled-List", (char *)"CellID-Cancelled-List", _sequence_of_type},
    {NULL, (char *)"CellID-Cancelled-Item", _sequence_type},
    {(char *)"tAI-Cancelled-List", (char *)"TAI-Cancelled-List", _sequence_of_type},
    {NULL, (char *)"TAI-Cancelled-List-Item", _sequence_type},
    {(char *)"cancelledCellinTAI", (char *)"CancelledCellinTAI", _sequence_of_type},
    {NULL, (char *)"CancelledCellinTAI-Item", _sequence_type},
    {(char *)"emergencyAreaID-Cancelled-List", (char *)"EmergencyAreaID-Cancelled-List", _sequence_of_type},
    {(char *)"Broadcast-Cancelled-Area-List-5GS", (char *)"SEQUENCE", _sequence_type},
    {(char *)"cellID-Cancelled-List-5GS", (char *)"CellID-Cancelled-List-5GS", _sequence_of_type},
    {(char *)"tAI-Cancelled-List-5GS", (char *)"TAI-Cancelled-List-5GS", _sequence_of_type},
    {(char *)"cancelledCellinTAI-5GS", (char *)"CancelledCellinTAI-5GS", _sequence_of_type},
    {(char *)"Broadcast-Empty-Area-List", (char *)"SEQUENCE OF", _sequence_of_type},
    {NULL, (char *)"Global-ENB-ID", _sequence_type},
    {(char *)"Broadcast-Empty-Area-List-5GS", (char *)"SEQUENCE OF", _sequence_of_type},
    {NULL, (char *)"Global-RAN-Node-ID", _choice_type},
    {(char *)"Cause", (char *)"INTEGER", _integer_type},
    {(char *)"Concurrent-Warning-Message-Indicator", (char *)"ENUMERATED", _enumerated_type},
    {(char *)"Criticality-Diagnostics", (char *)"SEQUENCE", _sequence_type},
    {(char *)"triggeringMessage", (char *)"TriggeringMessage", _enumerated_type},
    {(char *)"procedureCriticality", (char *)"Criticality", _enumerated_type},
    {(char *)"iE-CriticalityDiagnostics", (char *)"CriticalityDiagnostics-IE-List", _sequence_of_type},
    {(char *)"iECriticality", (char *)"Criticality", _enumerated_type},
    {(char *)"iE-ID", (char *)"ProtocolIE-ID", _integer_type},
    {(char *)"typeOfError", (char *)"TypeOfError", _enumerated_type},
    {(char *)"Data-Coding-Scheme", (char *)"BIT STRING", _bitstring_type},
    {(char *)"Extended-Repetition-Period", (char *)"INTEGER", _integer_type},
    {(char *)"Failed-Cell-List", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"Failed-Cell-List-NR", (char *)"SEQUENCE OF", _sequence_of_type},
    {NULL, (char *)"NR-CGI", _sequence_type},
    {(char *)"Global-ENB-ID", (char *)"SEQUENCE", _sequence_type},
    {(char *)"Global-RAN-Node-ID", (char *)"CHOICE", _choice_type},
    {(char *)"Global-GNB-ID", (char *)"SEQUENCE", _sequence_type},
    {(char *)"List-of-TAIs", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"List-of-TAIs-Restart", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"List-of-EAIs-Restart", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"List-of-5GS-TAIs", (char *)"SEQUENCE OF", _sequence_of_type},
    {NULL, (char *)"TAI-5GS", _sequence_type},
    {(char *)"List-of-5GS-Cells-for-Failure", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"List-of-5GS-TAI-for-Restart", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"Message-Identifier", (char *)"BIT STRING", _bitstring_type},
    {(char *)"Number-of-Broadcasts-Requested", (char *)"INTEGER", _integer_type},
    {(char *)"NgENB-ID", (char *)"CHOICE", _choice_type},
    {(char *)"macroNgENB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"shortMacroNgENB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"longMacroNgENB-ID", (char *)"BIT STRING", _bitstring_type},
    {(char *)"Omc-Id", (char *)"OCTET STRING", _octetstring_type},
    {(char *)"Repetition-Period", (char *)"INTEGER", _integer_type},
    {(char *)"Restarted-Cell-List", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"RAT-Selector-5GS", (char *)"ENUMERATED", _enumerated_type},
    {(char *)"Restarted-Cell-List-NR", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"Send-Write-Replace-Warning-Indication", (char *)"ENUMERATED", _enumerated_type},
    {(char *)"Send-Stop-Warning-Indication", (char *)"ENUMERATED", _enumerated_type},
    {(char *)"Serial-Number", (char *)"BIT STRING", _bitstring_type},
    {(char *)"Stop-All-Indicator", (char *)"ENUMERATED", _enumerated_type},
    {(char *)"Unknown-Tracking-Area-List", (char *)"SEQUENCE OF", _sequence_of_type},
    {NULL, (char *)"TAI", _sequence_type},
    {(char *)"Unknown-5GS-Tracking-Area-List", (char *)"SEQUENCE OF", _sequence_of_type},
    {(char *)"Warning-Area-List", (char *)"CHOICE", _choice_type},
    {(char *)"cell-ID-List", (char *)"ECGIList", _sequence_of_type},
    {(char *)"tracking-Area-List-for-Warning", (char *)"TAI-List-for-Warning", _sequence_of_type},
    {(char *)"emergency-Area-ID-List", (char *)"Emergency-Area-ID-List", _sequence_of_type},
    {(char *)"Warning-Message-Content", (char *)"OCTET STRING", _octetstring_type},
    {(char *)"Warning-Area-Coordinates", (char *)"OCTET STRING", _octetstring_type},
    {(char *)"Warning-Security-Information", (char *)"OCTET STRING", _octetstring_type},
    {(char *)"Warning-Type", (char *)"OCTET STRING", _octetstring_type},
    {(char *)"Warning-Area-List-5GS", (char *)"CHOICE", _choice_type},
    {(char *)"nR-CGIList", (char *)"NR-CGIList", _sequence_of_type},
    {(char *)"tAIList-5GS", (char *)"TAI-5GS", _sequence_type},
    {(char *)"emergencyAreaIDList", (char *)"Emergency-Area-ID-List", _sequence_of_type},
    {(char *)"id", (char *)"ProtocolIE-ID", _integer_type},
    {(char *)"id", (char *)"ProtocolExtensionID", _integer_type},
    {(char *)"extensionValue", (char *)"OpenType", _opentype}
};
#endif


static OSS_INT32 const _v84[4] = {
  0, 1, 2, 3
};
static OSS_INT32 const _v86[1] = {INT_MAX};

static struct _enum_data const _enums[] = {
	    { 3, (OSS_INT32 *)_v84 },
	    { 1, (OSS_INT32 *)_v84 },
	    { 4, (OSS_INT32 *)_v84 },
	    { 2, (OSS_INT32 *)_v84 }, { 1, (OSS_INT32 *)_v86 },
	    { 1, (OSS_INT32 *)_v84 },
	    { 1, (OSS_INT32 *)_v84 },
	    { 1, (OSS_INT32 *)_v84 },
	    { 1, (OSS_INT32 *)_v84 }
};

#ifdef OSSPRINT
static struct _string_data const _sd1[] = {
    {"ignore", 6, 0x02, 1},
    {"notify", 6, 0x02, 2},
    {"reject", 6, 0x02, 0}
};

static struct _string_data const _sd2[] = {
    {"true", 4, 0x02, 0}
};

static struct _string_data const _sd3[] = {
    {"unsuccessful-outcome", 20, 0x02, 2},
    {"successful-outcome", 18, 0x02, 1},
    {"outcome", 7, 0x02, 3},
    {"initiating-message", 18, 0x02, 0}
};

static struct _string_data const _sd4[] = {
    {"missing", 7, 0x02, 1},
    {"not-understood", 14, 0x02, 0}
};

#endif

#ifdef OSSPRINT
static struct _string_search_data const _ssd[] = {
    {3, 0, _sd1, NULL},
    {1, 0, _sd2, NULL},
    {4, 0, _sd3, NULL},
    {2, INT_MAX, _sd4, NULL}
};
#endif


#ifdef OSS_COPY_VALUE
static void _oss_cpy_new_open_type (OssGlobal *_g, int *_pduNum,
		OssBuf *_obuf, OssBuf *_cbuf, void *_odecoded, void **_cdecoded);
#endif /* OSS_COPY_VALUE */

#ifdef OSS_COMPARE_VALUE
static int _oss_cmp_new_open_type (OssGlobal *_g, int _pduNum1, int _pduNum2,
		OssBuf *_obuf1, OssBuf *_obuf2, void *_decoded1, void *_decoded2);
#endif /* OSS_COMPARE_VALUE */

static void _dpo_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _out_data, int _IEsSetParam);
static void _epo_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _in_data);
static void _dpo_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _out_data, int _ExtensionSetParam);
static void _epo_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _in_data);
#if (OSS_TOED_API_LEVEL < 22) || !defined(OSSNOFREEPDU)
static void _fo_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _data_ptr);
static void _fo_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _data_ptr);
#endif
#ifdef OSSPRINT
static void _po_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _data_ptr);
static void _po_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _data_ptr);
#endif
static int _gmSBC_AP_ELEMENTARY_PROCEDURE(OssGlobal * _g, unsigned short _fCnt, void ** _fVal, unsigned short ** _fId, _SBC_AP_ELEMENTARY_PROCEDURE * _object)
{
    int _res = 0;
    unsigned short _i;

    for (_i = 0; _i < _fCnt; _i++) {
	if (!_fVal[_i])
	    return 1;
	switch (_fId[_i][0]) {
	    case 0:
		if (*(int *)(_fVal[_i]) != (int)((*_object).InitiatingMessage))
		    return 1;
		break;
	    case 1:
		if (!((*_object).bit_mask & 0x80000000))
		    return 1;
		if (*(int *)(_fVal[_i]) != (int)((*_object).SuccessfulOutcome))
		    return 1;
		break;
	    case 2:
		if (!((*_object).bit_mask & 0x40000000))
		    return 1;
		if (*(int *)(_fVal[_i]) != (int)((*_object).UnsuccessfulOutcome))
		    return 1;
		break;
	    case 3:
		if ((*(OSS_UINT32  *)(_fVal[_i])) != (*_object).procedureCode)
		    return 1;
		break;
	    case 4:
		if ((*_object).bit_mask & 0x20000000) {
		    if ((*(enum Criticality  *)(_fVal[_i])) != (*_object).criticality)
			return 1;
		} else {
		    if ((*(enum Criticality  *)(_fVal[_i])) != _v0)
			return 1;
		}
		break;
	    default:
		return 1;
	}
    }
    (void)_g;
    return _res;
}

static int _goSBC_AP_ELEMENTARY_PROCEDURE(struct ossGlobal * _g, unsigned int osetNum, unsigned short fCnt, void ** fVal, unsigned short ** fId, _SBC_AP_ELEMENTARY_PROCEDURE ** obj)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    ObjectSetEntry *oset;
    _SBC_AP_ELEMENTARY_PROCEDURE *object;
    int res;

    if (osetNum < 50) {
	XOSetInfoEntry	*xinfo = _oss_c->reserved.fields.ext->_pxOsetInfo;
	unsigned char	*flags = xinfo[osetNum - 1].flags;
	unsigned int	f = 0;

	oset = xinfo[osetNum - 1].oset;
	for (; oset; oset = oset->next, f++) {
	    object = (_SBC_AP_ELEMENTARY_PROCEDURE *)oset->object;
	    if (object && !(flags && (flags[f/8] & (1 << f%8))))
		if ((res = _gmSBC_AP_ELEMENTARY_PROCEDURE(_g, fCnt, fVal, fId, object)) <= 0) {
		    *obj = object;
		    return res;
		}
	}
	oset = xinfo[osetNum - 1].xoset;
    } else
	return 1;

    for (; oset; oset = oset->next) {
	object = (_SBC_AP_ELEMENTARY_PROCEDURE *)oset->object;
	if (object)
	    if ((res = _gmSBC_AP_ELEMENTARY_PROCEDURE(_g, fCnt, fVal, fId, object)) <= 0) {
		*obj = object;
		return res;
	    }
    }

    return 1;
}

static int _gmSBC_AP_PROTOCOL_IES(OssGlobal * _g, unsigned short _fCnt, void ** _fVal, unsigned short ** _fId, _SBC_AP_PROTOCOL_IES * _object)
{
    int _res = 0;
    unsigned short _i;

    for (_i = 0; _i < _fCnt; _i++) {
	if (!_fVal[_i])
	    return 1;
	switch (_fId[_i][0]) {
	    case 0:
		if ((*(OSS_UINT32  *)(_fVal[_i])) != (*_object).id)
		    return 1;
		break;
	    case 1:
		if ((*_object).bit_mask & 0x80000000) {
		    if ((*(enum Criticality  *)(_fVal[_i])) != (*_object).criticality)
			return 1;
		} else {
		    if ((*(enum Criticality  *)(_fVal[_i])) != _v15)
			return 1;
		}
		break;
	    case 2:
		if (*(int *)(_fVal[_i]) != (int)((*_object).Value))
		    return 1;
		break;
	    case 3:
		if ((*(enum Presence  *)(_fVal[_i])) != (*_object).presence)
		    return 1;
		break;
	    default:
		return 1;
	}
    }
    (void)_g;
    return _res;
}

static int _goSBC_AP_PROTOCOL_IES(struct ossGlobal * _g, unsigned int osetNum, unsigned short fCnt, void ** fVal, unsigned short ** fId, _SBC_AP_PROTOCOL_IES ** obj)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    ObjectSetEntry *oset;
    _SBC_AP_PROTOCOL_IES *object;
    int res;

    if (osetNum < 50) {
	XOSetInfoEntry	*xinfo = _oss_c->reserved.fields.ext->_pxOsetInfo;
	unsigned char	*flags = xinfo[osetNum - 1].flags;
	unsigned int	f = 0;

	oset = xinfo[osetNum - 1].oset;
	for (; oset; oset = oset->next, f++) {
	    object = (_SBC_AP_PROTOCOL_IES *)oset->object;
	    if (object && !(flags && (flags[f/8] & (1 << f%8))))
		if ((res = _gmSBC_AP_PROTOCOL_IES(_g, fCnt, fVal, fId, object)) <= 0) {
		    *obj = object;
		    return res;
		}
	}
	oset = xinfo[osetNum - 1].xoset;
    } else
	return 1;

    for (; oset; oset = oset->next) {
	object = (_SBC_AP_PROTOCOL_IES *)oset->object;
	if (object)
	    if ((res = _gmSBC_AP_PROTOCOL_IES(_g, fCnt, fVal, fId, object)) <= 0) {
		*obj = object;
		return res;
	    }
    }

    return 1;
}

static int _gmSBC_AP_PROTOCOL_EXTENSION(OssGlobal * _g, unsigned short _fCnt, void ** _fVal, unsigned short ** _fId, _SBC_AP_PROTOCOL_EXTENSION * _object)
{
    int _res = 0;
    unsigned short _i;

    for (_i = 0; _i < _fCnt; _i++) {
	if (!_fVal[_i])
	    return 1;
	switch (_fId[_i][0]) {
	    case 0:
		if ((*(OSS_UINT32  *)(_fVal[_i])) != (*_object).id)
		    return 1;
		break;
	    case 1:
		if ((*_object).bit_mask & 0x80000000) {
		    if ((*(enum Criticality  *)(_fVal[_i])) != (*_object).criticality)
			return 1;
		} else {
		    if ((*(enum Criticality  *)(_fVal[_i])) != _v32)
			return 1;
		}
		break;
	    case 2:
		if (*(int *)(_fVal[_i]) != (int)((*_object).Extension))
		    return 1;
		break;
	    case 3:
		if ((*(enum Presence  *)(_fVal[_i])) != (*_object).presence)
		    return 1;
		break;
	    default:
		return 1;
	}
    }
    (void)_g;
    return _res;
}

static int _goSBC_AP_PROTOCOL_EXTENSION(struct ossGlobal * _g, unsigned int osetNum, unsigned short fCnt, void ** fVal, unsigned short ** fId, _SBC_AP_PROTOCOL_EXTENSION ** obj)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    ObjectSetEntry *oset;
    _SBC_AP_PROTOCOL_EXTENSION *object;
    int res;

    if (osetNum < 50) {
	XOSetInfoEntry	*xinfo = _oss_c->reserved.fields.ext->_pxOsetInfo;
	unsigned char	*flags = xinfo[osetNum - 1].flags;
	unsigned int	f = 0;

	oset = xinfo[osetNum - 1].oset;
	for (; oset; oset = oset->next, f++) {
	    object = (_SBC_AP_PROTOCOL_EXTENSION *)oset->object;
	    if (object && !(flags && (flags[f/8] & (1 << f%8))))
		if ((res = _gmSBC_AP_PROTOCOL_EXTENSION(_g, fCnt, fVal, fId, object)) <= 0) {
		    *obj = object;
		    return res;
		}
	}
	oset = xinfo[osetNum - 1].xoset;
    } else
	return 1;

    for (; oset; oset = oset->next) {
	object = (_SBC_AP_PROTOCOL_EXTENSION *)oset->object;
	if (object)
	    if ((res = _gmSBC_AP_PROTOCOL_EXTENSION(_g, fCnt, fVal, fId, object)) <= 0) {
		*obj = object;
		return res;
	    }
    }

    return 1;
}

#ifdef OSS_INFOOBJ_API
static int _cmSBC_AP_ELEMENTARY_PROCEDURE(OssGlobal * _g, _SBC_AP_ELEMENTARY_PROCEDURE  * _odata, _SBC_AP_ELEMENTARY_PROCEDURE  * _cdata, int _mode)
{
    int _res = 0;

    if ((*_cdata).procedureCode != (*_odata).procedureCode)
	return 1;
    if (_mode)
	return 0;
    if ((*_odata).InitiatingMessage != (*_cdata).InitiatingMessage)
	return 1;
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	if ((*_odata).SuccessfulOutcome != (*_cdata).SuccessfulOutcome)
	    return 1;
    }
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x40000000)
	return 1;
    if ((*_odata).bit_mask & 0x40000000) {
	if ((*_odata).UnsuccessfulOutcome != (*_cdata).UnsuccessfulOutcome)
	    return 1;
    }
    if (((*_odata).bit_mask & (*_cdata).bit_mask) & 0x20000000) {
	if ((*_cdata).criticality != (*_odata).criticality)
	    return 1;
    } else {
	if ((*_odata).bit_mask & 0x20000000) {
	    if (_v0 != (*_odata).criticality)
		return 1;
	}
	if ((*_cdata).bit_mask & 0x20000000) {
	    if ((*_cdata).criticality != _v0)
		return 1;
	}
    }
    (void)_g;

    return _res;
}

static int _cmSBC_AP_PROTOCOL_IES(OssGlobal * _g, _SBC_AP_PROTOCOL_IES  * _odata, _SBC_AP_PROTOCOL_IES  * _cdata, int _mode)
{
    int _res = 0;

    if ((*_cdata).id != (*_odata).id)
	return 1;
    if (_mode)
	return 0;
    if (((*_odata).bit_mask & (*_cdata).bit_mask) & 0x80000000) {
	if ((*_cdata).criticality != (*_odata).criticality)
	    return 1;
    } else {
	if ((*_odata).bit_mask & 0x80000000) {
	    if (_v15 != (*_odata).criticality)
		return 1;
	}
	if ((*_cdata).bit_mask & 0x80000000) {
	    if ((*_cdata).criticality != _v15)
		return 1;
	}
    }
    if ((*_odata).Value != (*_cdata).Value)
	return 1;
    if ((*_cdata).presence != (*_odata).presence)
	return 1;
    (void)_g;

    return _res;
}

static int _cmSBC_AP_PROTOCOL_EXTENSION(OssGlobal * _g, _SBC_AP_PROTOCOL_EXTENSION  * _odata, _SBC_AP_PROTOCOL_EXTENSION  * _cdata, int _mode)
{
    int _res = 0;

    if ((*_cdata).id != (*_odata).id)
	return 1;
    if (_mode)
	return 0;
    if (((*_odata).bit_mask & (*_cdata).bit_mask) & 0x80000000) {
	if ((*_cdata).criticality != (*_odata).criticality)
	    return 1;
    } else {
	if ((*_odata).bit_mask & 0x80000000) {
	    if (_v32 != (*_odata).criticality)
		return 1;
	}
	if ((*_cdata).bit_mask & 0x80000000) {
	    if ((*_cdata).criticality != _v32)
		return 1;
	}
    }
    if ((*_odata).Extension != (*_cdata).Extension)
	return 1;
    if ((*_cdata).presence != (*_odata).presence)
	return 1;
    (void)_g;

    return _res;
}

static int _coSBC_AP_Containers(struct ossGlobal * _g, int osetNum, void * obj1, void  *obj2, int mode)
{
    int     res = 1;

    switch (mode) {
	case 0: case 1: {
	    switch (osetNum - 1) {
		case 0: case 1: case 2: 
		    res = _cmSBC_AP_ELEMENTARY_PROCEDURE(_g, (_SBC_AP_ELEMENTARY_PROCEDURE *)obj1, (_SBC_AP_ELEMENTARY_PROCEDURE *)obj2, mode);
		    break;

		case 3: case 5: case 7: case 9: case 11: case 13: 
		case 15: case 17: case 19: 
		    res = _cmSBC_AP_PROTOCOL_IES(_g, (_SBC_AP_PROTOCOL_IES *)obj1, (_SBC_AP_PROTOCOL_IES *)obj2, mode);
		    break;

		case 4: case 6: case 8: case 10: case 12: case 14: 
		case 16: case 18: case 20: case 21: case 22: case 23: 
		case 24: case 25: case 26: case 27: case 28: case 29: 
		case 30: case 31: case 32: case 33: case 34: case 35: 
		case 36: case 37: case 38: case 39: case 40: case 41: 
		case 42: case 43: case 44: case 45: case 46: case 47: 
		case 48: 
		    res = _cmSBC_AP_PROTOCOL_EXTENSION(_g, (_SBC_AP_PROTOCOL_EXTENSION *)obj1, (_SBC_AP_PROTOCOL_EXTENSION *)obj2, mode);
		    break;
		default:;
	    }
	}   break;
	case 2: {
	    switch (osetNum - 1) {
		case 0: case 1: case 2: {
		    static unsigned short const _unq_ids[1] = { 3 };
		    static unsigned short const * const _unq_fid[1] = { _unq_ids };
		    res = _goSBC_AP_ELEMENTARY_PROCEDURE(_g, osetNum, 1, &obj2, (unsigned short**)_unq_fid, (_SBC_AP_ELEMENTARY_PROCEDURE**)obj1);
		}   break;

		case 3: case 5: case 7: case 9: case 11: case 13: 
		case 15: case 17: case 19: {
		    static unsigned short const _unq_ids[1] = { 0 };
		    static unsigned short const * const _unq_fid[1] = { _unq_ids };
		    res = _goSBC_AP_PROTOCOL_IES(_g, osetNum, 1, &obj2, (unsigned short**)_unq_fid, (_SBC_AP_PROTOCOL_IES**)obj1);
		}   break;

		case 4: case 6: case 8: case 10: case 12: case 14: 
		case 16: case 18: case 20: case 21: case 22: case 23: 
		case 24: case 25: case 26: case 27: case 28: case 29: 
		case 30: case 31: case 32: case 33: case 34: case 35: 
		case 36: case 37: case 38: case 39: case 40: case 41: 
		case 42: case 43: case 44: case 45: case 46: case 47: 
		case 48: {
		    static unsigned short const _unq_ids[1] = { 0 };
		    static unsigned short const * const _unq_fid[1] = { _unq_ids };
		    res = _goSBC_AP_PROTOCOL_EXTENSION(_g, osetNum, 1, &obj2, (unsigned short**)_unq_fid, (_SBC_AP_PROTOCOL_EXTENSION**)obj1);
		}   break;
		default:;
	    }
	}   break;
	default:;
    }

    return res;
}

#endif

#ifdef OSS_NO_DETAIL_MM_ERROR_CODES
static void _oeSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf)
{
    (void)_pdunum;	/* to avoid C-compilation warning */
    (void)_inbuf;	/* to avoid C-compilation warning */
    _oss_toed_error(_g, _unlinked_encrules_err, "OER/COER");
}

static void * _odSBC_AP_Containers(OssGlobal * _g, int _pdunum)
{
    (void)_pdunum;	/* to avoid C-compilation warning */
    _oss_toed_error(_g, _unlinked_encrules_err, "OER/COER");
    return NULL;
}

#endif
#if OSS_TOED_API_LEVEL >= 34
static void _jeSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf)
{
    (void)_pdunum;	/* to avoid C-compilation warning */
    (void)_inbuf;	/* to avoid C-compilation warning */
    _oss_toed_error(_g, _unlinked_encrules_err, "JSON");
}

static void * _jdSBC_AP_Containers(OssGlobal * _g, int _pdunum)
{
    (void)_pdunum;	/* to avoid C-compilation warning */
    _oss_toed_error(_g, _unlinked_encrules_err, "JSON");
    return NULL;
}

#endif
#if OSS_TOED_API_LEVEL >= 41
static void _veSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf)
{
    (void)_pdunum;	/* to avoid C-compilation warning */
    (void)_inbuf;	/* to avoid C-compilation warning */
    _oss_toed_error(_g, _unlinked_encrules_err, "AVN");
}

static void * _vdSBC_AP_Containers(OssGlobal * _g, int _pdunum)
{
    (void)_pdunum;	/* to avoid C-compilation warning */
    _oss_toed_error(_g, _unlinked_encrules_err, "AVN");
    return NULL;
}

#endif
static void _ep_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 0)
	if (_in_data->pLMNidentity.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->pLMNidentity.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->pLMNidentity.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->pLMNidentity.length);
	}
	OSS_CNTX_SET(1)
	_ep_ENB_ID(_g, &_in_data->eNB_ID);
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	OSS_CNTX_INIT

	if (_in_data->choice <= 2) {

	    _oss_append_1bit_unaligned(_g, 0x00);
	    _oss_penc_nonneg_1int(_g, _in_data->choice - 1);
	}
	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 3)
#ifndef OSS_DO_NOT_CHECK_POINTERS
	    if (_in_data->u.global_GNB_ID == NULL)
		_oss_enc_error(_g, _bad_pointer, 0L);
#endif
	    _ep_Global_GNB_ID(_g, _in_data->u.global_GNB_ID);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 4)
#ifndef OSS_DO_NOT_CHECK_POINTERS
	    if (_in_data->u.global_NgENB_ID == NULL)
		_oss_enc_error(_g, _bad_pointer, 0L);
#endif
	    {
		unsigned char _extPres = 0x00;
		OSS_CNTX_INIT

		_oss_append_1bit_unaligned(_g, _extPres);
		_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->u.global_NgENB_ID->bit_mask >> 24));
		OSS_CNTX_PUSH(_oss_c, 0)
		if (_in_data->u.global_NgENB_ID->pLMNidentity.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->u.global_NgENB_ID->pLMNidentity.value, 24);
#else
		    _oss_append(_g, (unsigned char *)_in_data->u.global_NgENB_ID->pLMNidentity.value, 3L*8, Aligned);
#endif
		} else {
		    _oss_enc_error(_g, _sizeConstraint_length, _in_data->u.global_NgENB_ID->pLMNidentity.length);
		}
		OSS_CNTX_SET(5)
		_ep_ENB_ID(_g, &_in_data->u.global_NgENB_ID->ngENB_ID);
		OSS_CNTX_SET(2)
		if (_in_data->u.global_NgENB_ID->bit_mask & 0x80000000) {
		    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->u.global_NgENB_ID->iE_Extensions);
		}
		OSS_CNTX_POP(_oss_c)
	    }
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }

}

static void _ep_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 0)
	if (_in_data->pLMNidentity.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->pLMNidentity.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->pLMNidentity.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->pLMNidentity.length);
	}
	OSS_CNTX_SET(6)
	{
	    OSS_CNTX_INIT

	    if (_in_data->gNB_ID.choice <= 1) {
		_oss_append_1bit_unaligned(_g, 0x00);
	    }
	    switch (_in_data->gNB_ID.choice) {
	    case 1:
		OSS_CNTX_PUSH(_oss_c, 7)
		if (_in_data->gNB_ID.u.gNB_ID.length >= 22 && _in_data->gNB_ID.u.gNB_ID.length <= 32) {
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _in_data->gNB_ID.u.gNB_ID.length, 22, 32);
		    _oss_append(_g, _in_data->gNB_ID.u.gNB_ID.value, _in_data->gNB_ID.u.gNB_ID.length, Aligned);
#else
		    _oss_penc_constr_bit_l(_g, _in_data->gNB_ID.u.gNB_ID.value, _in_data->gNB_ID.u.gNB_ID.length, 22L, 32L, FALSE, 0);
#endif
		} else {
		    _oss_enc_error(_g, _sizeConstraint_length, _in_data->gNB_ID.u.gNB_ID.length);
		}
		break;
	    default:
		_oss_enc_error(_g, _bad_choice, _in_data->gNB_ID.choice);	/* Bad choice selector. */
	    }
	    OSS_CNTX_POP(_oss_c)
	}

	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_ENB_ID(OssGlobal * _g, _ENB_ID * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	OSS_DEF_VAR_ESE(_st)
	OSS_CNTX_INIT

	if (_in_data->choice <= 2) {

	    _oss_append_1bit_unaligned(_g, 0x00);
	    _oss_penc_nonneg_1int(_g, _in_data->choice - 1);
	} else if (_in_data->choice <= 4) {
	    unsigned long _encode_value = _in_data->choice - 3;
	    _oss_append_1bit_unaligned(_g, 0x80);
	    _oss_penc_small_int_l(_g, _encode_value);
	}
	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 8)
	    if (_in_data->u.macroENB_ID.length == 20) {
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_fix_bit(_g, _in_data->u.macroENB_ID.value, 20);
#else
		_oss_penc_constr_bit_l(_g, _in_data->u.macroENB_ID.value, 20, 20, 20, FALSE, 20);
#endif
	    } else {
		_oss_enc_error(_g, _sizeConstraint_length, _in_data->u.macroENB_ID.length);
	    }
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 9)
	    if (_in_data->u.homeENB_ID.length == 28) {
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_fix_bit(_g, _in_data->u.homeENB_ID.value, 28);
#else
		_oss_penc_constr_bit_l(_g, _in_data->u.homeENB_ID.value, 28, 28, 28, FALSE, 28);
#endif
	    } else {
		_oss_enc_error(_g, _sizeConstraint_length, _in_data->u.homeENB_ID.length);
	    }
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 10)
	    _oss_begin_otype_or_ext(_g, &_st);
	    if (_in_data->u.short_macroENB_ID.length == 18) {
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_fix_bit(_g, _in_data->u.short_macroENB_ID.value, 18);
#else
		_oss_penc_constr_bit_l(_g, _in_data->u.short_macroENB_ID.value, 18, 18, 18, FALSE, 18);
#endif
	    } else {
		_oss_enc_error(_g, _sizeConstraint_length, _in_data->u.short_macroENB_ID.length);
	    }
	    _oss_end_otype_or_ext(_g, &_st);
	    break;
	case 4:
	    OSS_CNTX_PUSH(_oss_c, 11)
	    _oss_begin_otype_or_ext(_g, &_st);
	    if (_in_data->u.long_macroENB_ID.length == 21) {
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_fix_bit(_g, _in_data->u.long_macroENB_ID.value, 21);
#else
		_oss_penc_constr_bit_l(_g, _in_data->u.long_macroENB_ID.value, 21, 21, 21, FALSE, 21);
#endif
	    } else {
		_oss_enc_error(_g, _sizeConstraint_length, _in_data->u.long_macroENB_ID.length);
	    }
	    _oss_end_otype_or_ext(_g, &_st);
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }

}

static void _ep_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 0)
	if (_in_data->pLMNidentity.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->pLMNidentity.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->pLMNidentity.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->pLMNidentity.length);
	}
	OSS_CNTX_SET(12)
	if (_in_data->cell_ID.length == 28) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, _in_data->cell_ID.value, 28);
#else
	    _oss_penc_constr_bit_l(_g, _in_data->cell_ID.value, 28, 28, 28, FALSE, 28);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->cell_ID.length);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_NR_CGI(OssGlobal * _g, _NR_CGI * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 0)
	if (_in_data->pLMNidentity.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->pLMNidentity.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->pLMNidentity.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->pLMNidentity.length);
	}
	OSS_CNTX_SET(13)
	if (_in_data->nRCellIdentity.length == 36) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, _in_data->nRCellIdentity.value, 36);
#else
	    _oss_penc_constr_bit_l(_g, _in_data->nRCellIdentity.value, 36, 36, 36, FALSE, 36);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->nRCellIdentity.length);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_ECGIList(OssGlobal * _g, _ECGIList ** _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	_ECGIList * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 14)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_EUTRAN_CGI(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	_Emergency_Area_ID_List * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 15)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		if (_temp->value.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_fix_bit(_g, (unsigned char *)_temp->value.value, 24);
#else
		    _oss_append(_g, (unsigned char *)_temp->value.value, 3L*8, Aligned);
#endif
		} else {
		    _oss_enc_error(_g, _sizeConstraint_length, _temp->value.length);
		}
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 16)
	if (_in_data->emergencyAreaID.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->emergencyAreaID.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->emergencyAreaID.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->emergencyAreaID.length);
	}
	OSS_CNTX_SET(17)
	{
	    _CellId_Broadcast_List * _temp;
	    unsigned int _cnt;
	    OSS_CNTX_INIT

	    for (_cnt = 0, _temp = _in_data->scheduledCellinEAI; _temp; _temp = _temp->next)
		++_cnt;

	    if (_cnt >= 1 && _cnt <= 65535) {
		OSS_CNTX_PUSH(_oss_c, 18)
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
		_oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
		for (_temp = _in_data->scheduledCellinEAI; _temp; _temp = _temp->next) {
		    OSS_CNTX_INCOCC
		    {
			unsigned char _extPres = 0x00;
			OSS_CNTX_INIT

			_oss_append_1bit_unaligned(_g, _extPres);
			_oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			OSS_CNTX_PUSH(_oss_c, 19)
			_ep_EUTRAN_CGI(_g, &_temp->value.eCGI);
			OSS_CNTX_SET(2)
			if (_temp->value.bit_mask & 0x80000000) {
			    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			}
			OSS_CNTX_POP(_oss_c)
		    }
		}
	    } else
		_oss_enc_error(_g, _too_long, _cnt);
	    OSS_CNTX_POP(_oss_c)
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	_EmergencyAreaID_Broadcast_List * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 20)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_13EmergencyAreaID_Broadcast_(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 16)
	if (_in_data->emergencyAreaID.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->emergencyAreaID.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->emergencyAreaID.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->emergencyAreaID.length);
	}
	OSS_CNTX_SET(21)
	{
	    _CellID_Cancelled_List * _temp;
	    unsigned int _cnt;
	    OSS_CNTX_INIT

	    for (_cnt = 0, _temp = _in_data->cancelledCellinEAI; _temp; _temp = _temp->next)
		++_cnt;

	    if (_cnt >= 1 && _cnt <= 65535) {
		OSS_CNTX_PUSH(_oss_c, 22)
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
		_oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
		for (_temp = _in_data->cancelledCellinEAI; _temp; _temp = _temp->next) {
		    OSS_CNTX_INCOCC
		    {
			unsigned char _extPres = 0x00;
			OSS_CNTX_INIT

			_oss_append_1bit_unaligned(_g, _extPres);
			_oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			OSS_CNTX_PUSH(_oss_c, 19)
			_ep_EUTRAN_CGI(_g, &_temp->value.eCGI);
			OSS_CNTX_SET(23)
			if (_temp->value.numberOfBroadcasts <= USHRT_MAX) {
			    unsigned int _encode_value = _temp->value.numberOfBroadcasts;
#if OSS_TOED_API_LEVEL < 20
			    unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
			    _oss_penc_int16_aligned(_g, _encode_value);
#else
			    _field[1] = (unsigned char)(0xFF & _encode_value);
			    _encode_value >>= 8;
			    _field[0] = (unsigned char)(0xFF & _encode_value);
			    _oss_append(_g, _field, 16, Aligned);
#endif
			} else {
			    _oss_enc_error(_g, _valueRange_uinteger, _temp->value.numberOfBroadcasts);
			}
			OSS_CNTX_SET(2)
			if (_temp->value.bit_mask & 0x80000000) {
			    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			}
			OSS_CNTX_POP(_oss_c)
		    }
		}
	    } else
		_oss_enc_error(_g, _too_long, _cnt);
	    OSS_CNTX_POP(_oss_c)
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	_EmergencyAreaID_Cancelled_List * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 24)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_15EmergencyAreaID_Cancelled_(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_TAI(OssGlobal * _g, _TAI * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 0)
	if (_in_data->pLMNidentity.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->pLMNidentity.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->pLMNidentity.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->pLMNidentity.length);
	}
	OSS_CNTX_SET(25)
	if (_in_data->tAC.length == 2) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->tAC.value, 16);
#else
	    _oss_append(_g, (unsigned char *)_in_data->tAC.value, 2L*8, Unaligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->tAC.length);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep__seq43(OssGlobal * _g, _seq43 * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 26)
	_ep_TAI(_g, &_in_data->tai);
	OSS_CNTX_POP(_oss_c)
    }
}

static void _ep_TAI_5GS(OssGlobal * _g, _TAI_5GS * _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 0)
	if (_in_data->pLMNidentity.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->pLMNidentity.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->pLMNidentity.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->pLMNidentity.length);
	}
	OSS_CNTX_SET(27)
	if (_in_data->tAC_5GS.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_fix_bit(_g, (unsigned char *)_in_data->tAC_5GS.value, 24);
#else
	    _oss_append(_g, (unsigned char *)_in_data->tAC_5GS.value, 3L*8, Aligned);
#endif
	} else {
	    _oss_enc_error(_g, _sizeConstraint_length, _in_data->tAC_5GS.length);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
}

static void _epSBC_AP_PDU(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _SBC_AP_PDU	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_SBC_AP_PDU *) _inbuf;
    OSS_CNTX_ANCHOR_SET(1,28)
    {
	OSS_CNTX_INIT

	if (_in_data->choice <= 3) {

	    _oss_append_1bit_unaligned(_g, 0x00);
	    _oss_penc_nonneg_2int(_g, _in_data->choice - 1);
	}
	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 29)
#ifndef OSS_DO_NOT_CHECK_POINTERS
	    if (_in_data->u.initiatingMessage == NULL)
		_oss_enc_error(_g, _bad_pointer, 0L);
#endif
	    {
		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 30)
		if (_in_data->u.initiatingMessage->procedureCode <= 255) {
		    unsigned int _encode_value = _in_data->u.initiatingMessage->procedureCode;
#if OSS_TOED_API_LEVEL < 20
		    unsigned char _field = _encode_value;
#endif
#if OSS_TOED_API_LEVEL >= 20
		    _oss_append_8bit_aligned(_g, _encode_value);
#else
		    _oss_append(_g, (unsigned char *)&_field, 8, Aligned);
#endif
		} else {
		    _oss_enc_error(_g, _valueRange_uinteger, _in_data->u.initiatingMessage->procedureCode);
		}
		OSS_CNTX_SET(31)
		_oss_penc_uenum(_g, _in_data->u.initiatingMessage->criticality, (struct _enum_data *)&_enums[0], NULL);
		OSS_CNTX_SET(32)
		{
		    OSSC::COssConstrainedOpenType  * otype = &_in_data->u.initiatingMessage->value;

		    if (otype->encoded.value && otype->encoded.length)
			_oss_penc_unconstr_oct_l(_g, otype->encoded.value, otype->encoded.length);
		    else if (otype->pduNum != 0
			    && *(void **)&otype->decoded) {
			if (_g->encodingFlags & AUTOMATIC_ENCDEC) {
			    OSS_DEF_VAR_ESE(_st)

			    _oss_begin_otype_or_ext(_g, &_st);
			    _PeSBC_AP_Containers(_g, otype->pduNum, *(void **)&otype->decoded);
			    _oss_end_otype_or_ext(_g, &_st);
			} else {
			    _oss_enc_error(_g, _AUTOMATIC_ENCDEC_is_not_specified, 0L);
			}
		    } else
			if (*(void **)&otype->decoded)
			    _oss_enc_error(_g, _pduNum_is_not_initialized, 0L);
			else
			    _oss_enc_error(_g, _zero_length_OpenType, 0L);
		}
		OSS_CNTX_POP(_oss_c)
	    }
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 33)
#ifndef OSS_DO_NOT_CHECK_POINTERS
	    if (_in_data->u.successfulOutcome == NULL)
		_oss_enc_error(_g, _bad_pointer, 0L);
#endif
	    {
		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 30)
		if (_in_data->u.successfulOutcome->procedureCode <= 255) {
		    unsigned int _encode_value = _in_data->u.successfulOutcome->procedureCode;
#if OSS_TOED_API_LEVEL < 20
		    unsigned char _field = _encode_value;
#endif
#if OSS_TOED_API_LEVEL >= 20
		    _oss_append_8bit_aligned(_g, _encode_value);
#else
		    _oss_append(_g, (unsigned char *)&_field, 8, Aligned);
#endif
		} else {
		    _oss_enc_error(_g, _valueRange_uinteger, _in_data->u.successfulOutcome->procedureCode);
		}
		OSS_CNTX_SET(31)
		_oss_penc_uenum(_g, _in_data->u.successfulOutcome->criticality, (struct _enum_data *)&_enums[0], NULL);
		OSS_CNTX_SET(32)
		{
		    OSSC::COssConstrainedOpenType  * otype = &_in_data->u.successfulOutcome->value;

		    if (otype->encoded.value && otype->encoded.length)
			_oss_penc_unconstr_oct_l(_g, otype->encoded.value, otype->encoded.length);
		    else if (otype->pduNum != 0
			    && *(void **)&otype->decoded) {
			if (_g->encodingFlags & AUTOMATIC_ENCDEC) {
			    OSS_DEF_VAR_ESE(_st)

			    _oss_begin_otype_or_ext(_g, &_st);
			    _PeSBC_AP_Containers(_g, otype->pduNum, *(void **)&otype->decoded);
			    _oss_end_otype_or_ext(_g, &_st);
			} else {
			    _oss_enc_error(_g, _AUTOMATIC_ENCDEC_is_not_specified, 0L);
			}
		    } else
			if (*(void **)&otype->decoded)
			    _oss_enc_error(_g, _pduNum_is_not_initialized, 0L);
			else
			    _oss_enc_error(_g, _zero_length_OpenType, 0L);
		}
		OSS_CNTX_POP(_oss_c)
	    }
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 34)
#ifndef OSS_DO_NOT_CHECK_POINTERS
	    if (_in_data->u.unsuccessfulOutcome == NULL)
		_oss_enc_error(_g, _bad_pointer, 0L);
#endif
	    {
		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 30)
		if (_in_data->u.unsuccessfulOutcome->procedureCode <= 255) {
		    unsigned int _encode_value = _in_data->u.unsuccessfulOutcome->procedureCode;
#if OSS_TOED_API_LEVEL < 20
		    unsigned char _field = _encode_value;
#endif
#if OSS_TOED_API_LEVEL >= 20
		    _oss_append_8bit_aligned(_g, _encode_value);
#else
		    _oss_append(_g, (unsigned char *)&_field, 8, Aligned);
#endif
		} else {
		    _oss_enc_error(_g, _valueRange_uinteger, _in_data->u.unsuccessfulOutcome->procedureCode);
		}
		OSS_CNTX_SET(31)
		_oss_penc_uenum(_g, _in_data->u.unsuccessfulOutcome->criticality, (struct _enum_data *)&_enums[0], NULL);
		OSS_CNTX_SET(32)
		{
		    OSSC::COssConstrainedOpenType  * otype = &_in_data->u.unsuccessfulOutcome->value;

		    if (otype->encoded.value && otype->encoded.length)
			_oss_penc_unconstr_oct_l(_g, otype->encoded.value, otype->encoded.length);
		    else if (otype->pduNum != 0
			    && *(void **)&otype->decoded) {
			if (_g->encodingFlags & AUTOMATIC_ENCDEC) {
			    OSS_DEF_VAR_ESE(_st)

			    _oss_begin_otype_or_ext(_g, &_st);
			    _PeSBC_AP_Containers(_g, otype->pduNum, *(void **)&otype->decoded);
			    _oss_end_otype_or_ext(_g, &_st);
			} else {
			    _oss_enc_error(_g, _AUTOMATIC_ENCDEC_is_not_specified, 0L);
			}
		    } else
			if (*(void **)&otype->decoded)
			    _oss_enc_error(_g, _pduNum_is_not_initialized, 0L);
			else
			    _oss_enc_error(_g, _zero_length_OpenType, 0L);
		}
		OSS_CNTX_POP(_oss_c)
	    }
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }

    OSS_CNTX_POP(_oss_c)
}

static void _ep0Write_Replace_Warning_Reque(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Request	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Write_Replace_Warning_Request *) _inbuf;
    OSS_CNTX_ANCHOR_SET(2,35)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep1Write_Replace_Warning_Respo(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Response	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Write_Replace_Warning_Response *) _inbuf;
    OSS_CNTX_ANCHOR_SET(3,38)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epStop_Warning_Request(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Stop_Warning_Request	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Stop_Warning_Request *) _inbuf;
    OSS_CNTX_ANCHOR_SET(4,39)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epStop_Warning_Response(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Response	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Write_Replace_Warning_Response *) _inbuf;
    OSS_CNTX_ANCHOR_SET(5,40)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep2Write_Replace_Warning_Indic(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Indication	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Write_Replace_Warning_Indication *) _inbuf;
    OSS_CNTX_ANCHOR_SET(6,41)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epStop_Warning_Indication(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Stop_Warning_Indication	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Stop_Warning_Indication *) _inbuf;
    OSS_CNTX_ANCHOR_SET(7,42)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epPWS_Restart_Indication(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _PWS_Restart_Indication	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_PWS_Restart_Indication *) _inbuf;
    OSS_CNTX_ANCHOR_SET(8,43)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epPWS_Failure_Indication(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _PWS_Failure_Indication	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_PWS_Failure_Indication *) _inbuf;
    OSS_CNTX_ANCHOR_SET(9,44)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_1bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_SET(37)
	if (_in_data->bit_mask & 0x80000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->protocolExtensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epError_Indication(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Error_Indication	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Error_Indication *) _inbuf;
    OSS_CNTX_ANCHOR_SET(10,45)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	OSS_CNTX_PUSH(_oss_c, 36)
	_epo_ProtocolIE_Container(_g, (_seqof1 **)&_in_data->protocolIEs);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep3Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Scheduled_Area_List	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Broadcast_Scheduled_Area_List *) _inbuf;
    OSS_CNTX_ANCHOR_SET(11,46)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_4bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 47)
	if (_in_data->bit_mask & 0x80000000) {
	    {
		_CellId_Broadcast_List * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->cellId_Broadcast_List; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 65535) {
		    OSS_CNTX_PUSH(_oss_c, 48)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
		    for (_temp = _in_data->cellId_Broadcast_List; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			{
			    unsigned char _extPres = 0x00;
			    OSS_CNTX_INIT

			    _oss_append_1bit_unaligned(_g, _extPres);
			    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			    OSS_CNTX_PUSH(_oss_c, 19)
			    _ep_EUTRAN_CGI(_g, &_temp->value.eCGI);
			    OSS_CNTX_SET(2)
			    if (_temp->value.bit_mask & 0x80000000) {
				_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			    }
			    OSS_CNTX_POP(_oss_c)
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(49)
	if (_in_data->bit_mask & 0x40000000) {
	    {
		_TAI_Broadcast_List * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->tAI_Broadcast_List; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 65535) {
		    OSS_CNTX_PUSH(_oss_c, 50)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
		    for (_temp = _in_data->tAI_Broadcast_List; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			{
			    unsigned char _extPres = 0x00;
			    OSS_CNTX_INIT

			    _oss_append_1bit_unaligned(_g, _extPres);
			    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			    OSS_CNTX_PUSH(_oss_c, 51)
			    _ep_TAI(_g, &_temp->value.tAI);
			    OSS_CNTX_SET(52)
			    {
				_CellId_Broadcast_List * _temp1;
				unsigned int _cnt1;
				OSS_CNTX_INIT

				for (_cnt1 = 0, _temp1 = _temp->value.scheduledCellinTAI; _temp1; _temp1 = _temp1->next)
				    ++_cnt1;

				if (_cnt1 >= 1 && _cnt1 <= 65535) {
				    OSS_CNTX_PUSH(_oss_c, 53)
#if OSS_TOED_API_LEVEL >= 27
				    _oss_penc_lrang(_g, _cnt1, 1, USHRT_MAX);
#else
				    _oss_penc_length_l(_g, _cnt1, 1L, 65535L, 0);
#endif
				    for (_temp1 = _temp->value.scheduledCellinTAI; _temp1; _temp1 = _temp1->next) {
					OSS_CNTX_INCOCC
					{
					    unsigned char _extPres = 0x00;
					    OSS_CNTX_INIT

					    _oss_append_1bit_unaligned(_g, _extPres);
					    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp1->value.bit_mask >> 24));
					    OSS_CNTX_PUSH(_oss_c, 19)
					    _ep_EUTRAN_CGI(_g, &_temp1->value.eCGI);
					    OSS_CNTX_SET(2)
					    if (_temp1->value.bit_mask & 0x80000000) {
						_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1->value.iE_Extensions);
					    }
					    OSS_CNTX_POP(_oss_c)
					}
				    }
				} else
				    _oss_enc_error(_g, _too_long, _cnt1);
				OSS_CNTX_POP(_oss_c)
			    }
			    OSS_CNTX_SET(2)
			    if (_temp->value.bit_mask & 0x80000000) {
				_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			    }
			    OSS_CNTX_POP(_oss_c)
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(54)
	if (_in_data->bit_mask & 0x20000000) {
	    _ep_14EmergencyAreaID_Broadcast_(_g, &_in_data->emergencyAreaID_Broadcast_List);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x10000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep4Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Scheduled_Area_List_5GS	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Broadcast_Scheduled_Area_List_5GS *) _inbuf;
    OSS_CNTX_ANCHOR_SET(12,55)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_4bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 56)
	if (_in_data->bit_mask & 0x80000000) {
	    {
		_CellId_Broadcast_List_5GS * _temp;
		unsigned int _fragm_cnt;
		unsigned int _cnt;
		int _ext;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->cellId_Broadcast_List_5GS; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 16776960) {
		    OSS_CNTX_PUSH(_oss_c, 57)
		    _ext = (_cnt >= 16384) ? 2 : 0;
		    for (_temp = _in_data->cellId_Broadcast_List_5GS;; _cnt -= _fragm_cnt) {
			unsigned int _idx;

#if OSS_TOED_API_LEVEL >= 27
			_fragm_cnt = _oss_penc_lfrag(_g, _cnt);
#else
			_fragm_cnt = (unsigned int)_oss_penc_length_l(_g, _cnt, 0, 0, 0);
#endif
			for (_idx = 0; _idx < _fragm_cnt; ++_idx, _temp = _temp->next) {
			    OSS_CNTX_INCOCC
			    {
				unsigned char _extPres = 0x00;
				OSS_CNTX_INIT

				_oss_append_1bit_unaligned(_g, _extPres);
				_oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
				OSS_CNTX_PUSH(_oss_c, 58)
				_ep_NR_CGI(_g, &_temp->value.nR_CGI);
				OSS_CNTX_SET(2)
				if (_temp->value.bit_mask & 0x80000000) {
				    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
				}
				OSS_CNTX_POP(_oss_c)
			    }
			}
			if (_cnt == _fragm_cnt) {
			    if ((_ext & 2) && (_fragm_cnt & 0x3FFF) == 0)
				_oss_append_8bit_aligned(_g, 0);
			    break;
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(59)
	if (_in_data->bit_mask & 0x40000000) {
	    {
		_TAI_Broadcast_List_5GS * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->tAI_Broadcast_List_5GS; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 2048) {
		    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, 2048);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 2048L, 0);
#endif
		    for (_temp = _in_data->tAI_Broadcast_List_5GS; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			{
			    unsigned char _extPres = 0x00;
			    OSS_CNTX_INIT

			    _oss_append_1bit_unaligned(_g, _extPres);
			    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			    OSS_CNTX_PUSH(_oss_c, 60)
			    _ep_TAI_5GS(_g, &_temp->value.tAI_5GS);
			    OSS_CNTX_SET(61)
			    {
				_CellId_Broadcast_List_5GS * _temp1;
				unsigned int _cnt1;
				OSS_CNTX_INIT

				for (_cnt1 = 0, _temp1 = _temp->value.scheduledCellinTAI_5GS; _temp1; _temp1 = _temp1->next)
				    ++_cnt1;

				if (_cnt1 >= 1 && _cnt1 <= 65535) {
				    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
				    _oss_penc_lrang(_g, _cnt1, 1, USHRT_MAX);
#else
				    _oss_penc_length_l(_g, _cnt1, 1L, 65535L, 0);
#endif
				    for (_temp1 = _temp->value.scheduledCellinTAI_5GS; _temp1; _temp1 = _temp1->next) {
					OSS_CNTX_INCOCC
					{
					    unsigned char _extPres = 0x00;
					    OSS_CNTX_INIT

					    _oss_append_1bit_unaligned(_g, _extPres);
					    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp1->value.bit_mask >> 24));
					    OSS_CNTX_PUSH(_oss_c, 58)
					    _ep_NR_CGI(_g, &_temp1->value.nR_CGI);
					    OSS_CNTX_SET(2)
					    if (_temp1->value.bit_mask & 0x80000000) {
						_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1->value.iE_Extensions);
					    }
					    OSS_CNTX_POP(_oss_c)
					}
				    }
				} else
				    _oss_enc_error(_g, _too_long, _cnt1);
				OSS_CNTX_POP(_oss_c)
			    }
			    OSS_CNTX_SET(2)
			    if (_temp->value.bit_mask & 0x80000000) {
				_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			    }
			    OSS_CNTX_POP(_oss_c)
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(54)
	if (_in_data->bit_mask & 0x20000000) {
	    _ep_14EmergencyAreaID_Broadcast_(_g, &_in_data->emergencyAreaID_Broadcast_List);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x10000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep5Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Cancelled_Area_List	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Broadcast_Cancelled_Area_List *) _inbuf;
    OSS_CNTX_ANCHOR_SET(13,62)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_4bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 63)
	if (_in_data->bit_mask & 0x80000000) {
	    {
		_CellID_Cancelled_List * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->cellID_Cancelled_List; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 65535) {
		    OSS_CNTX_PUSH(_oss_c, 64)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
		    for (_temp = _in_data->cellID_Cancelled_List; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			{
			    unsigned char _extPres = 0x00;
			    OSS_CNTX_INIT

			    _oss_append_1bit_unaligned(_g, _extPres);
			    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			    OSS_CNTX_PUSH(_oss_c, 19)
			    _ep_EUTRAN_CGI(_g, &_temp->value.eCGI);
			    OSS_CNTX_SET(23)
			    if (_temp->value.numberOfBroadcasts <= USHRT_MAX) {
				unsigned int _encode_value = _temp->value.numberOfBroadcasts;
#if OSS_TOED_API_LEVEL < 20
				unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
				_oss_penc_int16_aligned(_g, _encode_value);
#else
				_field[1] = (unsigned char)(0xFF & _encode_value);
				_encode_value >>= 8;
				_field[0] = (unsigned char)(0xFF & _encode_value);
				_oss_append(_g, _field, 16, Aligned);
#endif
			    } else {
				_oss_enc_error(_g, _valueRange_uinteger, _temp->value.numberOfBroadcasts);
			    }
			    OSS_CNTX_SET(2)
			    if (_temp->value.bit_mask & 0x80000000) {
				_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			    }
			    OSS_CNTX_POP(_oss_c)
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(65)
	if (_in_data->bit_mask & 0x40000000) {
	    {
		_TAI_Cancelled_List * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->tAI_Cancelled_List; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 65535) {
		    OSS_CNTX_PUSH(_oss_c, 66)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
		    for (_temp = _in_data->tAI_Cancelled_List; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			{
			    unsigned char _extPres = 0x00;
			    OSS_CNTX_INIT

			    _oss_append_1bit_unaligned(_g, _extPres);
			    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			    OSS_CNTX_PUSH(_oss_c, 51)
			    _ep_TAI(_g, &_temp->value.tAI);
			    OSS_CNTX_SET(67)
			    {
				_CellID_Cancelled_List * _temp1;
				unsigned int _cnt1;
				OSS_CNTX_INIT

				for (_cnt1 = 0, _temp1 = _temp->value.cancelledCellinTAI; _temp1; _temp1 = _temp1->next)
				    ++_cnt1;

				if (_cnt1 >= 1 && _cnt1 <= 65535) {
				    OSS_CNTX_PUSH(_oss_c, 68)
#if OSS_TOED_API_LEVEL >= 27
				    _oss_penc_lrang(_g, _cnt1, 1, USHRT_MAX);
#else
				    _oss_penc_length_l(_g, _cnt1, 1L, 65535L, 0);
#endif
				    for (_temp1 = _temp->value.cancelledCellinTAI; _temp1; _temp1 = _temp1->next) {
					OSS_CNTX_INCOCC
					{
					    unsigned char _extPres = 0x00;
					    OSS_CNTX_INIT

					    _oss_append_1bit_unaligned(_g, _extPres);
					    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp1->value.bit_mask >> 24));
					    OSS_CNTX_PUSH(_oss_c, 19)
					    _ep_EUTRAN_CGI(_g, &_temp1->value.eCGI);
					    OSS_CNTX_SET(23)
					    if (_temp1->value.numberOfBroadcasts <= USHRT_MAX) {
						unsigned int _encode_value = _temp1->value.numberOfBroadcasts;
#if OSS_TOED_API_LEVEL < 20
						unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
						_oss_penc_int16_aligned(_g, _encode_value);
#else
						_field[1] = (unsigned char)(0xFF & _encode_value);
						_encode_value >>= 8;
						_field[0] = (unsigned char)(0xFF & _encode_value);
						_oss_append(_g, _field, 16, Aligned);
#endif
					    } else {
						_oss_enc_error(_g, _valueRange_uinteger, _temp1->value.numberOfBroadcasts);
					    }
					    OSS_CNTX_SET(2)
					    if (_temp1->value.bit_mask & 0x80000000) {
						_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1->value.iE_Extensions);
					    }
					    OSS_CNTX_POP(_oss_c)
					}
				    }
				} else
				    _oss_enc_error(_g, _too_long, _cnt1);
				OSS_CNTX_POP(_oss_c)
			    }
			    OSS_CNTX_SET(2)
			    if (_temp->value.bit_mask & 0x80000000) {
				_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			    }
			    OSS_CNTX_POP(_oss_c)
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(69)
	if (_in_data->bit_mask & 0x20000000) {
	    _ep_16EmergencyAreaID_Cancelled_(_g, &_in_data->emergencyAreaID_Cancelled_List);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x10000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep6Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Cancelled_Area_List_5GS	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Broadcast_Cancelled_Area_List_5GS *) _inbuf;
    OSS_CNTX_ANCHOR_SET(14,70)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_4bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 71)
	if (_in_data->bit_mask & 0x80000000) {
	    {
		_CellID_Cancelled_List_5GS * _temp;
		unsigned int _fragm_cnt;
		unsigned int _cnt;
		int _ext;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->cellID_Cancelled_List_5GS; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 16776960) {
		    OSS_CNTX_PUSH(_oss_c, 57)
		    _ext = (_cnt >= 16384) ? 2 : 0;
		    for (_temp = _in_data->cellID_Cancelled_List_5GS;; _cnt -= _fragm_cnt) {
			unsigned int _idx;

#if OSS_TOED_API_LEVEL >= 27
			_fragm_cnt = _oss_penc_lfrag(_g, _cnt);
#else
			_fragm_cnt = (unsigned int)_oss_penc_length_l(_g, _cnt, 0, 0, 0);
#endif
			for (_idx = 0; _idx < _fragm_cnt; ++_idx, _temp = _temp->next) {
			    OSS_CNTX_INCOCC
			    {
				unsigned char _extPres = 0x00;
				OSS_CNTX_INIT

				_oss_append_1bit_unaligned(_g, _extPres);
				_oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
				OSS_CNTX_PUSH(_oss_c, 58)
				_ep_NR_CGI(_g, &_temp->value.nR_CGI);
				OSS_CNTX_SET(23)
				if (_temp->value.numberOfBroadcasts <= USHRT_MAX) {
				    unsigned int _encode_value = _temp->value.numberOfBroadcasts;
#if OSS_TOED_API_LEVEL < 20
				    unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
				    _oss_penc_int16_aligned(_g, _encode_value);
#else
				    _field[1] = (unsigned char)(0xFF & _encode_value);
				    _encode_value >>= 8;
				    _field[0] = (unsigned char)(0xFF & _encode_value);
				    _oss_append(_g, _field, 16, Aligned);
#endif
				} else {
				    _oss_enc_error(_g, _valueRange_uinteger, _temp->value.numberOfBroadcasts);
				}
				OSS_CNTX_SET(2)
				if (_temp->value.bit_mask & 0x80000000) {
				    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
				}
				OSS_CNTX_POP(_oss_c)
			    }
			}
			if (_cnt == _fragm_cnt) {
			    if ((_ext & 2) && (_fragm_cnt & 0x3FFF) == 0)
				_oss_append_8bit_aligned(_g, 0);
			    break;
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(72)
	if (_in_data->bit_mask & 0x40000000) {
	    {
		_TAI_Cancelled_List_5GS * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->tAI_Cancelled_List_5GS; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 2048) {
		    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, 2048);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 2048L, 0);
#endif
		    for (_temp = _in_data->tAI_Cancelled_List_5GS; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			{
			    unsigned char _extPres = 0x00;
			    OSS_CNTX_INIT

			    _oss_append_1bit_unaligned(_g, _extPres);
			    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			    OSS_CNTX_PUSH(_oss_c, 60)
			    _ep_TAI_5GS(_g, &_temp->value.tAI_5GS);
			    OSS_CNTX_SET(73)
			    {
				_CellID_Cancelled_List_5GS * _temp1;
				unsigned int _cnt1;
				OSS_CNTX_INIT

				for (_cnt1 = 0, _temp1 = _temp->value.cancelledCellinTAI_5GS; _temp1; _temp1 = _temp1->next)
				    ++_cnt1;

				if (_cnt1 >= 1 && _cnt1 <= 65535) {
				    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
				    _oss_penc_lrang(_g, _cnt1, 1, USHRT_MAX);
#else
				    _oss_penc_length_l(_g, _cnt1, 1L, 65535L, 0);
#endif
				    for (_temp1 = _temp->value.cancelledCellinTAI_5GS; _temp1; _temp1 = _temp1->next) {
					OSS_CNTX_INCOCC
					{
					    unsigned char _extPres = 0x00;
					    OSS_CNTX_INIT

					    _oss_append_1bit_unaligned(_g, _extPres);
					    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp1->value.bit_mask >> 24));
					    OSS_CNTX_PUSH(_oss_c, 58)
					    _ep_NR_CGI(_g, &_temp1->value.nR_CGI);
					    OSS_CNTX_SET(23)
					    if (_temp1->value.numberOfBroadcasts <= USHRT_MAX) {
						unsigned int _encode_value = _temp1->value.numberOfBroadcasts;
#if OSS_TOED_API_LEVEL < 20
						unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
						_oss_penc_int16_aligned(_g, _encode_value);
#else
						_field[1] = (unsigned char)(0xFF & _encode_value);
						_encode_value >>= 8;
						_field[0] = (unsigned char)(0xFF & _encode_value);
						_oss_append(_g, _field, 16, Aligned);
#endif
					    } else {
						_oss_enc_error(_g, _valueRange_uinteger, _temp1->value.numberOfBroadcasts);
					    }
					    OSS_CNTX_SET(2)
					    if (_temp1->value.bit_mask & 0x80000000) {
						_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1->value.iE_Extensions);
					    }
					    OSS_CNTX_POP(_oss_c)
					}
				    }
				} else
				    _oss_enc_error(_g, _too_long, _cnt1);
				OSS_CNTX_POP(_oss_c)
			    }
			    OSS_CNTX_SET(2)
			    if (_temp->value.bit_mask & 0x80000000) {
				_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			    }
			    OSS_CNTX_POP(_oss_c)
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(69)
	if (_in_data->bit_mask & 0x20000000) {
	    _ep_16EmergencyAreaID_Cancelled_(_g, &_in_data->emergencyAreaID_Cancelled_List);
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x10000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epBroadcast_Empty_Area_List(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Empty_Area_List	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Broadcast_Empty_Area_List **) _inbuf;
    OSS_CNTX_ANCHOR_SET(15,74)
    {
	_Broadcast_Empty_Area_List * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 256) {
	    OSS_CNTX_PUSH(_oss_c, 75)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 256);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 256L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_Global_ENB_ID(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep7Broadcast_Empty_Area_List_5(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Empty_Area_List_5GS	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Broadcast_Empty_Area_List_5GS **) _inbuf;
    OSS_CNTX_ANCHOR_SET(16,76)
    {
	_Broadcast_Empty_Area_List_5GS * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 77)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_Global_RAN_Node_ID(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epCause(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSS_UINT32 *) _inbuf;
    OSS_CNTX_ANCHOR_SET(17,78)
    if (*_in_data <= 255) {
	unsigned int _encode_value = *_in_data;
#if OSS_TOED_API_LEVEL < 20
	unsigned char _field = _encode_value;
#endif
#if OSS_TOED_API_LEVEL >= 20
	_oss_append_8bit_aligned(_g, _encode_value);
#else
	_oss_append(_g, (unsigned char *)&_field, 8, Aligned);
#endif
    } else {
	_oss_enc_error(_g, _valueRange_uinteger, *_in_data);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep8Concurrent_Warning_Message_(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Concurrent_Warning_Message_Indicator	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (enum Concurrent_Warning_Message_Indicator *) _inbuf;
    OSS_CNTX_ANCHOR_SET(18,79)
    _oss_penc_uenum(_g, *_in_data, (struct _enum_data *)&_enums[1], NULL);
    OSS_CNTX_POP(_oss_c)
}

static void _epCriticality_Diagnostics(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Criticality_Diagnostics	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Criticality_Diagnostics *) _inbuf;
    OSS_CNTX_ANCHOR_SET(19,80)
    {
	unsigned char _extPres = 0x00;
	OSS_CNTX_INIT

	_oss_append_1bit_unaligned(_g, _extPres);
	_oss_append_5bit_unaligned(_g, (unsigned char)(_in_data->bit_mask >> 24));
	OSS_CNTX_PUSH(_oss_c, 30)
	if (_in_data->bit_mask & 0x80000000) {
	    if (_in_data->procedureCode <= 255) {
		unsigned int _encode_value = _in_data->procedureCode;
#if OSS_TOED_API_LEVEL < 20
		unsigned char _field = _encode_value;
#endif
#if OSS_TOED_API_LEVEL >= 20
		_oss_append_8bit_aligned(_g, _encode_value);
#else
		_oss_append(_g, (unsigned char *)&_field, 8, Aligned);
#endif
	    } else {
		_oss_enc_error(_g, _valueRange_uinteger, _in_data->procedureCode);
	    }
	}
	OSS_CNTX_SET(81)
	if (_in_data->bit_mask & 0x40000000) {
	    _oss_penc_uenum(_g, _in_data->triggeringMessage, (struct _enum_data *)&_enums[2], NULL);
	}
	OSS_CNTX_SET(82)
	if (_in_data->bit_mask & 0x20000000) {
	    _oss_penc_uenum(_g, _in_data->procedureCriticality, (struct _enum_data *)&_enums[0], NULL);
	}
	OSS_CNTX_SET(83)
	if (_in_data->bit_mask & 0x10000000) {
	    {
		_CriticalityDiagnostics_IE_List * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->iE_CriticalityDiagnostics; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 256) {
		    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, 256);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 256L, 0);
#endif
		    for (_temp = _in_data->iE_CriticalityDiagnostics; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			{
			    unsigned char _extPres = 0x00;
			    OSS_CNTX_INIT

			    _oss_append_1bit_unaligned(_g, _extPres);
			    _oss_append_1bit_unaligned(_g, (unsigned char)(_temp->value.bit_mask >> 24));
			    OSS_CNTX_PUSH(_oss_c, 84)
			    _oss_penc_uenum(_g, _temp->value.iECriticality, (struct _enum_data *)&_enums[0], NULL);
			    OSS_CNTX_SET(85)
			    if (_temp->value.iE_ID <= USHRT_MAX) {
				unsigned int _encode_value = _temp->value.iE_ID;
#if OSS_TOED_API_LEVEL < 20
				unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
				_oss_penc_int16_aligned(_g, _encode_value);
#else
				_field[1] = (unsigned char)(0xFF & _encode_value);
				_encode_value >>= 8;
				_field[0] = (unsigned char)(0xFF & _encode_value);
				_oss_append(_g, _field, 16, Aligned);
#endif
			    } else {
				_oss_enc_error(_g, _valueRange_uinteger, _temp->value.iE_ID);
			    }
			    OSS_CNTX_SET(86)
			    _oss_penc_enum(_g, _temp->value.typeOfError, (struct _enum_data *)&_enums[3], (struct _enum_data *)&_enums[4]);
			    OSS_CNTX_SET(2)
			    if (_temp->value.bit_mask & 0x80000000) {
				_epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp->value.iE_Extensions);
			    }
			    OSS_CNTX_POP(_oss_c)
			}
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	}
	OSS_CNTX_SET(2)
	if (_in_data->bit_mask & 0x8000000) {
	    _epo_ProtocolExtensionContaine(_g, (_seqof2 **)&_in_data->iE_Extensions);
	}
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epData_Coding_Scheme(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssBitString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssBitString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(20,87)
    if (_in_data->length == 8) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_fix_bit(_g, _in_data->value, 8);
#else
	_oss_penc_constr_bit_l(_g, _in_data->value, 8, 8, 8, FALSE, 8);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epExtended_Repetition_Period(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSS_UINT32 *) _inbuf;
    OSS_CNTX_ANCHOR_SET(21,88)
    if (*_in_data >= 4096 && *_in_data <= 131071) {
	unsigned int _encode_value = (unsigned int) *_in_data - 4096;
	_oss_penc_indeflen_int_l(_g, _encode_value, 3U);
    } else {
	_oss_enc_error(_g, _valueRange_uinteger, *_in_data);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epFailed_Cell_List(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _ECGIList	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_ECGIList **) _inbuf;
    OSS_CNTX_ANCHOR_SET(22,89)
    {
	_ECGIList * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 256) {
	    OSS_CNTX_PUSH(_oss_c, 14)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 256);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 256L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_EUTRAN_CGI(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epFailed_Cell_List_NR(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NR_CGIList	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_NR_CGIList **) _inbuf;
    OSS_CNTX_ANCHOR_SET(23,90)
    {
	_NR_CGIList * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 16384) {
	    OSS_CNTX_PUSH(_oss_c, 91)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 16384);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 16384L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_NR_CGI(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epGlobal_ENB_ID(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Global_ENB_ID	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Global_ENB_ID *) _inbuf;
    OSS_CNTX_ANCHOR_SET(24,92)
    _ep_Global_ENB_ID(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _epGlobal_RAN_Node_ID(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Global_RAN_Node_ID	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Global_RAN_Node_ID *) _inbuf;
    OSS_CNTX_ANCHOR_SET(25,93)
    _ep_Global_RAN_Node_ID(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _epGlobal_GNB_ID(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Global_GNB_ID	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Global_GNB_ID *) _inbuf;
    OSS_CNTX_ANCHOR_SET(26,94)
    _ep_Global_GNB_ID(_g, _in_data);
    OSS_CNTX_POP(_oss_c)
}

static void _epList_of_TAIs(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_TAIs	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_List_of_TAIs **) _inbuf;
    OSS_CNTX_ANCHOR_SET(27,95)
    {
	_List_of_TAIs * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep__seq43(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epList_of_TAIs_Restart(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_TAIs	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_List_of_TAIs **) _inbuf;
    OSS_CNTX_ANCHOR_SET(28,96)
    {
	_List_of_TAIs * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 2048) {
	    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 2048);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 2048L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep__seq43(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epList_of_EAIs_Restart(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Emergency_Area_ID_List	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Emergency_Area_ID_List **) _inbuf;
    OSS_CNTX_ANCHOR_SET(29,97)
    {
	_Emergency_Area_ID_List * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 256) {
	    OSS_CNTX_PUSH(_oss_c, 15)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 256);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 256L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		if (_temp->value.length == 3) {
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_fix_bit(_g, (unsigned char *)_temp->value.value, 24);
#else
		    _oss_append(_g, (unsigned char *)_temp->value.value, 3L*8, Aligned);
#endif
		} else {
		    _oss_enc_error(_g, _sizeConstraint_length, _temp->value.length);
		}
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epList_of_5GS_TAIs(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_5GS_TAIs	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_List_of_5GS_TAIs **) _inbuf;
    OSS_CNTX_ANCHOR_SET(30,98)
    {
	_List_of_5GS_TAIs * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 2048) {
	    OSS_CNTX_PUSH(_oss_c, 99)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 2048);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 2048L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_TAI_5GS(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep9List_of_5GS_Cells_for_Failu(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NR_CGIList	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_NR_CGIList **) _inbuf;
    OSS_CNTX_ANCHOR_SET(31,100)
    {
	_NR_CGIList * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 16384) {
	    OSS_CNTX_PUSH(_oss_c, 91)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 16384);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 16384L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_NR_CGI(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epList_of_5GS_TAI_for_Restart(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_5GS_TAIs	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_List_of_5GS_TAIs **) _inbuf;
    OSS_CNTX_ANCHOR_SET(32,101)
    {
	_List_of_5GS_TAIs * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 2048) {
	    OSS_CNTX_PUSH(_oss_c, 99)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 2048);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 2048L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_TAI_5GS(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epMessage_Identifier(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssBitString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssBitString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(33,102)
    if (_in_data->length == 16) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_fix_bit(_g, _in_data->value, 16);
#else
	_oss_penc_constr_bit_l(_g, _in_data->value, 16, 16, 16, FALSE, 16);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep10Number_of_Broadcasts_Reque(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSS_UINT32 *) _inbuf;
    OSS_CNTX_ANCHOR_SET(34,103)
    if (*_in_data <= USHRT_MAX) {
	unsigned int _encode_value = *_in_data;
#if OSS_TOED_API_LEVEL < 20
	unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
	_oss_penc_int16_aligned(_g, _encode_value);
#else
	_field[1] = (unsigned char)(0xFF & _encode_value);
	_encode_value >>= 8;
	_field[0] = (unsigned char)(0xFF & _encode_value);
	_oss_append(_g, _field, 16, Aligned);
#endif
    } else {
	_oss_enc_error(_g, _valueRange_uinteger, *_in_data);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epNgENB_ID(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NgENB_ID	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_NgENB_ID *) _inbuf;
    OSS_CNTX_ANCHOR_SET(35,104)
    {
	OSS_CNTX_INIT

	if (_in_data->choice <= 3) {

	    _oss_append_1bit_unaligned(_g, 0x00);
	    _oss_penc_nonneg_2int(_g, _in_data->choice - 1);
	}
	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 105)
	    if (_in_data->u.macroNgENB_ID.length == 20) {
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_fix_bit(_g, _in_data->u.macroNgENB_ID.value, 20);
#else
		_oss_penc_constr_bit_l(_g, _in_data->u.macroNgENB_ID.value, 20, 20, 20, FALSE, 20);
#endif
	    } else {
		_oss_enc_error(_g, _sizeConstraint_length, _in_data->u.macroNgENB_ID.length);
	    }
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 106)
	    if (_in_data->u.shortMacroNgENB_ID.length == 18) {
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_fix_bit(_g, _in_data->u.shortMacroNgENB_ID.value, 18);
#else
		_oss_penc_constr_bit_l(_g, _in_data->u.shortMacroNgENB_ID.value, 18, 18, 18, FALSE, 18);
#endif
	    } else {
		_oss_enc_error(_g, _sizeConstraint_length, _in_data->u.shortMacroNgENB_ID.length);
	    }
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 107)
	    if (_in_data->u.longMacroNgENB_ID.length == 21) {
#if OSS_TOED_API_LEVEL >= 27
		_oss_penc_fix_bit(_g, _in_data->u.longMacroNgENB_ID.value, 21);
#else
		_oss_penc_constr_bit_l(_g, _in_data->u.longMacroNgENB_ID.value, 21, 21, 21, FALSE, 21);
#endif
	    } else {
		_oss_enc_error(_g, _sizeConstraint_length, _in_data->u.longMacroNgENB_ID.length);
	    }
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epOmc_Id(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(36,108)
    if (_in_data->length >= 1 && _in_data->length <= 20) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_lrang(_g, _in_data->length, 1, 20L);
	_oss_append(_g, (unsigned char *)_in_data->value, _in_data->length << 3, Aligned);
#else
	_oss_penc_constr_oct_l(_g, (unsigned char *)_in_data->value, _in_data->length, 1, 20L);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epRepetition_Period(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSS_UINT32 *) _inbuf;
    OSS_CNTX_ANCHOR_SET(37,109)
    if (*_in_data <= 4096) {
	unsigned int _encode_value = *_in_data;
#if OSS_TOED_API_LEVEL < 20
	unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
	_oss_penc_int16_aligned(_g, _encode_value);
#else
	_field[1] = (unsigned char)(0xFF & _encode_value);
	_encode_value >>= 8;
	_field[0] = (unsigned char)(0xFF & _encode_value);
	_oss_append(_g, _field, 16, Aligned);
#endif
    } else {
	_oss_enc_error(_g, _valueRange_uinteger, *_in_data);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epRestarted_Cell_List(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _ECGIList	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_ECGIList **) _inbuf;
    OSS_CNTX_ANCHOR_SET(38,110)
    {
	_ECGIList * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 256) {
	    OSS_CNTX_PUSH(_oss_c, 14)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 256);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 256L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_EUTRAN_CGI(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epRAT_Selector_5GS(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum RAT_Selector_5GS	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (enum RAT_Selector_5GS *) _inbuf;
    OSS_CNTX_ANCHOR_SET(39,111)
    _oss_penc_uenum(_g, *_in_data, (struct _enum_data *)&_enums[5], NULL);
    OSS_CNTX_POP(_oss_c)
}

static void _epRestarted_Cell_List_NR(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NR_CGIList	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_NR_CGIList **) _inbuf;
    OSS_CNTX_ANCHOR_SET(40,112)
    {
	_NR_CGIList * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 16384) {
	    OSS_CNTX_PUSH(_oss_c, 91)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 16384);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 16384L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_NR_CGI(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep11Send_Write_Replace_Warning(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Send_Write_Replace_Warning_Indication	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (enum Send_Write_Replace_Warning_Indication *) _inbuf;
    OSS_CNTX_ANCHOR_SET(41,113)
    _oss_penc_uenum(_g, *_in_data, (struct _enum_data *)&_enums[6], NULL);
    OSS_CNTX_POP(_oss_c)
}

static void _epSend_Stop_Warning_Indication(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Send_Stop_Warning_Indication	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (enum Send_Stop_Warning_Indication *) _inbuf;
    OSS_CNTX_ANCHOR_SET(42,114)
    _oss_penc_uenum(_g, *_in_data, (struct _enum_data *)&_enums[7], NULL);
    OSS_CNTX_POP(_oss_c)
}

static void _epSerial_Number(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssBitString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssBitString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(43,115)
    if (_in_data->length == 16) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_fix_bit(_g, _in_data->value, 16);
#else
	_oss_penc_constr_bit_l(_g, _in_data->value, 16, 16, 16, FALSE, 16);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epStop_All_Indicator(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Stop_All_Indicator	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (enum Stop_All_Indicator *) _inbuf;
    OSS_CNTX_ANCHOR_SET(44,116)
    _oss_penc_uenum(_g, *_in_data, (struct _enum_data *)&_enums[8], NULL);
    OSS_CNTX_POP(_oss_c)
}

static void _epUnknown_Tracking_Area_List(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _TAI_List_for_Warning	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_TAI_List_for_Warning **) _inbuf;
    OSS_CNTX_ANCHOR_SET(45,117)
    {
	_TAI_List_for_Warning * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 118)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_TAI(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _ep12Unknown_5GS_Tracking_Area_(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_5GS_TAIs	**_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_List_of_5GS_TAIs **) _inbuf;
    OSS_CNTX_ANCHOR_SET(46,119)
    {
	_List_of_5GS_TAIs * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 2048) {
	    OSS_CNTX_PUSH(_oss_c, 99)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, 2048);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 2048L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		_ep_TAI_5GS(_g, &_temp->value);
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epWarning_Area_List(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Warning_Area_List	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Warning_Area_List *) _inbuf;
    OSS_CNTX_ANCHOR_SET(47,120)
    {
	OSS_CNTX_INIT

	if (_in_data->choice <= 3) {

	    _oss_append_1bit_unaligned(_g, 0x00);
	    _oss_penc_nonneg_2int(_g, _in_data->choice - 1);
	}
	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 121)
	    _ep_ECGIList(_g, &_in_data->u.cell_ID_List);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 122)
	    {
		_TAI_List_for_Warning * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->u.tracking_Area_List_for_Warning; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 65535) {
		    OSS_CNTX_PUSH(_oss_c, 118)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
		    for (_temp = _in_data->u.tracking_Area_List_for_Warning; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			_ep_TAI(_g, &_temp->value);
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 123)
	    _ep_Emergency_Area_ID_List(_g, &_in_data->u.emergency_Area_ID_List);
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }

    OSS_CNTX_POP(_oss_c)
}

static void _epWarning_Message_Content(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(48,124)
    if (_in_data->length >= 1 && _in_data->length <= 9600) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_lrang(_g, _in_data->length, 1, 9600L);
	_oss_append(_g, (unsigned char *)_in_data->value, _in_data->length << 3, Aligned);
#else
	_oss_penc_constr_oct_l(_g, (unsigned char *)_in_data->value, _in_data->length, 1, 9600L);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epWarning_Area_Coordinates(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(49,125)
    if (_in_data->length >= 1 && _in_data->length <= 1024) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_lrang(_g, _in_data->length, 1, 1024L);
	_oss_append(_g, (unsigned char *)_in_data->value, _in_data->length << 3, Aligned);
#else
	_oss_penc_constr_oct_l(_g, (unsigned char *)_in_data->value, _in_data->length, 1, 1024L);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epWarning_Security_Information(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(50,126)
    if (_in_data->length == 50) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_fix_bit(_g, (unsigned char *)_in_data->value, 400);
#else
	_oss_append(_g, (unsigned char *)_in_data->value, 50L*8, Aligned);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epWarning_Type(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (OSSC::COssString *) _inbuf;
    OSS_CNTX_ANCHOR_SET(51,127)
    if (_in_data->length == 2) {
#if OSS_TOED_API_LEVEL >= 27
	_oss_penc_fix_bit(_g, (unsigned char *)_in_data->value, 16);
#else
	_oss_append(_g, (unsigned char *)_in_data->value, 2L*8, Unaligned);
#endif
    } else {
	_oss_enc_error(_g, _sizeConstraint_length, _in_data->length);
    }
    OSS_CNTX_POP(_oss_c)
}

static void _epWarning_Area_List_5GS(OssGlobal * _g, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Warning_Area_List_5GS	*_in_data;
    OSS_CNTX_INITZERO

    _in_data = (_Warning_Area_List_5GS *) _inbuf;
    OSS_CNTX_ANCHOR_SET(52,128)
    {
	OSS_CNTX_INIT

	if (_in_data->choice <= 4) {

	    _oss_append_1bit_unaligned(_g, 0x00);
	    _oss_penc_nonneg_2int(_g, _in_data->choice - 1);
	}
	switch (_in_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 121)
	    _ep_ECGIList(_g, &_in_data->u.cell_ID_List);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 129)
	    {
		_NR_CGIList * _temp;
		unsigned int _cnt;
		OSS_CNTX_INIT

		for (_cnt = 0, _temp = _in_data->u.nR_CGIList; _temp; _temp = _temp->next)
		    ++_cnt;

		if (_cnt >= 1 && _cnt <= 16384) {
		    OSS_CNTX_PUSH(_oss_c, 91)
#if OSS_TOED_API_LEVEL >= 27
		    _oss_penc_lrang(_g, _cnt, 1, 16384);
#else
		    _oss_penc_length_l(_g, _cnt, 1L, 16384L, 0);
#endif
		    for (_temp = _in_data->u.nR_CGIList; _temp; _temp = _temp->next) {
			OSS_CNTX_INCOCC
			_ep_NR_CGI(_g, &_temp->value);
		    }
		} else
		    _oss_enc_error(_g, _too_long, _cnt);
		OSS_CNTX_POP(_oss_c)
	    }
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 130)
#ifndef OSS_DO_NOT_CHECK_POINTERS
	    if (_in_data->u.tAIList_5GS == NULL)
		_oss_enc_error(_g, _bad_pointer, 0L);
#endif
	    _ep_TAI_5GS(_g, _in_data->u.tAIList_5GS);
	    break;
	case 4:
	    OSS_CNTX_PUSH(_oss_c, 131)
	    _ep_Emergency_Area_ID_List(_g, &_in_data->u.emergencyAreaIDList);
	    break;
	default:
	    _oss_enc_error(_g, _bad_choice, _in_data->choice);	/* Bad choice selector. */
	}
	OSS_CNTX_POP(_oss_c)
    }

    OSS_CNTX_POP(_oss_c)
}

static void _PeSBC_AP_Containers(OssGlobal * _g, int _pdunum, void * _inbuf)
{
    if (_pdunum < 1 || _pdunum > 52)
	_oss_enc_error(_g, _pdu_range, _pdunum);
    else
	_pEncoders[_pdunum - 1](_g, _inbuf);
}

static void _peSBC_AP_Containers(struct ossGlobal * _g, int _pdunum, void * _inbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _oss_c->_oss_context_anchor._state = _encoding_data;
    _oss_c->_oss_context_anchor._pdu_number = 0;
#if OSSDEBUG > 0
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_e_pre(_g, _pdunum, _inbuf, NULL, _oss_c->_oss_outbufpos, _oss_c->_oss_outbuflen);
#else
    _oss_c->_oss_err_msg = NULL;
#endif

#if OSS_TOED_API_LEVEL < 37
    if (_g->encRules == OSS_PER_ALIGNED)
	_oss_c->_aligned = 1;
    else
	_oss_toed_error(_g, _toed_rules_not_supp_err, "UNALIGNED PER");

#endif
    _PeSBC_AP_Containers(_g, _pdunum, _inbuf);

#if OSSDEBUG > 0
    _oss_c->_oss_err_msg = NULL;
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_e_post(_g, 0, _oss_c->_oss_outbufpos, _oss_c->_oss_outbuflen);
#endif
}

static void _dp_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 0)
	_out_data->pLMNidentity.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->pLMNidentity.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->pLMNidentity.value, 24, Aligned);
	OSS_CNTX_SET(1)
	_dp_ENB_ID(_g, &_out_data->eNB_ID);
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 37);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	if (!_oss_get_1bit_unaligned(_g)) {

	    _out_data->choice = (int)_oss_pdec_nonneg_1int(_g) + 1;
	} else {
	    unsigned long _encode_value;
	    _encode_value = _oss_pdec_small_int_l(_g);
	    if (_encode_value > UINT_MAX - 3)
		_oss_enc_error(_g, _bad_choice, _encode_value);
	    _out_data->choice = (unsigned int)_encode_value + 3;
	}
	switch (_out_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 3)
	    _out_data->u.global_GNB_ID = (_Global_GNB_ID *)_oss_dec_const_alloc(_g, sizeof(_Global_GNB_ID));
	    _dp_Global_GNB_ID(_g, _out_data->u.global_GNB_ID);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 4)
	    _out_data->u.global_NgENB_ID = (_Global_NgENB_ID *)_oss_dec_const_alloc(_g, sizeof(_Global_NgENB_ID));
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		unsigned char *_pext;
		unsigned char _extPres = 0x00;
		unsigned long _ea_count = 0;
		OSS_CNTX_INIT

		_extPres = _oss_get_1bit_unaligned(_g);
		_out_data->u.global_NgENB_ID->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
		OSS_CNTX_PUSH(_oss_c, 0)
		_out_data->u.global_NgENB_ID->pLMNidentity.value = (char *)_oss_dec_const_alloc(_g, 3);
		_out_data->u.global_NgENB_ID->pLMNidentity.length = 3;
		_oss_get_bits(_g, (unsigned char *)_out_data->u.global_NgENB_ID->pLMNidentity.value, 24, Aligned);
		OSS_CNTX_SET(5)
		_dp_ENB_ID(_g, &_out_data->u.global_NgENB_ID->ngENB_ID);
		OSS_CNTX_SET(2)
		_out_data->u.global_NgENB_ID->iE_Extensions = NULL;
		if (_out_data->u.global_NgENB_ID->bit_mask & 0x80000000) {
		    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->u.global_NgENB_ID->iE_Extensions, 39);
		} else {
		    _out_data->u.global_NgENB_ID->iE_Extensions = NULL;
		}
		OSS_CNTX_POP(_oss_c)
		if (_extPres) {
		    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
		    {
			unsigned long i;

			for (i = 0; i < _ea_count; i++)
			    if (_pext[i / 8] & (0x80 >> (i % 8))) {
				OSS_UNKNOWN_EXT_FOUND(_g);
				break;
			    }
		    }
#endif
		    _oss_pdec_eas(_g, _pext, _ea_count, 0);
		}
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	    break;
	default:
	    _out_data->choice = 0;	/* Unknown choice selector. */
	    OSS_UNKNOWN_EXT_FOUND(_g);
	    _oss_pdec_sot(_g);
	    OSS_CNTX_PUSH(_oss_c, 0)
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 0)
	_out_data->pLMNidentity.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->pLMNidentity.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->pLMNidentity.value, 24, Aligned);
	OSS_CNTX_SET(6)
#ifndef OSS_NO_NESTING_CONTROL
	if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		_oss_c->reserved.fields.ext->seqSetNestingLimit)
	    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	{
	    OSS_CNTX_INIT

	    if (!_oss_get_1bit_unaligned(_g)) {
		_out_data->gNB_ID.choice = 1;
	    } else {
		unsigned long _encode_value;
		_encode_value = _oss_pdec_small_int_l(_g);
		if (_encode_value > UINT_MAX - 2)
		    _oss_enc_error(_g, _bad_choice, _encode_value);
		_out_data->gNB_ID.choice = (unsigned int)_encode_value + 2;
	    }
	    switch (_out_data->gNB_ID.choice) {
	    case 1:
		OSS_CNTX_PUSH(_oss_c, 7)
		_out_data->gNB_ID.u.gNB_ID.length = (OSS_UINT32)_oss_pdec_constr_ubit_ia(_g, &_out_data->gNB_ID.u.gNB_ID.value, 22L, 32L);

		break;
	    default:
		_out_data->gNB_ID.choice = 0;	/* Unknown choice selector. */
		OSS_UNKNOWN_EXT_FOUND(_g);
		_oss_pdec_sot(_g);
		OSS_CNTX_PUSH(_oss_c, 0)
	    }
	    OSS_CNTX_POP(_oss_c)
	}
#ifndef OSS_NO_NESTING_CONTROL
	if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 38);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_ENB_ID(OssGlobal * _g, _ENB_ID * _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	if (!_oss_get_1bit_unaligned(_g)) {

	    _out_data->choice = (int)_oss_pdec_nonneg_1int(_g) + 1;
	} else {
	    unsigned long _encode_value;
	    _encode_value = _oss_pdec_small_int_l(_g);
	    if (_encode_value > UINT_MAX - 3)
		_oss_enc_error(_g, _bad_choice, _encode_value);
	    _out_data->choice = (unsigned int)_encode_value + 3;
	}
	switch (_out_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 8)
	    _out_data->u.macroENB_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 3);
	    _out_data->u.macroENB_ID.length = 20;
	    _oss_get_bits(_g, (unsigned char *)_out_data->u.macroENB_ID.value, 20, Aligned);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 9)
	    _out_data->u.homeENB_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 4);
	    _out_data->u.homeENB_ID.length = 28;
	    _oss_get_bits(_g, (unsigned char *)_out_data->u.homeENB_ID.value, 28, Aligned);
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 10)
	    _oss_pdec_push(_g);
	    _out_data->u.short_macroENB_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 3);
	    _out_data->u.short_macroENB_ID.length = 18;
	    _oss_get_bits(_g, (unsigned char *)_out_data->u.short_macroENB_ID.value, 18, Aligned);
	    _oss_pdec_pop(_g);
	    break;
	case 4:
	    OSS_CNTX_PUSH(_oss_c, 11)
	    _oss_pdec_push(_g);
	    _out_data->u.long_macroENB_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 3);
	    _out_data->u.long_macroENB_ID.length = 21;
	    _oss_get_bits(_g, (unsigned char *)_out_data->u.long_macroENB_ID.value, 21, Aligned);
	    _oss_pdec_pop(_g);
	    break;
	default:
	    _out_data->choice = 0;	/* Unknown choice selector. */
	    OSS_UNKNOWN_EXT_FOUND(_g);
	    _oss_pdec_sot(_g);
	    OSS_CNTX_PUSH(_oss_c, 0)
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 0)
	_out_data->pLMNidentity.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->pLMNidentity.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->pLMNidentity.value, 24, Aligned);
	OSS_CNTX_SET(12)
	_out_data->cell_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 4);
	_out_data->cell_ID.length = 28;
	_oss_get_bits(_g, (unsigned char *)_out_data->cell_ID.value, 28, Aligned);
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 36);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_NR_CGI(OssGlobal * _g, _NR_CGI * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 0)
	_out_data->pLMNidentity.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->pLMNidentity.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->pLMNidentity.value, 24, Aligned);
	OSS_CNTX_SET(13)
	_out_data->nRCellIdentity.value = (unsigned char *)_oss_dec_const_alloc(_g, 5);
	_out_data->nRCellIdentity.length = 36;
	_oss_get_bits(_g, (unsigned char *)_out_data->nRCellIdentity.value, 36, Aligned);
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 40);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_ECGIList(OssGlobal * _g, _ECGIList ** _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_ECGIList * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 14)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _ECGIList * _cur = (_ECGIList *)_oss_dec_const_alloc(_g, sizeof(_ECGIList));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_ECGIList * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_EUTRAN_CGI(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_ECGIList *)_oss_dec_const_alloc(_g, sizeof(_ECGIList));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_Emergency_Area_ID_List * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 15)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _Emergency_Area_ID_List * _cur = (_Emergency_Area_ID_List *)_oss_dec_const_alloc(_g, sizeof(_Emergency_Area_ID_List));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_Emergency_Area_ID_List * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_cur->value.value = (char *)_oss_dec_const_alloc(_g, 3);
		_cur->value.length = 3;
		_oss_get_bits(_g, (unsigned char *)_cur->value.value, 24, Aligned);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_Emergency_Area_ID_List *)_oss_dec_const_alloc(_g, sizeof(_Emergency_Area_ID_List));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 16)
	_out_data->emergencyAreaID.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->emergencyAreaID.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->emergencyAreaID.value, 24, Aligned);
	OSS_CNTX_SET(17)
#ifndef OSS_NO_NESTING_CONTROL
	if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		_oss_c->reserved.fields.ext->seqSetNestingLimit)
	    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	{
	    _CellId_Broadcast_List * _head = NULL;
	    unsigned long count;
	    ossBoolean _last = FALSE;
	    unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    unsigned long _prev_fragm0;
#endif

	    OSS_CNTX_INIT

	    OSS_CNTX_PUSH(_oss_c, 18)
	    count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	    if (count > 0) {
		_CellId_Broadcast_List * _cur = (_CellId_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List));
		_head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		    _prev_fragm0 = count;
		}
#endif
		for (;;) {
		    _CellId_Broadcast_List * _temp = _cur;
		    OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
		    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
			    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
			    _oss_c->reserved.fields.ext->seqSetNestingLimit)
			_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
		    {
			unsigned char *_pext;
			unsigned char _extPres = 0x00;
			unsigned long _ea_count = 0;
			OSS_CNTX_INIT

			_extPres = _oss_get_1bit_unaligned(_g);
			_cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			OSS_CNTX_PUSH(_oss_c, 19)
			_dp_EUTRAN_CGI(_g, &_cur->value.eCGI);
			OSS_CNTX_SET(2)
			_cur->value.iE_Extensions = NULL;
			if (_cur->value.bit_mask & 0x80000000) {
			    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 41);
			} else {
			    _cur->value.iE_Extensions = NULL;
			}
			OSS_CNTX_POP(_oss_c)
			if (_extPres) {
			    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
			    {
				unsigned long i;

				for (i = 0; i < _ea_count; i++)
				    if (_pext[i / 8] & (0x80 >> (i % 8))) {
					OSS_UNKNOWN_EXT_FOUND(_g);
					break;
				    }
			    }
#endif
			    _oss_pdec_eas(_g, _pext, _ea_count, 0);
			}
		    }
#ifndef OSS_NO_NESTING_CONTROL
		    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
		    if (++_index >= count) {
			if (_last)
			    break;
			count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			    if ((!_last) && (_prev_fragm0 < 65536)) {
				OSS_CNTX_SETOCC(_index + 1)
				_oss_dec_error(_g, _invalid_fragmentation, 0L);
			    }
			    _prev_fragm0 = count - _index;
			}
#endif
			if (_index >= count)
			    break;
		    }
		    _cur = (_CellId_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List));
		    _temp->next = _cur;
		}
		_cur->next = NULL;
	    } else {
		_head = NULL;
	    }
	    _out_data->scheduledCellinEAI = _head;
	    OSS_CNTX_POP(_oss_c)
	}
#ifndef OSS_NO_NESTING_CONTROL
	if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 34);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_EmergencyAreaID_Broadcast_List * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 20)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _EmergencyAreaID_Broadcast_List * _cur = (_EmergencyAreaID_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Broadcast_List));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_EmergencyAreaID_Broadcast_List * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_13EmergencyAreaID_Broadcast_(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_EmergencyAreaID_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Broadcast_List));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 16)
	_out_data->emergencyAreaID.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->emergencyAreaID.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->emergencyAreaID.value, 24, Aligned);
	OSS_CNTX_SET(21)
#ifndef OSS_NO_NESTING_CONTROL
	if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		_oss_c->reserved.fields.ext->seqSetNestingLimit)
	    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	{
	    _CellID_Cancelled_List * _head = NULL;
	    unsigned long count;
	    ossBoolean _last = FALSE;
	    unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    unsigned long _prev_fragm0;
#endif

	    OSS_CNTX_INIT

	    OSS_CNTX_PUSH(_oss_c, 22)
	    count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	    if (count > 0) {
		_CellID_Cancelled_List * _cur = (_CellID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List));
		_head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		    _prev_fragm0 = count;
		}
#endif
		for (;;) {
		    _CellID_Cancelled_List * _temp = _cur;
		    OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
		    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
			    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
			    _oss_c->reserved.fields.ext->seqSetNestingLimit)
			_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
		    {
			unsigned char *_pext;
			unsigned char _extPres = 0x00;
			unsigned long _ea_count = 0;
			OSS_CNTX_INIT

			_extPres = _oss_get_1bit_unaligned(_g);
			_cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			OSS_CNTX_PUSH(_oss_c, 19)
			_dp_EUTRAN_CGI(_g, &_cur->value.eCGI);
			OSS_CNTX_SET(23)
			{
			    unsigned char _field[2] = {0,0};
			    _oss_get_bits(_g, _field, 16, Aligned);
			    _cur->value.numberOfBroadcasts = _field[0];
			    _cur->value.numberOfBroadcasts <<= 8;
			    _cur->value.numberOfBroadcasts |= _field[1];
			}
			OSS_CNTX_SET(2)
			_cur->value.iE_Extensions = NULL;
			if (_cur->value.bit_mask & 0x80000000) {
			    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 25);
			} else {
			    _cur->value.iE_Extensions = NULL;
			}
			OSS_CNTX_POP(_oss_c)
			if (_extPres) {
			    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
			    {
				unsigned long i;

				for (i = 0; i < _ea_count; i++)
				    if (_pext[i / 8] & (0x80 >> (i % 8))) {
					OSS_UNKNOWN_EXT_FOUND(_g);
					break;
				    }
			    }
#endif
			    _oss_pdec_eas(_g, _pext, _ea_count, 0);
			}
		    }
#ifndef OSS_NO_NESTING_CONTROL
		    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
		    if (++_index >= count) {
			if (_last)
			    break;
			count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			    if ((!_last) && (_prev_fragm0 < 65536)) {
				OSS_CNTX_SETOCC(_index + 1)
				_oss_dec_error(_g, _invalid_fragmentation, 0L);
			    }
			    _prev_fragm0 = count - _index;
			}
#endif
			if (_index >= count)
			    break;
		    }
		    _cur = (_CellID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List));
		    _temp->next = _cur;
		}
		_cur->next = NULL;
	    } else {
		_head = NULL;
	    }
	    _out_data->cancelledCellinEAI = _head;
	    OSS_CNTX_POP(_oss_c)
	}
#ifndef OSS_NO_NESTING_CONTROL
	if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 35);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_EmergencyAreaID_Cancelled_List * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 24)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _EmergencyAreaID_Cancelled_List * _cur = (_EmergencyAreaID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Cancelled_List));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_EmergencyAreaID_Cancelled_List * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_15EmergencyAreaID_Cancelled_(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_EmergencyAreaID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Cancelled_List));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_TAI(OssGlobal * _g, _TAI * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 0)
	_out_data->pLMNidentity.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->pLMNidentity.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->pLMNidentity.value, 24, Aligned);
	OSS_CNTX_SET(25)
	_out_data->tAC.value = (char *)_oss_dec_const_alloc(_g, 2);
	_out_data->tAC.length = 2;
	_oss_get_bits(_g, (unsigned char *)_out_data->tAC.value, 16, Unaligned);
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 48);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp__seq43(OssGlobal * _g, _seq43 * _out_data)
{
#if OSSDEBUG > 1 || !defined(OSS_NO_NESTING_CONTROL)
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 26)
	_dp_TAI(_g, &_out_data->tai);
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _dp_TAI_5GS(OssGlobal * _g, _TAI_5GS * _out_data)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 0)
	_out_data->pLMNidentity.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->pLMNidentity.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->pLMNidentity.value, 24, Aligned);
	OSS_CNTX_SET(27)
	_out_data->tAC_5GS.value = (char *)_oss_dec_const_alloc(_g, 3);
	_out_data->tAC_5GS.length = 3;
	_oss_get_bits(_g, (unsigned char *)_out_data->tAC_5GS.value, 24, Aligned);
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 49);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void * _dpSBC_AP_PDU(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _SBC_AP_PDU	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(1,28)
    _out_data = (_SBC_AP_PDU *)_oss_dec_const_alloc(_g, sizeof(_SBC_AP_PDU));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	if (!_oss_get_1bit_unaligned(_g)) {

	    _out_data->choice = (int)_oss_pdec_nonneg_2int(_g) + 1;
	    if (_out_data->choice > 3)
		_oss_enc_error(_g, _bad_choice, _out_data->choice);
	} else {
	    unsigned long _encode_value;
	    _encode_value = _oss_pdec_small_int_l(_g);
	    if (_encode_value > UINT_MAX - 4)
		_oss_enc_error(_g, _bad_choice, _encode_value);
	    _out_data->choice = (unsigned int)_encode_value + 4;
	}
	switch (_out_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 29)
	    _out_data->u.initiatingMessage = (_InitiatingMessage *)_oss_dec_const_alloc(_g, sizeof(_InitiatingMessage));
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 30)
		{
		    _out_data->u.initiatingMessage->procedureCode = _oss_get_octet(_g, Aligned);
		}
		OSS_CNTX_SET(31)
		_out_data->u.initiatingMessage->criticality = (enum Criticality)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
		OSS_CNTX_SET(32)
#ifdef OSS_OPENTYPE_HAS_USERFIELD
		_out_data->u.initiatingMessage->value.userField = NULL;
#endif
		if ((_g->decodingFlags & AUTOMATIC_ENCDEC) || !(_g->decodingFlags & NOCONSTRAIN)) {
		    static unsigned short const _ref_ids0[1] = { 3 };
		    static unsigned short const * const ref_id[1] = { _ref_ids0 };
		    void *          ref_val[1];
		    _SBC_AP_ELEMENTARY_PROCEDURE *	obj;

		    ref_val[0] = &(_out_data->u.initiatingMessage->procedureCode);
		    if (_goSBC_AP_ELEMENTARY_PROCEDURE(_g, 1, 1, ref_val, (unsigned short **)ref_id, &obj)) {
			_out_data->u.initiatingMessage->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.initiatingMessage->value.encoded.value);
			if (_out_data->u.initiatingMessage->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			    _oss_dec_error(_g, _zero_length_OpenType, 0);
			_out_data->u.initiatingMessage->value.pduNum = 0;
			*(void **)&_out_data->u.initiatingMessage->value.decoded = NULL;
		    } else {
			int pduNum = obj->InitiatingMessage;

			if (_g->decodingFlags & AUTOMATIC_ENCDEC) {
			    ((_EncDecGlobals*)_g->encDecVar)->_genflags |= 1;
			    _oss_pdec_push(_g);
			    *(void **)&_out_data->u.initiatingMessage->value.decoded = _PdSBC_AP_Containers(_g, &pduNum);
			    _out_data->u.initiatingMessage->value.pduNum = pduNum;
			    _out_data->u.initiatingMessage->value.encoded.value = NULL;
			    _out_data->u.initiatingMessage->value.encoded.length = 0;
			    _oss_pdec_pop(_g);
			} else {
			    _out_data->u.initiatingMessage->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.initiatingMessage->value.encoded.value);
			    if (_out_data->u.initiatingMessage->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
				_oss_dec_error(_g, _zero_length_OpenType, 0L);
			    *(void **)&_out_data->u.initiatingMessage->value.decoded = NULL;
			    _out_data->u.initiatingMessage->value.pduNum = (int)pduNum;
			}
		    }
		} else {
		    _out_data->u.initiatingMessage->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.initiatingMessage->value.encoded.value);
		    if (_out_data->u.initiatingMessage->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			_oss_dec_error(_g, _zero_length_OpenType, 0L);
		    _out_data->u.initiatingMessage->value.pduNum = 0;
		    *(void **)&_out_data->u.initiatingMessage->value.decoded = NULL;
		}
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 33)
	    _out_data->u.successfulOutcome = (_SuccessfulOutcome *)_oss_dec_const_alloc(_g, sizeof(_SuccessfulOutcome));
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 30)
		{
		    _out_data->u.successfulOutcome->procedureCode = _oss_get_octet(_g, Aligned);
		}
		OSS_CNTX_SET(31)
		_out_data->u.successfulOutcome->criticality = (enum Criticality)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
		OSS_CNTX_SET(32)
#ifdef OSS_OPENTYPE_HAS_USERFIELD
		_out_data->u.successfulOutcome->value.userField = NULL;
#endif
		if ((_g->decodingFlags & AUTOMATIC_ENCDEC) || !(_g->decodingFlags & NOCONSTRAIN)) {
		    static unsigned short const _ref_ids0[1] = { 3 };
		    static unsigned short const * const ref_id[1] = { _ref_ids0 };
		    void *          ref_val[1];
		    _SBC_AP_ELEMENTARY_PROCEDURE *	obj;

		    ref_val[0] = &(_out_data->u.successfulOutcome->procedureCode);
		    if (_goSBC_AP_ELEMENTARY_PROCEDURE(_g, 1, 1, ref_val, (unsigned short **)ref_id, &obj)) {
			_out_data->u.successfulOutcome->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.successfulOutcome->value.encoded.value);
			if (_out_data->u.successfulOutcome->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			    _oss_dec_error(_g, _zero_length_OpenType, 0);
			_out_data->u.successfulOutcome->value.pduNum = 0;
			*(void **)&_out_data->u.successfulOutcome->value.decoded = NULL;
		    } else {
			int pduNum = obj->SuccessfulOutcome;

			if (_g->decodingFlags & AUTOMATIC_ENCDEC) {
			    ((_EncDecGlobals*)_g->encDecVar)->_genflags |= 1;
			    _oss_pdec_push(_g);
			    *(void **)&_out_data->u.successfulOutcome->value.decoded = _PdSBC_AP_Containers(_g, &pduNum);
			    _out_data->u.successfulOutcome->value.pduNum = pduNum;
			    _out_data->u.successfulOutcome->value.encoded.value = NULL;
			    _out_data->u.successfulOutcome->value.encoded.length = 0;
			    _oss_pdec_pop(_g);
			} else {
			    _out_data->u.successfulOutcome->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.successfulOutcome->value.encoded.value);
			    if (_out_data->u.successfulOutcome->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
				_oss_dec_error(_g, _zero_length_OpenType, 0L);
			    *(void **)&_out_data->u.successfulOutcome->value.decoded = NULL;
			    _out_data->u.successfulOutcome->value.pduNum = (int)pduNum;
			}
		    }
		} else {
		    _out_data->u.successfulOutcome->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.successfulOutcome->value.encoded.value);
		    if (_out_data->u.successfulOutcome->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			_oss_dec_error(_g, _zero_length_OpenType, 0L);
		    _out_data->u.successfulOutcome->value.pduNum = 0;
		    *(void **)&_out_data->u.successfulOutcome->value.decoded = NULL;
		}
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 34)
	    _out_data->u.unsuccessfulOutcome = (_UnsuccessfulOutcome *)_oss_dec_const_alloc(_g, sizeof(_UnsuccessfulOutcome));
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 30)
		{
		    _out_data->u.unsuccessfulOutcome->procedureCode = _oss_get_octet(_g, Aligned);
		}
		OSS_CNTX_SET(31)
		_out_data->u.unsuccessfulOutcome->criticality = (enum Criticality)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
		OSS_CNTX_SET(32)
#ifdef OSS_OPENTYPE_HAS_USERFIELD
		_out_data->u.unsuccessfulOutcome->value.userField = NULL;
#endif
		if ((_g->decodingFlags & AUTOMATIC_ENCDEC) || !(_g->decodingFlags & NOCONSTRAIN)) {
		    static unsigned short const _ref_ids0[1] = { 3 };
		    static unsigned short const * const ref_id[1] = { _ref_ids0 };
		    void *          ref_val[1];
		    _SBC_AP_ELEMENTARY_PROCEDURE *	obj;

		    ref_val[0] = &(_out_data->u.unsuccessfulOutcome->procedureCode);
		    if (_goSBC_AP_ELEMENTARY_PROCEDURE(_g, 1, 1, ref_val, (unsigned short **)ref_id, &obj)) {
			_out_data->u.unsuccessfulOutcome->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.unsuccessfulOutcome->value.encoded.value);
			if (_out_data->u.unsuccessfulOutcome->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			    _oss_dec_error(_g, _zero_length_OpenType, 0);
			_out_data->u.unsuccessfulOutcome->value.pduNum = 0;
			*(void **)&_out_data->u.unsuccessfulOutcome->value.decoded = NULL;
		    } else {
			int pduNum = obj->UnsuccessfulOutcome;

			if (_g->decodingFlags & AUTOMATIC_ENCDEC) {
			    ((_EncDecGlobals*)_g->encDecVar)->_genflags |= 1;
			    _oss_pdec_push(_g);
			    *(void **)&_out_data->u.unsuccessfulOutcome->value.decoded = _PdSBC_AP_Containers(_g, &pduNum);
			    _out_data->u.unsuccessfulOutcome->value.pduNum = pduNum;
			    _out_data->u.unsuccessfulOutcome->value.encoded.value = NULL;
			    _out_data->u.unsuccessfulOutcome->value.encoded.length = 0;
			    _oss_pdec_pop(_g);
			} else {
			    _out_data->u.unsuccessfulOutcome->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.unsuccessfulOutcome->value.encoded.value);
			    if (_out_data->u.unsuccessfulOutcome->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
				_oss_dec_error(_g, _zero_length_OpenType, 0L);
			    *(void **)&_out_data->u.unsuccessfulOutcome->value.decoded = NULL;
			    _out_data->u.unsuccessfulOutcome->value.pduNum = (int)pduNum;
			}
		    }
		} else {
		    _out_data->u.unsuccessfulOutcome->value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_out_data->u.unsuccessfulOutcome->value.encoded.value);
		    if (_out_data->u.unsuccessfulOutcome->value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			_oss_dec_error(_g, _zero_length_OpenType, 0L);
		    _out_data->u.unsuccessfulOutcome->value.pduNum = 0;
		    *(void **)&_out_data->u.unsuccessfulOutcome->value.decoded = NULL;
		}
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	    break;
	default:
	    _out_data->choice = 0;	/* Unknown choice selector. */
	    OSS_UNKNOWN_EXT_FOUND(_g);
	    _oss_pdec_sot(_g);
	    OSS_CNTX_PUSH(_oss_c, 0)
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp0Write_Replace_Warning_Reque(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Request	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(2,35)
    _out_data = (_Write_Replace_Warning_Request *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Request));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 4);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 5);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp1Write_Replace_Warning_Respo(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Response	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(3,38)
    _out_data = (_Write_Replace_Warning_Response *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Response));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 6);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 7);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpStop_Warning_Request(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Stop_Warning_Request	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(4,39)
    _out_data = (_Stop_Warning_Request *)_oss_dec_const_alloc(_g, sizeof(_Stop_Warning_Request));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 8);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 9);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpStop_Warning_Response(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Response	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(5,40)
    _out_data = (_Write_Replace_Warning_Response *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Response));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 10);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 11);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp2Write_Replace_Warning_Indic(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Write_Replace_Warning_Indication	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(6,41)
    _out_data = (_Write_Replace_Warning_Indication *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Indication));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 12);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 13);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpStop_Warning_Indication(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Stop_Warning_Indication	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(7,42)
    _out_data = (_Stop_Warning_Indication *)_oss_dec_const_alloc(_g, sizeof(_Stop_Warning_Indication));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 14);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 15);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpPWS_Restart_Indication(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _PWS_Restart_Indication	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(8,43)
    _out_data = (_PWS_Restart_Indication *)_oss_dec_const_alloc(_g, sizeof(_PWS_Restart_Indication));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 16);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 17);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpPWS_Failure_Indication(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _PWS_Failure_Indication	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(9,44)
    _out_data = (_PWS_Failure_Indication *)_oss_dec_const_alloc(_g, sizeof(_PWS_Failure_Indication));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 18);
	OSS_CNTX_SET(37)
	_out_data->protocolExtensions = NULL;
	if (_out_data->bit_mask & 0x80000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->protocolExtensions, 19);
	} else {
	    _out_data->protocolExtensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpError_Indication(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Error_Indication	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(10,45)
    _out_data = (_Error_Indication *)_oss_dec_const_alloc(_g, sizeof(_Error_Indication));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	OSS_CNTX_PUSH(_oss_c, 36)
	_dpo_ProtocolIE_Container(_g, (_seqof1 **)&_out_data->protocolIEs, 20);
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp3Broadcast_Scheduled_Area_Li(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Scheduled_Area_List	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(11,46)
    _out_data = (_Broadcast_Scheduled_Area_List *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Scheduled_Area_List));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_4bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 47)
	_out_data->cellId_Broadcast_List = NULL;
	if (_out_data->bit_mask & 0x80000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_CellId_Broadcast_List * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 48)
		count = _oss_pdec_length(_g, 1L, 65535L, &_last);
		if (count > 0) {
		    _CellId_Broadcast_List * _cur = (_CellId_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_CellId_Broadcast_List * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 19)
			    _dp_EUTRAN_CGI(_g, &_cur->value.eCGI);
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 28);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_CellId_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->cellId_Broadcast_List = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->cellId_Broadcast_List = NULL;
	}
	OSS_CNTX_SET(49)
	_out_data->tAI_Broadcast_List = NULL;
	if (_out_data->bit_mask & 0x40000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_TAI_Broadcast_List * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 50)
		count = _oss_pdec_length(_g, 1L, 65535L, &_last);
		if (count > 0) {
		    _TAI_Broadcast_List * _cur = (_TAI_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_TAI_Broadcast_List));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_TAI_Broadcast_List * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 51)
			    _dp_TAI(_g, &_cur->value.tAI);
			    OSS_CNTX_SET(52)
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				    _oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			    {
				_CellId_Broadcast_List * _head1 = NULL;
				unsigned long count;
				ossBoolean _last = FALSE;
				unsigned long _index1 = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				unsigned long _prev_fragm1;
#endif

				OSS_CNTX_INIT

				OSS_CNTX_PUSH(_oss_c, 53)
				count = _oss_pdec_length(_g, 1L, 65535L, &_last);
				if (count > 0) {
				    _CellId_Broadcast_List * _cur1 = (_CellId_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List));
				    _head1 = _cur1;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
					_prev_fragm1 = count;
				    }
#endif
				    for (;;) {
					_CellId_Broadcast_List * _temp1 = _cur1;
					OSS_CNTX_SETOCC(_index1 + 1)
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
						++_oss_c->reserved.fields.ext->seqSetNestingCounter >
						_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
					{
					    unsigned char *_pext;
					    unsigned char _extPres = 0x00;
					    unsigned long _ea_count = 0;
					    OSS_CNTX_INIT

					    _extPres = _oss_get_1bit_unaligned(_g);
					    _cur1->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
					    OSS_CNTX_PUSH(_oss_c, 19)
					    _dp_EUTRAN_CGI(_g, &_cur1->value.eCGI);
					    OSS_CNTX_SET(2)
					    _cur1->value.iE_Extensions = NULL;
					    if (_cur1->value.bit_mask & 0x80000000) {
						_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur1->value.iE_Extensions, 42);
					    } else {
						_cur1->value.iE_Extensions = NULL;
					    }
					    OSS_CNTX_POP(_oss_c)
					    if (_extPres) {
						_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
						{
						    unsigned long i;

						    for (i = 0; i < _ea_count; i++)
							if (_pext[i / 8] & (0x80 >> (i % 8))) {
							    OSS_UNKNOWN_EXT_FOUND(_g);
							    break;
							}
						}
#endif
						_oss_pdec_eas(_g, _pext, _ea_count, 0);
					    }
					}
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
					if (++_index1 >= count) {
					    if (_last)
						break;
					    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
					    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
						if ((!_last) && (_prev_fragm1 < 65536)) {
						    OSS_CNTX_SETOCC(_index1 + 1)
						    _oss_dec_error(_g, _invalid_fragmentation, 0L);
						}
						_prev_fragm1 = count - _index1;
					    }
#endif
					    if (_index1 >= count)
						break;
					}
					_cur1 = (_CellId_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List));
					_temp1->next = _cur1;
				    }
				    _cur1->next = NULL;
				} else {
				    _head1 = NULL;
				}
				_cur->value.scheduledCellinTAI = _head1;
				OSS_CNTX_POP(_oss_c)
			    }
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 44);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_TAI_Broadcast_List *)_oss_dec_const_alloc(_g, sizeof(_TAI_Broadcast_List));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->tAI_Broadcast_List = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->tAI_Broadcast_List = NULL;
	}
	OSS_CNTX_SET(54)
	_out_data->emergencyAreaID_Broadcast_List = NULL;
	if (_out_data->bit_mask & 0x20000000) {
	    _dp_14EmergencyAreaID_Broadcast_(_g, &_out_data->emergencyAreaID_Broadcast_List);
	} else {
	    _out_data->emergencyAreaID_Broadcast_List = NULL;
	}
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x10000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 21);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp4Broadcast_Scheduled_Area_Li(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Scheduled_Area_List_5GS	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(12,55)
    _out_data = (_Broadcast_Scheduled_Area_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Scheduled_Area_List_5GS));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_4bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 56)
	_out_data->cellId_Broadcast_List_5GS = NULL;
	if (_out_data->bit_mask & 0x80000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_CellId_Broadcast_List_5GS * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 57)
		count = _oss_pdec_length(_g, 1L, 16776960L, &_last);
		if (count > 0) {
		    _CellId_Broadcast_List_5GS * _cur = (_CellId_Broadcast_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List_5GS));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_CellId_Broadcast_List_5GS * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 58)
			    _dp_NR_CGI(_g, &_cur->value.nR_CGI);
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 29);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 16776960L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_CellId_Broadcast_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List_5GS));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->cellId_Broadcast_List_5GS = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->cellId_Broadcast_List_5GS = NULL;
	}
	OSS_CNTX_SET(59)
	_out_data->tAI_Broadcast_List_5GS = NULL;
	if (_out_data->bit_mask & 0x40000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_TAI_Broadcast_List_5GS * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 57)
		count = _oss_pdec_length(_g, 1L, 2048L, &_last);
		if (count > 0) {
		    _TAI_Broadcast_List_5GS * _cur = (_TAI_Broadcast_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_TAI_Broadcast_List_5GS));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_TAI_Broadcast_List_5GS * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 60)
			    _dp_TAI_5GS(_g, &_cur->value.tAI_5GS);
			    OSS_CNTX_SET(61)
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				    _oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			    {
				_CellId_Broadcast_List_5GS * _head1 = NULL;
				unsigned long count;
				ossBoolean _last = FALSE;
				unsigned long _index1 = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				unsigned long _prev_fragm1;
#endif

				OSS_CNTX_INIT

				OSS_CNTX_PUSH(_oss_c, 57)
				count = _oss_pdec_length(_g, 1L, 65535L, &_last);
				if (count > 0) {
				    _CellId_Broadcast_List_5GS * _cur1 = (_CellId_Broadcast_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List_5GS));
				    _head1 = _cur1;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
					_prev_fragm1 = count;
				    }
#endif
				    for (;;) {
					_CellId_Broadcast_List_5GS * _temp1 = _cur1;
					OSS_CNTX_SETOCC(_index1 + 1)
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
						++_oss_c->reserved.fields.ext->seqSetNestingCounter >
						_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
					{
					    unsigned char *_pext;
					    unsigned char _extPres = 0x00;
					    unsigned long _ea_count = 0;
					    OSS_CNTX_INIT

					    _extPres = _oss_get_1bit_unaligned(_g);
					    _cur1->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
					    OSS_CNTX_PUSH(_oss_c, 58)
					    _dp_NR_CGI(_g, &_cur1->value.nR_CGI);
					    OSS_CNTX_SET(2)
					    _cur1->value.iE_Extensions = NULL;
					    if (_cur1->value.bit_mask & 0x80000000) {
						_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur1->value.iE_Extensions, 43);
					    } else {
						_cur1->value.iE_Extensions = NULL;
					    }
					    OSS_CNTX_POP(_oss_c)
					    if (_extPres) {
						_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
						{
						    unsigned long i;

						    for (i = 0; i < _ea_count; i++)
							if (_pext[i / 8] & (0x80 >> (i % 8))) {
							    OSS_UNKNOWN_EXT_FOUND(_g);
							    break;
							}
						}
#endif
						_oss_pdec_eas(_g, _pext, _ea_count, 0);
					    }
					}
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
					if (++_index1 >= count) {
					    if (_last)
						break;
					    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
					    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
						if ((!_last) && (_prev_fragm1 < 65536)) {
						    OSS_CNTX_SETOCC(_index1 + 1)
						    _oss_dec_error(_g, _invalid_fragmentation, 0L);
						}
						_prev_fragm1 = count - _index1;
					    }
#endif
					    if (_index1 >= count)
						break;
					}
					_cur1 = (_CellId_Broadcast_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellId_Broadcast_List_5GS));
					_temp1->next = _cur1;
				    }
				    _cur1->next = NULL;
				} else {
				    _head1 = NULL;
				}
				_cur->value.scheduledCellinTAI_5GS = _head1;
				OSS_CNTX_POP(_oss_c)
			    }
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 45);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 2048L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_TAI_Broadcast_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_TAI_Broadcast_List_5GS));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->tAI_Broadcast_List_5GS = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->tAI_Broadcast_List_5GS = NULL;
	}
	OSS_CNTX_SET(54)
	_out_data->emergencyAreaID_Broadcast_List = NULL;
	if (_out_data->bit_mask & 0x20000000) {
	    _dp_14EmergencyAreaID_Broadcast_(_g, &_out_data->emergencyAreaID_Broadcast_List);
	} else {
	    _out_data->emergencyAreaID_Broadcast_List = NULL;
	}
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x10000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 22);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp5Broadcast_Cancelled_Area_Li(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Cancelled_Area_List	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(13,62)
    _out_data = (_Broadcast_Cancelled_Area_List *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Cancelled_Area_List));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_4bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 63)
	_out_data->cellID_Cancelled_List = NULL;
	if (_out_data->bit_mask & 0x80000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_CellID_Cancelled_List * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 64)
		count = _oss_pdec_length(_g, 1L, 65535L, &_last);
		if (count > 0) {
		    _CellID_Cancelled_List * _cur = (_CellID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_CellID_Cancelled_List * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 19)
			    _dp_EUTRAN_CGI(_g, &_cur->value.eCGI);
			    OSS_CNTX_SET(23)
			    {
				unsigned char _field[2] = {0,0};
				_oss_get_bits(_g, _field, 16, Aligned);
				_cur->value.numberOfBroadcasts = _field[0];
				_cur->value.numberOfBroadcasts <<= 8;
				_cur->value.numberOfBroadcasts |= _field[1];
			    }
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 30);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_CellID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->cellID_Cancelled_List = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->cellID_Cancelled_List = NULL;
	}
	OSS_CNTX_SET(65)
	_out_data->tAI_Cancelled_List = NULL;
	if (_out_data->bit_mask & 0x40000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_TAI_Cancelled_List * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 66)
		count = _oss_pdec_length(_g, 1L, 65535L, &_last);
		if (count > 0) {
		    _TAI_Cancelled_List * _cur = (_TAI_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_TAI_Cancelled_List));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_TAI_Cancelled_List * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 51)
			    _dp_TAI(_g, &_cur->value.tAI);
			    OSS_CNTX_SET(67)
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				    _oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			    {
				_CellID_Cancelled_List * _head1 = NULL;
				unsigned long count;
				ossBoolean _last = FALSE;
				unsigned long _index1 = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				unsigned long _prev_fragm1;
#endif

				OSS_CNTX_INIT

				OSS_CNTX_PUSH(_oss_c, 68)
				count = _oss_pdec_length(_g, 1L, 65535L, &_last);
				if (count > 0) {
				    _CellID_Cancelled_List * _cur1 = (_CellID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List));
				    _head1 = _cur1;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
					_prev_fragm1 = count;
				    }
#endif
				    for (;;) {
					_CellID_Cancelled_List * _temp1 = _cur1;
					OSS_CNTX_SETOCC(_index1 + 1)
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
						++_oss_c->reserved.fields.ext->seqSetNestingCounter >
						_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
					{
					    unsigned char *_pext;
					    unsigned char _extPres = 0x00;
					    unsigned long _ea_count = 0;
					    OSS_CNTX_INIT

					    _extPres = _oss_get_1bit_unaligned(_g);
					    _cur1->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
					    OSS_CNTX_PUSH(_oss_c, 19)
					    _dp_EUTRAN_CGI(_g, &_cur1->value.eCGI);
					    OSS_CNTX_SET(23)
					    {
						unsigned char _field[2] = {0,0};
						_oss_get_bits(_g, _field, 16, Aligned);
						_cur1->value.numberOfBroadcasts = _field[0];
						_cur1->value.numberOfBroadcasts <<= 8;
						_cur1->value.numberOfBroadcasts |= _field[1];
					    }
					    OSS_CNTX_SET(2)
					    _cur1->value.iE_Extensions = NULL;
					    if (_cur1->value.bit_mask & 0x80000000) {
						_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur1->value.iE_Extensions, 26);
					    } else {
						_cur1->value.iE_Extensions = NULL;
					    }
					    OSS_CNTX_POP(_oss_c)
					    if (_extPres) {
						_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
						{
						    unsigned long i;

						    for (i = 0; i < _ea_count; i++)
							if (_pext[i / 8] & (0x80 >> (i % 8))) {
							    OSS_UNKNOWN_EXT_FOUND(_g);
							    break;
							}
						}
#endif
						_oss_pdec_eas(_g, _pext, _ea_count, 0);
					    }
					}
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
					if (++_index1 >= count) {
					    if (_last)
						break;
					    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
					    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
						if ((!_last) && (_prev_fragm1 < 65536)) {
						    OSS_CNTX_SETOCC(_index1 + 1)
						    _oss_dec_error(_g, _invalid_fragmentation, 0L);
						}
						_prev_fragm1 = count - _index1;
					    }
#endif
					    if (_index1 >= count)
						break;
					}
					_cur1 = (_CellID_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List));
					_temp1->next = _cur1;
				    }
				    _cur1->next = NULL;
				} else {
				    _head1 = NULL;
				}
				_cur->value.cancelledCellinTAI = _head1;
				OSS_CNTX_POP(_oss_c)
			    }
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 46);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_TAI_Cancelled_List *)_oss_dec_const_alloc(_g, sizeof(_TAI_Cancelled_List));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->tAI_Cancelled_List = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->tAI_Cancelled_List = NULL;
	}
	OSS_CNTX_SET(69)
	_out_data->emergencyAreaID_Cancelled_List = NULL;
	if (_out_data->bit_mask & 0x20000000) {
	    _dp_16EmergencyAreaID_Cancelled_(_g, &_out_data->emergencyAreaID_Cancelled_List);
	} else {
	    _out_data->emergencyAreaID_Cancelled_List = NULL;
	}
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x10000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 23);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp6Broadcast_Cancelled_Area_Li(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Cancelled_Area_List_5GS	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(14,70)
    _out_data = (_Broadcast_Cancelled_Area_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Cancelled_Area_List_5GS));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_4bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 71)
	_out_data->cellID_Cancelled_List_5GS = NULL;
	if (_out_data->bit_mask & 0x80000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_CellID_Cancelled_List_5GS * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 57)
		count = _oss_pdec_length(_g, 1L, 16776960L, &_last);
		if (count > 0) {
		    _CellID_Cancelled_List_5GS * _cur = (_CellID_Cancelled_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List_5GS));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_CellID_Cancelled_List_5GS * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 58)
			    _dp_NR_CGI(_g, &_cur->value.nR_CGI);
			    OSS_CNTX_SET(23)
			    {
				unsigned char _field[2] = {0,0};
				_oss_get_bits(_g, _field, 16, Aligned);
				_cur->value.numberOfBroadcasts = _field[0];
				_cur->value.numberOfBroadcasts <<= 8;
				_cur->value.numberOfBroadcasts |= _field[1];
			    }
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 31);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 16776960L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_CellID_Cancelled_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List_5GS));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->cellID_Cancelled_List_5GS = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->cellID_Cancelled_List_5GS = NULL;
	}
	OSS_CNTX_SET(72)
	_out_data->tAI_Cancelled_List_5GS = NULL;
	if (_out_data->bit_mask & 0x40000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_TAI_Cancelled_List_5GS * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 57)
		count = _oss_pdec_length(_g, 1L, 2048L, &_last);
		if (count > 0) {
		    _TAI_Cancelled_List_5GS * _cur = (_TAI_Cancelled_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_TAI_Cancelled_List_5GS));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_TAI_Cancelled_List_5GS * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 60)
			    _dp_TAI_5GS(_g, &_cur->value.tAI_5GS);
			    OSS_CNTX_SET(73)
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				    _oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			    {
				_CellID_Cancelled_List_5GS * _head1 = NULL;
				unsigned long count;
				ossBoolean _last = FALSE;
				unsigned long _index1 = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				unsigned long _prev_fragm1;
#endif

				OSS_CNTX_INIT

				OSS_CNTX_PUSH(_oss_c, 57)
				count = _oss_pdec_length(_g, 1L, 65535L, &_last);
				if (count > 0) {
				    _CellID_Cancelled_List_5GS * _cur1 = (_CellID_Cancelled_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List_5GS));
				    _head1 = _cur1;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
				    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
					_prev_fragm1 = count;
				    }
#endif
				    for (;;) {
					_CellID_Cancelled_List_5GS * _temp1 = _cur1;
					OSS_CNTX_SETOCC(_index1 + 1)
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
						++_oss_c->reserved.fields.ext->seqSetNestingCounter >
						_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
					{
					    unsigned char *_pext;
					    unsigned char _extPres = 0x00;
					    unsigned long _ea_count = 0;
					    OSS_CNTX_INIT

					    _extPres = _oss_get_1bit_unaligned(_g);
					    _cur1->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
					    OSS_CNTX_PUSH(_oss_c, 58)
					    _dp_NR_CGI(_g, &_cur1->value.nR_CGI);
					    OSS_CNTX_SET(23)
					    {
						unsigned char _field[2] = {0,0};
						_oss_get_bits(_g, _field, 16, Aligned);
						_cur1->value.numberOfBroadcasts = _field[0];
						_cur1->value.numberOfBroadcasts <<= 8;
						_cur1->value.numberOfBroadcasts |= _field[1];
					    }
					    OSS_CNTX_SET(2)
					    _cur1->value.iE_Extensions = NULL;
					    if (_cur1->value.bit_mask & 0x80000000) {
						_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur1->value.iE_Extensions, 27);
					    } else {
						_cur1->value.iE_Extensions = NULL;
					    }
					    OSS_CNTX_POP(_oss_c)
					    if (_extPres) {
						_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
						{
						    unsigned long i;

						    for (i = 0; i < _ea_count; i++)
							if (_pext[i / 8] & (0x80 >> (i % 8))) {
							    OSS_UNKNOWN_EXT_FOUND(_g);
							    break;
							}
						}
#endif
						_oss_pdec_eas(_g, _pext, _ea_count, 0);
					    }
					}
#ifndef OSS_NO_NESTING_CONTROL
					if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
					    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
					if (++_index1 >= count) {
					    if (_last)
						break;
					    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
					    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
						if ((!_last) && (_prev_fragm1 < 65536)) {
						    OSS_CNTX_SETOCC(_index1 + 1)
						    _oss_dec_error(_g, _invalid_fragmentation, 0L);
						}
						_prev_fragm1 = count - _index1;
					    }
#endif
					    if (_index1 >= count)
						break;
					}
					_cur1 = (_CellID_Cancelled_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_CellID_Cancelled_List_5GS));
					_temp1->next = _cur1;
				    }
				    _cur1->next = NULL;
				} else {
				    _head1 = NULL;
				}
				_cur->value.cancelledCellinTAI_5GS = _head1;
				OSS_CNTX_POP(_oss_c)
			    }
#ifndef OSS_NO_NESTING_CONTROL
			    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
				_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 47);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 2048L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_TAI_Cancelled_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_TAI_Cancelled_List_5GS));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->tAI_Cancelled_List_5GS = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->tAI_Cancelled_List_5GS = NULL;
	}
	OSS_CNTX_SET(69)
	_out_data->emergencyAreaID_Cancelled_List = NULL;
	if (_out_data->bit_mask & 0x20000000) {
	    _dp_16EmergencyAreaID_Cancelled_(_g, &_out_data->emergencyAreaID_Cancelled_List);
	} else {
	    _out_data->emergencyAreaID_Cancelled_List = NULL;
	}
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x10000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 24);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpBroadcast_Empty_Area_List(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Empty_Area_List	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(15,74)
    _out_data = (_Broadcast_Empty_Area_List **)_oss_dec_const_init_alloc(_g, sizeof(_Broadcast_Empty_Area_List *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_Broadcast_Empty_Area_List * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 75)
	count = _oss_pdec_length(_g, 1L, 256L, &_last);
	if (count > 0) {
	    _Broadcast_Empty_Area_List * _cur = (_Broadcast_Empty_Area_List *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Empty_Area_List));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_Broadcast_Empty_Area_List * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_Global_ENB_ID(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 256L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_Broadcast_Empty_Area_List *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Empty_Area_List));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp7Broadcast_Empty_Area_List_5(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Broadcast_Empty_Area_List_5GS	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(16,76)
    _out_data = (_Broadcast_Empty_Area_List_5GS **)_oss_dec_const_init_alloc(_g, sizeof(_Broadcast_Empty_Area_List_5GS *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_Broadcast_Empty_Area_List_5GS * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 77)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _Broadcast_Empty_Area_List_5GS * _cur = (_Broadcast_Empty_Area_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Empty_Area_List_5GS));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_Broadcast_Empty_Area_List_5GS * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_Global_RAN_Node_ID(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_Broadcast_Empty_Area_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Empty_Area_List_5GS));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpCause(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(17,78)
    _out_data = (OSS_UINT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32));
    {
	*_out_data = _oss_get_octet(_g, Aligned);
    }
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp8Concurrent_Warning_Message_(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Concurrent_Warning_Message_Indicator	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(18,79)
    _out_data = (enum Concurrent_Warning_Message_Indicator *)_oss_dec_const_alloc(_g, sizeof(enum Concurrent_Warning_Message_Indicator));
    *_out_data = (enum Concurrent_Warning_Message_Indicator)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[1], NULL);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpCriticality_Diagnostics(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Criticality_Diagnostics	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(19,80)
    _out_data = (_Criticality_Diagnostics *)_oss_dec_const_alloc(_g, sizeof(_Criticality_Diagnostics));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	unsigned char *_pext;
	unsigned char _extPres = 0x00;
	unsigned long _ea_count = 0;
	OSS_CNTX_INIT

	_extPres = _oss_get_1bit_unaligned(_g);
	_out_data->bit_mask = (OSS_UINT32)_oss_get_5bit_unaligned(_g) << 24;
	OSS_CNTX_PUSH(_oss_c, 30)
	if (_out_data->bit_mask & 0x80000000) {
	    {
		_out_data->procedureCode = _oss_get_octet(_g, Aligned);
	    }
	}
	OSS_CNTX_SET(81)
	if (_out_data->bit_mask & 0x40000000) {
	    _out_data->triggeringMessage = (enum TriggeringMessage)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[2], NULL);
	}
	OSS_CNTX_SET(82)
	if (_out_data->bit_mask & 0x20000000) {
	    _out_data->procedureCriticality = (enum Criticality)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
	}
	OSS_CNTX_SET(83)
	_out_data->iE_CriticalityDiagnostics = NULL;
	if (_out_data->bit_mask & 0x10000000) {
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_CriticalityDiagnostics_IE_List * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 57)
		count = _oss_pdec_length(_g, 1L, 256L, &_last);
		if (count > 0) {
		    _CriticalityDiagnostics_IE_List * _cur = (_CriticalityDiagnostics_IE_List *)_oss_dec_const_alloc(_g, sizeof(_CriticalityDiagnostics_IE_List));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_CriticalityDiagnostics_IE_List * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
				++_oss_c->reserved.fields.ext->seqSetNestingCounter >
				_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
			{
			    unsigned char *_pext;
			    unsigned char _extPres = 0x00;
			    unsigned long _ea_count = 0;
			    OSS_CNTX_INIT

			    _extPres = _oss_get_1bit_unaligned(_g);
			    _cur->value.bit_mask = (OSS_UINT32)_oss_get_1bit_unaligned(_g) << 24;
			    OSS_CNTX_PUSH(_oss_c, 84)
			    _cur->value.iECriticality = (enum Criticality)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
			    OSS_CNTX_SET(85)
			    {
				unsigned char _field[2] = {0,0};
				_oss_get_bits(_g, _field, 16, Aligned);
				_cur->value.iE_ID = _field[0];
				_cur->value.iE_ID <<= 8;
				_cur->value.iE_ID |= _field[1];
			    }
			    OSS_CNTX_SET(86)
			    _cur->value.typeOfError = (enum TypeOfError)_oss_pdec_enum(_g, (struct _enum_data*)&_enums[3], (struct _enum_data*)&_enums[4]);
			    OSS_CNTX_SET(2)
			    _cur->value.iE_Extensions = NULL;
			    if (_cur->value.bit_mask & 0x80000000) {
				_dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_cur->value.iE_Extensions, 33);
			    } else {
				_cur->value.iE_Extensions = NULL;
			    }
			    OSS_CNTX_POP(_oss_c)
			    if (_extPres) {
				_ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
				{
				    unsigned long i;

				    for (i = 0; i < _ea_count; i++)
					if (_pext[i / 8] & (0x80 >> (i % 8))) {
					    OSS_UNKNOWN_EXT_FOUND(_g);
					    break;
					}
				}
#endif
				_oss_pdec_eas(_g, _pext, _ea_count, 0);
			    }
			}
#ifndef OSS_NO_NESTING_CONTROL
			if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
			    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 256L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_CriticalityDiagnostics_IE_List *)_oss_dec_const_alloc(_g, sizeof(_CriticalityDiagnostics_IE_List));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->iE_CriticalityDiagnostics = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	} else {
	    _out_data->iE_CriticalityDiagnostics = NULL;
	}
	OSS_CNTX_SET(2)
	_out_data->iE_Extensions = NULL;
	if (_out_data->bit_mask & 0x8000000) {
	    _dpo_ProtocolExtensionContaine(_g, (_seqof2 **)&_out_data->iE_Extensions, 32);
	} else {
	    _out_data->iE_Extensions = NULL;
	}
	OSS_CNTX_POP(_oss_c)
	if (_extPres) {
	    _ea_count = _oss_pdec_eap(_g, &_pext);
#if defined(OSS_DETECT_UNKNOWN_EXTENSION)
	    {
		unsigned long i;

		for (i = 0; i < _ea_count; i++)
		    if (_pext[i / 8] & (0x80 >> (i % 8))) {
			OSS_UNKNOWN_EXT_FOUND(_g);
			break;
		    }
	    }
#endif
	    _oss_pdec_eas(_g, _pext, _ea_count, 0);
	}
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpData_Coding_Scheme(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssBitString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(20,87)
    _out_data = (OSSC::COssBitString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssBitString));
    _out_data->value = (unsigned char *)_oss_dec_const_alloc(_g, 1);
    _out_data->length = 8;
    _oss_get_bits(_g, (unsigned char *)_out_data->value, 8, Unaligned);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpExtended_Repetition_Period(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(21,88)
    _out_data = (OSS_UINT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32));
    {
	*_out_data = (OSS_UINT32)_oss_pdec_indeflen_limited_int_l(_g, 3, 4096L, 0L, 4294967295L);
    }
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpFailed_Cell_List(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _ECGIList	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(22,89)
    _out_data = (_ECGIList **)_oss_dec_const_init_alloc(_g, sizeof(_ECGIList *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_ECGIList * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 14)
	count = _oss_pdec_length(_g, 1L, 256L, &_last);
	if (count > 0) {
	    _ECGIList * _cur = (_ECGIList *)_oss_dec_const_alloc(_g, sizeof(_ECGIList));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_ECGIList * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_EUTRAN_CGI(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 256L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_ECGIList *)_oss_dec_const_alloc(_g, sizeof(_ECGIList));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpFailed_Cell_List_NR(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NR_CGIList	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(23,90)
    _out_data = (_NR_CGIList **)_oss_dec_const_init_alloc(_g, sizeof(_NR_CGIList *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_NR_CGIList * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 91)
	count = _oss_pdec_length(_g, 1L, 16384L, &_last);
	if (count > 0) {
	    _NR_CGIList * _cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_NR_CGIList * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_NR_CGI(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 16384L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpGlobal_ENB_ID(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Global_ENB_ID	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(24,92)
    _out_data = (_Global_ENB_ID *)_oss_dec_const_alloc(_g, sizeof(_Global_ENB_ID));
    _dp_Global_ENB_ID(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpGlobal_RAN_Node_ID(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Global_RAN_Node_ID	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(25,93)
    _out_data = (_Global_RAN_Node_ID *)_oss_dec_const_alloc(_g, sizeof(_Global_RAN_Node_ID));
    _dp_Global_RAN_Node_ID(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpGlobal_GNB_ID(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Global_GNB_ID	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(26,94)
    _out_data = (_Global_GNB_ID *)_oss_dec_const_alloc(_g, sizeof(_Global_GNB_ID));
    _dp_Global_GNB_ID(_g, _out_data);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpList_of_TAIs(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_TAIs	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(27,95)
    _out_data = (_List_of_TAIs **)_oss_dec_const_init_alloc(_g, sizeof(_List_of_TAIs *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_List_of_TAIs * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 57)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _List_of_TAIs * _cur = (_List_of_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_TAIs));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_List_of_TAIs * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp__seq43(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_List_of_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_TAIs));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpList_of_TAIs_Restart(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_TAIs	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(28,96)
    _out_data = (_List_of_TAIs **)_oss_dec_const_init_alloc(_g, sizeof(_List_of_TAIs *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_List_of_TAIs * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 57)
	count = _oss_pdec_length(_g, 1L, 2048L, &_last);
	if (count > 0) {
	    _List_of_TAIs * _cur = (_List_of_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_TAIs));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_List_of_TAIs * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp__seq43(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 2048L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_List_of_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_TAIs));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpList_of_EAIs_Restart(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Emergency_Area_ID_List	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(29,97)
    _out_data = (_Emergency_Area_ID_List **)_oss_dec_const_init_alloc(_g, sizeof(_Emergency_Area_ID_List *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_Emergency_Area_ID_List * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 15)
	count = _oss_pdec_length(_g, 1L, 256L, &_last);
	if (count > 0) {
	    _Emergency_Area_ID_List * _cur = (_Emergency_Area_ID_List *)_oss_dec_const_alloc(_g, sizeof(_Emergency_Area_ID_List));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_Emergency_Area_ID_List * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_cur->value.value = (char *)_oss_dec_const_alloc(_g, 3);
		_cur->value.length = 3;
		_oss_get_bits(_g, (unsigned char *)_cur->value.value, 24, Aligned);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 256L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_Emergency_Area_ID_List *)_oss_dec_const_alloc(_g, sizeof(_Emergency_Area_ID_List));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpList_of_5GS_TAIs(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_5GS_TAIs	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(30,98)
    _out_data = (_List_of_5GS_TAIs **)_oss_dec_const_init_alloc(_g, sizeof(_List_of_5GS_TAIs *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_List_of_5GS_TAIs * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 99)
	count = _oss_pdec_length(_g, 1L, 2048L, &_last);
	if (count > 0) {
	    _List_of_5GS_TAIs * _cur = (_List_of_5GS_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_List_of_5GS_TAIs * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_TAI_5GS(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 2048L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_List_of_5GS_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp9List_of_5GS_Cells_for_Failu(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NR_CGIList	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(31,100)
    _out_data = (_NR_CGIList **)_oss_dec_const_init_alloc(_g, sizeof(_NR_CGIList *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_NR_CGIList * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 91)
	count = _oss_pdec_length(_g, 1L, 16384L, &_last);
	if (count > 0) {
	    _NR_CGIList * _cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_NR_CGIList * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_NR_CGI(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 16384L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpList_of_5GS_TAI_for_Restart(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_5GS_TAIs	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(32,101)
    _out_data = (_List_of_5GS_TAIs **)_oss_dec_const_init_alloc(_g, sizeof(_List_of_5GS_TAIs *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_List_of_5GS_TAIs * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 99)
	count = _oss_pdec_length(_g, 1L, 2048L, &_last);
	if (count > 0) {
	    _List_of_5GS_TAIs * _cur = (_List_of_5GS_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_List_of_5GS_TAIs * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_TAI_5GS(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 2048L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_List_of_5GS_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpMessage_Identifier(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssBitString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(33,102)
    _out_data = (OSSC::COssBitString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssBitString));
    _out_data->value = (unsigned char *)_oss_dec_const_alloc(_g, 2);
    _out_data->length = 16;
    _oss_get_bits(_g, (unsigned char *)_out_data->value, 16, Unaligned);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp10Number_of_Broadcasts_Reque(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(34,103)
    _out_data = (OSS_UINT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32));
    {
	unsigned char _field[2] = {0,0};
	_oss_get_bits(_g, _field, 16, Aligned);
	*_out_data = _field[0];
	*_out_data <<= 8;
	*_out_data |= _field[1];
    }
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpNgENB_ID(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NgENB_ID	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(35,104)
    _out_data = (_NgENB_ID *)_oss_dec_const_alloc(_g, sizeof(_NgENB_ID));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	if (!_oss_get_1bit_unaligned(_g)) {

	    _out_data->choice = (int)_oss_pdec_nonneg_2int(_g) + 1;
	    if (_out_data->choice > 3)
		_oss_enc_error(_g, _bad_choice, _out_data->choice);
	} else {
	    unsigned long _encode_value;
	    _encode_value = _oss_pdec_small_int_l(_g);
	    if (_encode_value > UINT_MAX - 4)
		_oss_enc_error(_g, _bad_choice, _encode_value);
	    _out_data->choice = (unsigned int)_encode_value + 4;
	}
	switch (_out_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 105)
	    _out_data->u.macroNgENB_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 3);
	    _out_data->u.macroNgENB_ID.length = 20;
	    _oss_get_bits(_g, (unsigned char *)_out_data->u.macroNgENB_ID.value, 20, Aligned);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 106)
	    _out_data->u.shortMacroNgENB_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 3);
	    _out_data->u.shortMacroNgENB_ID.length = 18;
	    _oss_get_bits(_g, (unsigned char *)_out_data->u.shortMacroNgENB_ID.value, 18, Aligned);
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 107)
	    _out_data->u.longMacroNgENB_ID.value = (unsigned char *)_oss_dec_const_alloc(_g, 3);
	    _out_data->u.longMacroNgENB_ID.length = 21;
	    _oss_get_bits(_g, (unsigned char *)_out_data->u.longMacroNgENB_ID.value, 21, Aligned);
	    break;
	default:
	    _out_data->choice = 0;	/* Unknown choice selector. */
	    OSS_UNKNOWN_EXT_FOUND(_g);
	    _oss_pdec_sot(_g);
	    OSS_CNTX_PUSH(_oss_c, 0)
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpOmc_Id(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(36,108)
    _out_data = (OSSC::COssString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssString));
    _out_data->length = (OSS_UINT32)_oss_pdec_constr_uoct_ia(_g, (unsigned char **)&_out_data->value, 1L, 20L);

    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpRepetition_Period(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSS_UINT32	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(37,109)
    _out_data = (OSS_UINT32 *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32));
    {
	unsigned char _field[2] = {0,0};
	_oss_get_bits(_g, _field, 16, Aligned);
	*_out_data = _field[0];
	*_out_data <<= 8;
	*_out_data |= _field[1];
    }
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpRestarted_Cell_List(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _ECGIList	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(38,110)
    _out_data = (_ECGIList **)_oss_dec_const_init_alloc(_g, sizeof(_ECGIList *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_ECGIList * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 14)
	count = _oss_pdec_length(_g, 1L, 256L, &_last);
	if (count > 0) {
	    _ECGIList * _cur = (_ECGIList *)_oss_dec_const_alloc(_g, sizeof(_ECGIList));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_ECGIList * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_EUTRAN_CGI(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 256L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_ECGIList *)_oss_dec_const_alloc(_g, sizeof(_ECGIList));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpRAT_Selector_5GS(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum RAT_Selector_5GS	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(39,111)
    _out_data = (enum RAT_Selector_5GS *)_oss_dec_const_alloc(_g, sizeof(enum RAT_Selector_5GS));
    *_out_data = (enum RAT_Selector_5GS)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[5], NULL);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpRestarted_Cell_List_NR(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _NR_CGIList	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(40,112)
    _out_data = (_NR_CGIList **)_oss_dec_const_init_alloc(_g, sizeof(_NR_CGIList *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_NR_CGIList * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 91)
	count = _oss_pdec_length(_g, 1L, 16384L, &_last);
	if (count > 0) {
	    _NR_CGIList * _cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_NR_CGIList * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_NR_CGI(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 16384L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp11Send_Write_Replace_Warning(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Send_Write_Replace_Warning_Indication	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(41,113)
    _out_data = (enum Send_Write_Replace_Warning_Indication *)_oss_dec_const_alloc(_g, sizeof(enum Send_Write_Replace_Warning_Indication));
    *_out_data = (enum Send_Write_Replace_Warning_Indication)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[6], NULL);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpSend_Stop_Warning_Indication(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Send_Stop_Warning_Indication	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(42,114)
    _out_data = (enum Send_Stop_Warning_Indication *)_oss_dec_const_alloc(_g, sizeof(enum Send_Stop_Warning_Indication));
    *_out_data = (enum Send_Stop_Warning_Indication)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[7], NULL);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpSerial_Number(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssBitString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(43,115)
    _out_data = (OSSC::COssBitString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssBitString));
    _out_data->value = (unsigned char *)_oss_dec_const_alloc(_g, 2);
    _out_data->length = 16;
    _oss_get_bits(_g, (unsigned char *)_out_data->value, 16, Unaligned);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpStop_All_Indicator(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    enum Stop_All_Indicator	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(44,116)
    _out_data = (enum Stop_All_Indicator *)_oss_dec_const_alloc(_g, sizeof(enum Stop_All_Indicator));
    *_out_data = (enum Stop_All_Indicator)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[8], NULL);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpUnknown_Tracking_Area_List(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _TAI_List_for_Warning	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(45,117)
    _out_data = (_TAI_List_for_Warning **)_oss_dec_const_init_alloc(_g, sizeof(_TAI_List_for_Warning *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_TAI_List_for_Warning * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 118)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _TAI_List_for_Warning * _cur = (_TAI_List_for_Warning *)_oss_dec_const_alloc(_g, sizeof(_TAI_List_for_Warning));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_TAI_List_for_Warning * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_TAI(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_TAI_List_for_Warning *)_oss_dec_const_alloc(_g, sizeof(_TAI_List_for_Warning));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dp12Unknown_5GS_Tracking_Area_(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _List_of_5GS_TAIs	**_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(46,119)
    _out_data = (_List_of_5GS_TAIs **)_oss_dec_const_init_alloc(_g, sizeof(_List_of_5GS_TAIs *));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_List_of_5GS_TAIs * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 99)
	count = _oss_pdec_length(_g, 1L, 2048L, &_last);
	if (count > 0) {
	    _List_of_5GS_TAIs * _cur = (_List_of_5GS_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_List_of_5GS_TAIs * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
		_dp_TAI_5GS(_g, &_cur->value);
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 2048L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_List_of_5GS_TAIs *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpWarning_Area_List(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Warning_Area_List	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(47,120)
    _out_data = (_Warning_Area_List *)_oss_dec_const_alloc(_g, sizeof(_Warning_Area_List));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	if (!_oss_get_1bit_unaligned(_g)) {

	    _out_data->choice = (int)_oss_pdec_nonneg_2int(_g) + 1;
	    if (_out_data->choice > 3)
		_oss_enc_error(_g, _bad_choice, _out_data->choice);
	} else {
	    unsigned long _encode_value;
	    _encode_value = _oss_pdec_small_int_l(_g);
	    if (_encode_value > UINT_MAX - 4)
		_oss_enc_error(_g, _bad_choice, _encode_value);
	    _out_data->choice = (unsigned int)_encode_value + 4;
	}
	switch (_out_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 121)
	    _dp_ECGIList(_g, &_out_data->u.cell_ID_List);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 122)
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_TAI_List_for_Warning * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 118)
		count = _oss_pdec_length(_g, 1L, 65535L, &_last);
		if (count > 0) {
		    _TAI_List_for_Warning * _cur = (_TAI_List_for_Warning *)_oss_dec_const_alloc(_g, sizeof(_TAI_List_for_Warning));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_TAI_List_for_Warning * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
			_dp_TAI(_g, &_cur->value);
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_TAI_List_for_Warning *)_oss_dec_const_alloc(_g, sizeof(_TAI_List_for_Warning));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->u.tracking_Area_List_for_Warning = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 123)
	    _dp_Emergency_Area_ID_List(_g, &_out_data->u.emergency_Area_ID_List);
	    break;
	default:
	    _out_data->choice = 0;	/* Unknown choice selector. */
	    OSS_UNKNOWN_EXT_FOUND(_g);
	    _oss_pdec_sot(_g);
	    OSS_CNTX_PUSH(_oss_c, 0)
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpWarning_Message_Content(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(48,124)
    _out_data = (OSSC::COssString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssString));
    _out_data->length = (OSS_UINT32)_oss_pdec_constr_uoct_ia(_g, (unsigned char **)&_out_data->value, 1L, 9600L);

    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpWarning_Area_Coordinates(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(49,125)
    _out_data = (OSSC::COssString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssString));
    _out_data->length = (OSS_UINT32)_oss_pdec_constr_uoct_ia(_g, (unsigned char **)&_out_data->value, 1L, 1024L);

    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpWarning_Security_Information(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(50,126)
    _out_data = (OSSC::COssString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssString));
    _out_data->value = (char *)_oss_dec_const_alloc(_g, 50);
    _out_data->length = 50;
    _oss_get_bits(_g, (unsigned char *)_out_data->value, 400, Aligned);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpWarning_Type(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    OSSC::COssString	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(51,127)
    _out_data = (OSSC::COssString *)_oss_dec_const_alloc(_g, sizeof(OSSC::COssString));
    _out_data->value = (char *)_oss_dec_const_alloc(_g, 2);
    _out_data->length = 2;
    _oss_get_bits(_g, (unsigned char *)_out_data->value, 16, Unaligned);
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _dpWarning_Area_List_5GS(OssGlobal * _g)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _Warning_Area_List_5GS	*_out_data;
    OSS_CNTX_INITZERO

    OSS_CNTX_ANCHOR_SET(52,128)
    _out_data = (_Warning_Area_List_5GS *)_oss_dec_const_alloc(_g, sizeof(_Warning_Area_List_5GS));
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	OSS_CNTX_INIT

	if (!_oss_get_1bit_unaligned(_g)) {

	    _out_data->choice = (int)_oss_pdec_nonneg_2int(_g) + 1;
	} else {
	    unsigned long _encode_value;
	    _encode_value = _oss_pdec_small_int_l(_g);
	    if (_encode_value > UINT_MAX - 5)
		_oss_enc_error(_g, _bad_choice, _encode_value);
	    _out_data->choice = (unsigned int)_encode_value + 5;
	}
	switch (_out_data->choice) {
	case 1:
	    OSS_CNTX_PUSH(_oss_c, 121)
	    _dp_ECGIList(_g, &_out_data->u.cell_ID_List);
	    break;
	case 2:
	    OSS_CNTX_PUSH(_oss_c, 129)
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
		    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
		    _oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
	    {
		_NR_CGIList * _head = NULL;
		unsigned long count;
		ossBoolean _last = FALSE;
		unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		unsigned long _prev_fragm0;
#endif

		OSS_CNTX_INIT

		OSS_CNTX_PUSH(_oss_c, 91)
		count = _oss_pdec_length(_g, 1L, 16384L, &_last);
		if (count > 0) {
		    _NR_CGIList * _cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
		    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			_prev_fragm0 = count;
		    }
#endif
		    for (;;) {
			_NR_CGIList * _temp = _cur;
			OSS_CNTX_SETOCC(_index + 1)
			_dp_NR_CGI(_g, &_cur->value);
			if (++_index >= count) {
			    if (_last)
				break;
			    count += _oss_pdec_length(_g, 1L, 16384L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
			    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
				if ((!_last) && (_prev_fragm0 < 65536)) {
				    OSS_CNTX_SETOCC(_index + 1)
				    _oss_dec_error(_g, _invalid_fragmentation, 0L);
				}
				_prev_fragm0 = count - _index;
			    }
#endif
			    if (_index >= count)
				break;
			}
			_cur = (_NR_CGIList *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList));
			_temp->next = _cur;
		    }
		    _cur->next = NULL;
		} else {
		    _head = NULL;
		}
		_out_data->u.nR_CGIList = _head;
		OSS_CNTX_POP(_oss_c)
	    }
#ifndef OSS_NO_NESTING_CONTROL
	    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
	    break;
	case 3:
	    OSS_CNTX_PUSH(_oss_c, 130)
	    _out_data->u.tAIList_5GS = (_TAI_5GS *)_oss_dec_const_alloc(_g, sizeof(_TAI_5GS));
	    _dp_TAI_5GS(_g, _out_data->u.tAIList_5GS);
	    break;
	case 4:
	    OSS_CNTX_PUSH(_oss_c, 131)
	    _dp_Emergency_Area_ID_List(_g, &_out_data->u.emergencyAreaIDList);
	    break;
	default:
	    _out_data->choice = 0;	/* Unknown choice selector. */
	    OSS_UNKNOWN_EXT_FOUND(_g);
	    _oss_pdec_sot(_g);
	    OSS_CNTX_PUSH(_oss_c, 0)
	}
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
    OSS_CNTX_POP(_oss_c)
    return _out_data;
}

static void * _PdSBC_AP_Containers(OssGlobal * _g, int * _pdunum)
{
    void *_outbuf;
    if (*_pdunum < 1 || *_pdunum > 52)
	_oss_dec_error(_g, _pdu_range, *_pdunum);
    _outbuf = _pDecoders[*_pdunum - 1](_g);
    return _outbuf;
}

static void _pdSBC_AP_Containers(struct ossGlobal * _g, int * _pdunum, void ** _outbuf)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
    _oss_c->_oss_context_anchor._state = _decoding_data;
    _oss_c->_oss_context_anchor._pdu_number = 0;
#if OSSDEBUG > 0
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_d_pre(_g, _oss_c->_oss_inbufpos, _oss_c->_oss_inbuflen, NULL);
#else
    _oss_c->_oss_err_msg = NULL;
#endif

#if OSS_TOED_API_LEVEL < 37
    if (_g->encRules == OSS_PER_ALIGNED)
	_oss_c->_aligned = 1;
    else
	_oss_toed_error(_g, _toed_rules_not_supp_err, "UNALIGNED PER");

#endif
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
    if (!_oss_c->_oss_inbuflen && (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES))
	_oss_dec_error(_g, _more_input, 0L);
#endif
    *_outbuf = _PdSBC_AP_Containers(_g, _pdunum);

#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
    if (PER_CHECK_D(_g) && _oss_c->_bitpos && (*_oss_c->_oss_inbufpos & (0xFF >> _oss_c->_bitpos)))
	_oss_dec_error(_g,  _nonzero_pad_bits_1, 0L);
#endif
#if OSSDEBUG > 0
    _oss_c->_oss_err_msg = NULL;
    if (_oss_c->reserved.fields.ext->debug_flags)
	_oss_db_d_post(_g, 0, *_pdunum, _outbuf);
#endif
}

static void _dpo_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _out_data, int _IEsSetParam)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_seqof1 * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 57)
	count = _oss_pdec_length(_g, 0L, 65535L, &_last);
	if (count > 0) {
	    _seqof1 * _cur = (_seqof1 *)_oss_dec_const_alloc(_g, sizeof(_seqof1));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_seqof1 * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
		if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
			++_oss_c->reserved.fields.ext->seqSetNestingCounter >
			_oss_c->reserved.fields.ext->seqSetNestingLimit)
		    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
		{
		    OSS_CNTX_INIT

		    OSS_CNTX_PUSH(_oss_c, 132)
		    {
			unsigned char _field[2] = {0,0};
			_oss_get_bits(_g, _field, 16, Aligned);
			_cur->value.id = _field[0];
			_cur->value.id <<= 8;
			_cur->value.id |= _field[1];
		    }
		    OSS_CNTX_SET(31)
		    _cur->value.criticality = (enum Criticality)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
		    OSS_CNTX_SET(32)
#ifdef OSS_OPENTYPE_HAS_USERFIELD
		    _cur->value.value.userField = NULL;
#endif
		    if ((_g->decodingFlags & AUTOMATIC_ENCDEC) || !(_g->decodingFlags & NOCONSTRAIN)) {
			static unsigned short const _ref_ids0[1] = { 0 };
			static unsigned short const * const ref_id[1] = { _ref_ids0 };
			void *          ref_val[1];
			_SBC_AP_PROTOCOL_IES *	obj;

			ref_val[0] = &(_cur->value.id);
			if (_goSBC_AP_PROTOCOL_IES(_g, _IEsSetParam, 1, ref_val, (unsigned short **)ref_id, &obj)) {
			    _cur->value.value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_cur->value.value.encoded.value);
			    if (_cur->value.value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
				_oss_dec_error(_g, _zero_length_OpenType, 0);
			    _cur->value.value.pduNum = 0;
			    *(void **)&_cur->value.value.decoded = NULL;
			} else {
			    int pduNum = obj->Value;

			    if (_g->decodingFlags & AUTOMATIC_ENCDEC) {
				((_EncDecGlobals*)_g->encDecVar)->_genflags |= 1;
				_oss_pdec_push(_g);
				*(void **)&_cur->value.value.decoded = _PdSBC_AP_Containers(_g, &pduNum);
				_cur->value.value.pduNum = pduNum;
				_cur->value.value.encoded.value = NULL;
				_cur->value.value.encoded.length = 0;
				_oss_pdec_pop(_g);
			    } else {
				_cur->value.value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_cur->value.value.encoded.value);
				if (_cur->value.value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
				    _oss_dec_error(_g, _zero_length_OpenType, 0L);
				*(void **)&_cur->value.value.decoded = NULL;
				_cur->value.value.pduNum = (int)pduNum;
			    }
			}
		    } else {
			_cur->value.value.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_cur->value.value.encoded.value);
			if (_cur->value.value.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			    _oss_dec_error(_g, _zero_length_OpenType, 0L);
			_cur->value.value.pduNum = 0;
			*(void **)&_cur->value.value.decoded = NULL;
		    }
		    OSS_CNTX_POP(_oss_c)
		}
#ifndef OSS_NO_NESTING_CONTROL
		if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 0L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_seqof1 *)_oss_dec_const_alloc(_g, sizeof(_seqof1));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _epo_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	_seqof1 * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 0, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 0L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		{
		    OSS_CNTX_INIT

		    OSS_CNTX_PUSH(_oss_c, 132)
		    if (_temp->value.id <= USHRT_MAX) {
			unsigned int _encode_value = _temp->value.id;
#if OSS_TOED_API_LEVEL < 20
			unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
			_oss_penc_int16_aligned(_g, _encode_value);
#else
			_field[1] = (unsigned char)(0xFF & _encode_value);
			_encode_value >>= 8;
			_field[0] = (unsigned char)(0xFF & _encode_value);
			_oss_append(_g, _field, 16, Aligned);
#endif
		    } else {
			_oss_enc_error(_g, _valueRange_uinteger, _temp->value.id);
		    }
		    OSS_CNTX_SET(31)
		    _oss_penc_uenum(_g, _temp->value.criticality, (struct _enum_data *)&_enums[0], NULL);
		    OSS_CNTX_SET(32)
		    {
			OSSC::COssConstrainedOpenType  * otype = &_temp->value.value;

			if (otype->encoded.value && otype->encoded.length)
			    _oss_penc_unconstr_oct_l(_g, otype->encoded.value, otype->encoded.length);
			else if (otype->pduNum != 0
				&& *(void **)&otype->decoded) {
			    if (_g->encodingFlags & AUTOMATIC_ENCDEC) {
				OSS_DEF_VAR_ESE(_st)

				_oss_begin_otype_or_ext(_g, &_st);
				_PeSBC_AP_Containers(_g, otype->pduNum, *(void **)&otype->decoded);
				_oss_end_otype_or_ext(_g, &_st);
			    } else {
				_oss_enc_error(_g, _AUTOMATIC_ENCDEC_is_not_specified, 0L);
			    }
			} else
			    if (*(void **)&otype->decoded)
				_oss_enc_error(_g, _pduNum_is_not_initialized, 0L);
			    else
				_oss_enc_error(_g, _zero_length_OpenType, 0L);
		    }
		    OSS_CNTX_POP(_oss_c)
		}
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
}

static void _dpo_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _out_data, int _ExtensionSetParam)
{
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
	    ++_oss_c->reserved.fields.ext->seqSetNestingCounter >
	    _oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
    {
	_seqof2 * _head = NULL;
	unsigned long count;
	ossBoolean _last = FALSE;
	unsigned long _index = 0;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	unsigned long _prev_fragm0;
#endif

	OSS_CNTX_INIT

	OSS_CNTX_PUSH(_oss_c, 57)
	count = _oss_pdec_length(_g, 1L, 65535L, &_last);
	if (count > 0) {
	    _seqof2 * _cur = (_seqof2 *)_oss_dec_const_alloc(_g, sizeof(_seqof2));
	    _head = _cur;
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
	    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
		_prev_fragm0 = count;
	    }
#endif
	    for (;;) {
		_seqof2 * _temp = _cur;
		OSS_CNTX_SETOCC(_index + 1)
#ifndef OSS_NO_NESTING_CONTROL
		if (_oss_c->reserved.fields.ext->seqSetNestingLimit &&
			++_oss_c->reserved.fields.ext->seqSetNestingCounter >
			_oss_c->reserved.fields.ext->seqSetNestingLimit)
		    _oss_dec_error(_g, _seq_set_nesting_limit_exceeded, 0L);
#endif
		{
		    OSS_CNTX_INIT

		    OSS_CNTX_PUSH(_oss_c, 133)
		    {
			unsigned char _field[2] = {0,0};
			_oss_get_bits(_g, _field, 16, Aligned);
			_cur->value.id = _field[0];
			_cur->value.id <<= 8;
			_cur->value.id |= _field[1];
		    }
		    OSS_CNTX_SET(31)
		    _cur->value.criticality = (enum Criticality)_oss_pdec_uenum(_g, (struct _enum_data*)&_enums[0], NULL);
		    OSS_CNTX_SET(134)
#ifdef OSS_OPENTYPE_HAS_USERFIELD
		    _cur->value.extensionValue.userField = NULL;
#endif
		    if ((_g->decodingFlags & AUTOMATIC_ENCDEC) || !(_g->decodingFlags & NOCONSTRAIN)) {
			static unsigned short const _ref_ids0[1] = { 0 };
			static unsigned short const * const ref_id[1] = { _ref_ids0 };
			void *          ref_val[1];
			_SBC_AP_PROTOCOL_EXTENSION *	obj;

			ref_val[0] = &(_cur->value.id);
			if (_goSBC_AP_PROTOCOL_EXTENSION(_g, _ExtensionSetParam, 1, ref_val, (unsigned short **)ref_id, &obj)) {
			    _cur->value.extensionValue.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_cur->value.extensionValue.encoded.value);
			    if (_cur->value.extensionValue.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
				_oss_dec_error(_g, _zero_length_OpenType, 0);
			    _cur->value.extensionValue.pduNum = 0;
			    *(void **)&_cur->value.extensionValue.decoded = NULL;
			} else {
			    int pduNum = obj->Extension;

			    if (_g->decodingFlags & AUTOMATIC_ENCDEC) {
				((_EncDecGlobals*)_g->encDecVar)->_genflags |= 1;
				_oss_pdec_push(_g);
				*(void **)&_cur->value.extensionValue.decoded = _PdSBC_AP_Containers(_g, &pduNum);
				_cur->value.extensionValue.pduNum = pduNum;
				_cur->value.extensionValue.encoded.value = NULL;
				_cur->value.extensionValue.encoded.length = 0;
				_oss_pdec_pop(_g);
			    } else {
				_cur->value.extensionValue.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_cur->value.extensionValue.encoded.value);
				if (_cur->value.extensionValue.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
				    _oss_dec_error(_g, _zero_length_OpenType, 0L);
				*(void **)&_cur->value.extensionValue.decoded = NULL;
				_cur->value.extensionValue.pduNum = (int)pduNum;
			    }
			}
		    } else {
			_cur->value.extensionValue.encoded.length = _oss_pdec_unconstr_uoct_ia(_g, &_cur->value.extensionValue.encoded.value);
			if (_cur->value.extensionValue.encoded.length == 0 && ((STRICT_ENCODING_DECODING_RULES | AUTOMATIC_ENCDEC) & _g->decodingFlags))
			    _oss_dec_error(_g, _zero_length_OpenType, 0L);
			_cur->value.extensionValue.pduNum = 0;
			*(void **)&_cur->value.extensionValue.decoded = NULL;
		    }
		    OSS_CNTX_POP(_oss_c)
		}
#ifndef OSS_NO_NESTING_CONTROL
		if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
		    _oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
		if (++_index >= count) {
		    if (_last)
			break;
		    count += _oss_pdec_length(_g, 1L, 65535L, &_last);
#ifndef OSS_NO_STRICT_ENCODING_DECODING_CHECKING
		    if (_g->decodingFlags & STRICT_ENCODING_DECODING_RULES) {
			if ((!_last) && (_prev_fragm0 < 65536)) {
			    OSS_CNTX_SETOCC(_index + 1)
			    _oss_dec_error(_g, _invalid_fragmentation, 0L);
			}
			_prev_fragm0 = count - _index;
		    }
#endif
		    if (_index >= count)
			break;
		}
		_cur = (_seqof2 *)_oss_dec_const_alloc(_g, sizeof(_seqof2));
		_temp->next = _cur;
	    }
	    _cur->next = NULL;
	} else {
	    _head = NULL;
	}
	*_out_data = _head;
	OSS_CNTX_POP(_oss_c)
    }
#ifndef OSS_NO_NESTING_CONTROL
    if (_oss_c->reserved.fields.ext->seqSetNestingLimit)
	_oss_c->reserved.fields.ext->seqSetNestingCounter--;
#endif
}

static void _epo_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _in_data)
{
#if OSSDEBUG > 1
    _EncDecGlobals *_oss_c = (_EncDecGlobals *)_g->encDecVar;
#endif
    {
	_seqof2 * _temp;
	unsigned int _cnt;
	OSS_CNTX_INIT

	for (_cnt = 0, _temp = *_in_data; _temp; _temp = _temp->next)
	    ++_cnt;

	if (_cnt >= 1 && _cnt <= 65535) {
	    OSS_CNTX_PUSH(_oss_c, 57)
#if OSS_TOED_API_LEVEL >= 27
	    _oss_penc_lrang(_g, _cnt, 1, USHRT_MAX);
#else
	    _oss_penc_length_l(_g, _cnt, 1L, 65535L, 0);
#endif
	    for (_temp = *_in_data; _temp; _temp = _temp->next) {
		OSS_CNTX_INCOCC
		{
		    OSS_CNTX_INIT

		    OSS_CNTX_PUSH(_oss_c, 133)
		    if (_temp->value.id <= USHRT_MAX) {
			unsigned int _encode_value = _temp->value.id;
#if OSS_TOED_API_LEVEL < 20
			unsigned char _field[2];
#endif
#if OSS_TOED_API_LEVEL >= 20
			_oss_penc_int16_aligned(_g, _encode_value);
#else
			_field[1] = (unsigned char)(0xFF & _encode_value);
			_encode_value >>= 8;
			_field[0] = (unsigned char)(0xFF & _encode_value);
			_oss_append(_g, _field, 16, Aligned);
#endif
		    } else {
			_oss_enc_error(_g, _valueRange_uinteger, _temp->value.id);
		    }
		    OSS_CNTX_SET(31)
		    _oss_penc_uenum(_g, _temp->value.criticality, (struct _enum_data *)&_enums[0], NULL);
		    OSS_CNTX_SET(134)
		    {
			OSSC::COssConstrainedOpenType  * otype = &_temp->value.extensionValue;

			if (otype->encoded.value && otype->encoded.length)
			    _oss_penc_unconstr_oct_l(_g, otype->encoded.value, otype->encoded.length);
			else if (otype->pduNum != 0
				&& *(void **)&otype->decoded) {
			    if (_g->encodingFlags & AUTOMATIC_ENCDEC) {
				OSS_DEF_VAR_ESE(_st)

				_oss_begin_otype_or_ext(_g, &_st);
				_PeSBC_AP_Containers(_g, otype->pduNum, *(void **)&otype->decoded);
				_oss_end_otype_or_ext(_g, &_st);
			    } else {
				_oss_enc_error(_g, _AUTOMATIC_ENCDEC_is_not_specified, 0L);
			    }
			} else
			    if (*(void **)&otype->decoded)
				_oss_enc_error(_g, _pduNum_is_not_initialized, 0L);
			    else
				_oss_enc_error(_g, _zero_length_OpenType, 0L);
		    }
		    OSS_CNTX_POP(_oss_c)
		}
	    }
	} else
	    _oss_enc_error(_g, _too_long, _cnt);
	OSS_CNTX_POP(_oss_c)
    }
}

#if (OSS_TOED_API_LEVEL < 22) || !defined(OSSNOFREEPDU)
#if OSS_TOED_API_LEVEL < 32
#define _oss_dec_free(_g, v)   if (v) _oss_dec_free(_g, v)
#define _oss_free_creal(_g, v) if (v) _oss_free_creal(_g, v)
#endif
static void _f_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->pLMNidentity.value);
	_f_ENB_ID(_g, &_data_ptr->eNB_ID);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _f_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _data_ptr)
{
    if (_data_ptr) {
	switch (_data_ptr->choice) {
	case 1:
	    _f_Global_GNB_ID(_g, _data_ptr->u.global_GNB_ID);
	    _oss_dec_free(_g, _data_ptr->u.global_GNB_ID);
	    break;
	case 2:
	    if (_data_ptr->u.global_NgENB_ID) {
		    _oss_dec_free(_g, _data_ptr->u.global_NgENB_ID->pLMNidentity.value);
		_f_ENB_ID(_g, &_data_ptr->u.global_NgENB_ID->ngENB_ID);
		if (_data_ptr->u.global_NgENB_ID->bit_mask & 0x80000000) {
		    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->u.global_NgENB_ID->iE_Extensions);
		}
	    }
	    _oss_dec_free(_g, _data_ptr->u.global_NgENB_ID);
	    break;
	default:
	    /* Ignore for now */	;
	}
    }
}

static void _f_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->pLMNidentity.value);
	switch (_data_ptr->gNB_ID.choice) {
	case 1:
		_oss_dec_free(_g, _data_ptr->gNB_ID.u.gNB_ID.value);
	    break;
	default:
	    /* Ignore for now */	;
	}
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _f_ENB_ID(OssGlobal * _g, _ENB_ID * _data_ptr)
{
    if (_data_ptr) {
	switch (_data_ptr->choice) {
	case 1:
		_oss_dec_free(_g, _data_ptr->u.macroENB_ID.value);
	    break;
	case 2:
		_oss_dec_free(_g, _data_ptr->u.homeENB_ID.value);
	    break;
	case 3:
		_oss_dec_free(_g, _data_ptr->u.short_macroENB_ID.value);
	    break;
	case 4:
		_oss_dec_free(_g, _data_ptr->u.long_macroENB_ID.value);
	    break;
	default:
	    /* Ignore for now */	;
	}
    }
}

static void _f_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->pLMNidentity.value);
	    _oss_dec_free(_g, _data_ptr->cell_ID.value);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _f_NR_CGI(OssGlobal * _g, _NR_CGI * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->pLMNidentity.value);
	    _oss_dec_free(_g, _data_ptr->nRCellIdentity.value);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _f_ECGIList(OssGlobal * _g, _ECGIList ** _data_ptr)
{
    if (_data_ptr) {
	if (*_data_ptr) {
	    _ECGIList * _tempa = *_data_ptr;
	    _ECGIList * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_EUTRAN_CGI(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
}

static void _f_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _data_ptr)
{
    if (_data_ptr) {
	if (*_data_ptr) {
	    _Emergency_Area_ID_List * _tempa = *_data_ptr;
	    _Emergency_Area_ID_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		    _oss_dec_free(_g, _tempa->value.value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
}

static void _f_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->emergencyAreaID.value);
	if (_data_ptr->scheduledCellinEAI) {
	    _CellId_Broadcast_List * _tempa = _data_ptr->scheduledCellinEAI;
	    _CellId_Broadcast_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_EUTRAN_CGI(_g, &_tempa->value.eCGI);
		if (_tempa->value.bit_mask & 0x80000000) {
		    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		}
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _f_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _data_ptr)
{
    if (_data_ptr) {
	if (*_data_ptr) {
	    _EmergencyAreaID_Broadcast_List * _tempa = *_data_ptr;
	    _EmergencyAreaID_Broadcast_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_13EmergencyAreaID_Broadcast_(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
}

static void _f_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->emergencyAreaID.value);
	if (_data_ptr->cancelledCellinEAI) {
	    _CellID_Cancelled_List * _tempa = _data_ptr->cancelledCellinEAI;
	    _CellID_Cancelled_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_EUTRAN_CGI(_g, &_tempa->value.eCGI);
		if (_tempa->value.bit_mask & 0x80000000) {
		    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		}
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _f_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _data_ptr)
{
    if (_data_ptr) {
	if (*_data_ptr) {
	    _EmergencyAreaID_Cancelled_List * _tempa = *_data_ptr;
	    _EmergencyAreaID_Cancelled_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_15EmergencyAreaID_Cancelled_(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
}

static void _f_TAI(OssGlobal * _g, _TAI * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->pLMNidentity.value);
	    _oss_dec_free(_g, _data_ptr->tAC.value);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _f__seq43(OssGlobal * _g, _seq43 * _data_ptr)
{
    if (_data_ptr) {
	_f_TAI(_g, &_data_ptr->tai);
    }
}

static void _f_TAI_5GS(OssGlobal * _g, _TAI_5GS * _data_ptr)
{
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->pLMNidentity.value);
	    _oss_dec_free(_g, _data_ptr->tAC_5GS.value);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
}

static void _fSBC_AP_PDU(OssGlobal * _g, void * _data)
{
    _SBC_AP_PDU	*_data_ptr;
    _data_ptr = (_SBC_AP_PDU *)_data;
    if (_data_ptr) {
	switch (_data_ptr->choice) {
	case 1:
	    if (_data_ptr->u.initiatingMessage) {
		if (_data_ptr->u.initiatingMessage->value.encoded.value)
		    _oss_dec_free(_g, _data_ptr->u.initiatingMessage->value.encoded.value);
		if (_data_ptr->u.initiatingMessage->value.pduNum != 0 && *(void **)&_data_ptr->u.initiatingMessage->value.decoded)
		    _fmSBC_AP_Containers(_g, _data_ptr->u.initiatingMessage->value.pduNum, *(void **)&_data_ptr->u.initiatingMessage->value.decoded);
	    }
	    _oss_dec_free(_g, _data_ptr->u.initiatingMessage);
	    break;
	case 2:
	    if (_data_ptr->u.successfulOutcome) {
		if (_data_ptr->u.successfulOutcome->value.encoded.value)
		    _oss_dec_free(_g, _data_ptr->u.successfulOutcome->value.encoded.value);
		if (_data_ptr->u.successfulOutcome->value.pduNum != 0 && *(void **)&_data_ptr->u.successfulOutcome->value.decoded)
		    _fmSBC_AP_Containers(_g, _data_ptr->u.successfulOutcome->value.pduNum, *(void **)&_data_ptr->u.successfulOutcome->value.decoded);
	    }
	    _oss_dec_free(_g, _data_ptr->u.successfulOutcome);
	    break;
	case 3:
	    if (_data_ptr->u.unsuccessfulOutcome) {
		if (_data_ptr->u.unsuccessfulOutcome->value.encoded.value)
		    _oss_dec_free(_g, _data_ptr->u.unsuccessfulOutcome->value.encoded.value);
		if (_data_ptr->u.unsuccessfulOutcome->value.pduNum != 0 && *(void **)&_data_ptr->u.unsuccessfulOutcome->value.decoded)
		    _fmSBC_AP_Containers(_g, _data_ptr->u.unsuccessfulOutcome->value.pduNum, *(void **)&_data_ptr->u.unsuccessfulOutcome->value.decoded);
	    }
	    _oss_dec_free(_g, _data_ptr->u.unsuccessfulOutcome);
	    break;
	default:
	    /* Ignore for now */	;
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f0Write_Replace_Warning_Reque(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Request	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Request *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f1Write_Replace_Warning_Respo(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Response	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Response *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fStop_Warning_Request(OssGlobal * _g, void * _data)
{
    _Stop_Warning_Request	*_data_ptr;
    _data_ptr = (_Stop_Warning_Request *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fStop_Warning_Response(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Response	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Response *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f2Write_Replace_Warning_Indic(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Indication	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Indication *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fStop_Warning_Indication(OssGlobal * _g, void * _data)
{
    _Stop_Warning_Indication	*_data_ptr;
    _data_ptr = (_Stop_Warning_Indication *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fPWS_Restart_Indication(OssGlobal * _g, void * _data)
{
    _PWS_Restart_Indication	*_data_ptr;
    _data_ptr = (_PWS_Restart_Indication *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fPWS_Failure_Indication(OssGlobal * _g, void * _data)
{
    _PWS_Failure_Indication	*_data_ptr;
    _data_ptr = (_PWS_Failure_Indication *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fError_Indication(OssGlobal * _g, void * _data)
{
    _Error_Indication	*_data_ptr;
    _data_ptr = (_Error_Indication *)_data;
    if (_data_ptr) {
	_fo_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f3Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Scheduled_Area_List	*_data_ptr;
    _data_ptr = (_Broadcast_Scheduled_Area_List *)_data;
    if (_data_ptr) {
	if (_data_ptr->bit_mask & 0x80000000) {
	    if (_data_ptr->cellId_Broadcast_List) {
		_CellId_Broadcast_List * _tempa = _data_ptr->cellId_Broadcast_List;
		_CellId_Broadcast_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_EUTRAN_CGI(_g, &_tempa->value.eCGI);
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_data_ptr->tAI_Broadcast_List) {
		_TAI_Broadcast_List * _tempa = _data_ptr->tAI_Broadcast_List;
		_TAI_Broadcast_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_TAI(_g, &_tempa->value.tAI);
		    if (_tempa->value.scheduledCellinTAI) {
			_CellId_Broadcast_List * _temp1a = _tempa->value.scheduledCellinTAI;
			_CellId_Broadcast_List * _temp1b;
			while (_temp1a) {
			    _temp1b = _temp1a->next;
			    _f_EUTRAN_CGI(_g, &_temp1a->value.eCGI);
			    if (_temp1a->value.bit_mask & 0x80000000) {
				_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
			    }
			    _oss_dec_free(_g, _temp1a);
			    _temp1a = _temp1b;
			}
		    }
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    _f_14EmergencyAreaID_Broadcast_(_g, &_data_ptr->emergencyAreaID_Broadcast_List);
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f4Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Scheduled_Area_List_5GS	*_data_ptr;
    _data_ptr = (_Broadcast_Scheduled_Area_List_5GS *)_data;
    if (_data_ptr) {
	if (_data_ptr->bit_mask & 0x80000000) {
	    if (_data_ptr->cellId_Broadcast_List_5GS) {
		_CellId_Broadcast_List_5GS * _tempa = _data_ptr->cellId_Broadcast_List_5GS;
		_CellId_Broadcast_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_NR_CGI(_g, &_tempa->value.nR_CGI);
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_data_ptr->tAI_Broadcast_List_5GS) {
		_TAI_Broadcast_List_5GS * _tempa = _data_ptr->tAI_Broadcast_List_5GS;
		_TAI_Broadcast_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_TAI_5GS(_g, &_tempa->value.tAI_5GS);
		    if (_tempa->value.scheduledCellinTAI_5GS) {
			_CellId_Broadcast_List_5GS * _temp1a = _tempa->value.scheduledCellinTAI_5GS;
			_CellId_Broadcast_List_5GS * _temp1b;
			while (_temp1a) {
			    _temp1b = _temp1a->next;
			    _f_NR_CGI(_g, &_temp1a->value.nR_CGI);
			    if (_temp1a->value.bit_mask & 0x80000000) {
				_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
			    }
			    _oss_dec_free(_g, _temp1a);
			    _temp1a = _temp1b;
			}
		    }
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    _f_14EmergencyAreaID_Broadcast_(_g, &_data_ptr->emergencyAreaID_Broadcast_List);
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f5Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Cancelled_Area_List	*_data_ptr;
    _data_ptr = (_Broadcast_Cancelled_Area_List *)_data;
    if (_data_ptr) {
	if (_data_ptr->bit_mask & 0x80000000) {
	    if (_data_ptr->cellID_Cancelled_List) {
		_CellID_Cancelled_List * _tempa = _data_ptr->cellID_Cancelled_List;
		_CellID_Cancelled_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_EUTRAN_CGI(_g, &_tempa->value.eCGI);
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_data_ptr->tAI_Cancelled_List) {
		_TAI_Cancelled_List * _tempa = _data_ptr->tAI_Cancelled_List;
		_TAI_Cancelled_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_TAI(_g, &_tempa->value.tAI);
		    if (_tempa->value.cancelledCellinTAI) {
			_CellID_Cancelled_List * _temp1a = _tempa->value.cancelledCellinTAI;
			_CellID_Cancelled_List * _temp1b;
			while (_temp1a) {
			    _temp1b = _temp1a->next;
			    _f_EUTRAN_CGI(_g, &_temp1a->value.eCGI);
			    if (_temp1a->value.bit_mask & 0x80000000) {
				_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
			    }
			    _oss_dec_free(_g, _temp1a);
			    _temp1a = _temp1b;
			}
		    }
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    _f_16EmergencyAreaID_Cancelled_(_g, &_data_ptr->emergencyAreaID_Cancelled_List);
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f6Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Cancelled_Area_List_5GS	*_data_ptr;
    _data_ptr = (_Broadcast_Cancelled_Area_List_5GS *)_data;
    if (_data_ptr) {
	if (_data_ptr->bit_mask & 0x80000000) {
	    if (_data_ptr->cellID_Cancelled_List_5GS) {
		_CellID_Cancelled_List_5GS * _tempa = _data_ptr->cellID_Cancelled_List_5GS;
		_CellID_Cancelled_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_NR_CGI(_g, &_tempa->value.nR_CGI);
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_data_ptr->tAI_Cancelled_List_5GS) {
		_TAI_Cancelled_List_5GS * _tempa = _data_ptr->tAI_Cancelled_List_5GS;
		_TAI_Cancelled_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_TAI_5GS(_g, &_tempa->value.tAI_5GS);
		    if (_tempa->value.cancelledCellinTAI_5GS) {
			_CellID_Cancelled_List_5GS * _temp1a = _tempa->value.cancelledCellinTAI_5GS;
			_CellID_Cancelled_List_5GS * _temp1b;
			while (_temp1a) {
			    _temp1b = _temp1a->next;
			    _f_NR_CGI(_g, &_temp1a->value.nR_CGI);
			    if (_temp1a->value.bit_mask & 0x80000000) {
				_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
			    }
			    _oss_dec_free(_g, _temp1a);
			    _temp1a = _temp1b;
			}
		    }
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    _f_16EmergencyAreaID_Cancelled_(_g, &_data_ptr->emergencyAreaID_Cancelled_List);
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fBroadcast_Empty_Area_List(OssGlobal * _g, void * _data)
{
    _Broadcast_Empty_Area_List	**_data_ptr;
    _data_ptr = (_Broadcast_Empty_Area_List **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _Broadcast_Empty_Area_List * _tempa = *_data_ptr;
	    _Broadcast_Empty_Area_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_Global_ENB_ID(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f7Broadcast_Empty_Area_List_5(OssGlobal * _g, void * _data)
{
    _Broadcast_Empty_Area_List_5GS	**_data_ptr;
    _data_ptr = (_Broadcast_Empty_Area_List_5GS **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _Broadcast_Empty_Area_List_5GS * _tempa = *_data_ptr;
	    _Broadcast_Empty_Area_List_5GS * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_Global_RAN_Node_ID(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fCause(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _f8Concurrent_Warning_Message_(OssGlobal * _g, void * _data)
{
    enum Concurrent_Warning_Message_Indicator	*_data_ptr;
    _data_ptr = (enum Concurrent_Warning_Message_Indicator *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fCriticality_Diagnostics(OssGlobal * _g, void * _data)
{
    _Criticality_Diagnostics	*_data_ptr;
    _data_ptr = (_Criticality_Diagnostics *)_data;
    if (_data_ptr) {
	if (_data_ptr->bit_mask & 0x10000000) {
	    if (_data_ptr->iE_CriticalityDiagnostics) {
		_CriticalityDiagnostics_IE_List * _tempa = _data_ptr->iE_CriticalityDiagnostics;
		_CriticalityDiagnostics_IE_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    if (_tempa->value.bit_mask & 0x80000000) {
			_fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	}
	if (_data_ptr->bit_mask & 0x8000000) {
	    _fo_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fData_Coding_Scheme(OssGlobal * _g, void * _data)
{
    OSSC::COssBitString	*_data_ptr;
    _data_ptr = (OSSC::COssBitString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fExtended_Repetition_Period(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fFailed_Cell_List(OssGlobal * _g, void * _data)
{
    _ECGIList	**_data_ptr;
    _data_ptr = (_ECGIList **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _ECGIList * _tempa = *_data_ptr;
	    _ECGIList * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_EUTRAN_CGI(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fFailed_Cell_List_NR(OssGlobal * _g, void * _data)
{
    _NR_CGIList	**_data_ptr;
    _data_ptr = (_NR_CGIList **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _NR_CGIList * _tempa = *_data_ptr;
	    _NR_CGIList * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_NR_CGI(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fGlobal_ENB_ID(OssGlobal * _g, void * _data)
{
    _Global_ENB_ID	*_data_ptr;
    _data_ptr = (_Global_ENB_ID *)_data;
    _f_Global_ENB_ID(_g, _data_ptr);
    _oss_dec_free(_g, _data_ptr);
}

static void _fGlobal_RAN_Node_ID(OssGlobal * _g, void * _data)
{
    _Global_RAN_Node_ID	*_data_ptr;
    _data_ptr = (_Global_RAN_Node_ID *)_data;
    _f_Global_RAN_Node_ID(_g, _data_ptr);
    _oss_dec_free(_g, _data_ptr);
}

static void _fGlobal_GNB_ID(OssGlobal * _g, void * _data)
{
    _Global_GNB_ID	*_data_ptr;
    _data_ptr = (_Global_GNB_ID *)_data;
    _f_Global_GNB_ID(_g, _data_ptr);
    _oss_dec_free(_g, _data_ptr);
}

static void _fList_of_TAIs(OssGlobal * _g, void * _data)
{
    _List_of_TAIs	**_data_ptr;
    _data_ptr = (_List_of_TAIs **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _List_of_TAIs * _tempa = *_data_ptr;
	    _List_of_TAIs * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f__seq43(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fList_of_TAIs_Restart(OssGlobal * _g, void * _data)
{
    _List_of_TAIs	**_data_ptr;
    _data_ptr = (_List_of_TAIs **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _List_of_TAIs * _tempa = *_data_ptr;
	    _List_of_TAIs * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f__seq43(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fList_of_EAIs_Restart(OssGlobal * _g, void * _data)
{
    _Emergency_Area_ID_List	**_data_ptr;
    _data_ptr = (_Emergency_Area_ID_List **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _Emergency_Area_ID_List * _tempa = *_data_ptr;
	    _Emergency_Area_ID_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		    _oss_dec_free(_g, _tempa->value.value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fList_of_5GS_TAIs(OssGlobal * _g, void * _data)
{
    _List_of_5GS_TAIs	**_data_ptr;
    _data_ptr = (_List_of_5GS_TAIs **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _List_of_5GS_TAIs * _tempa = *_data_ptr;
	    _List_of_5GS_TAIs * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_TAI_5GS(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f9List_of_5GS_Cells_for_Failu(OssGlobal * _g, void * _data)
{
    _NR_CGIList	**_data_ptr;
    _data_ptr = (_NR_CGIList **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _NR_CGIList * _tempa = *_data_ptr;
	    _NR_CGIList * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_NR_CGI(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fList_of_5GS_TAI_for_Restart(OssGlobal * _g, void * _data)
{
    _List_of_5GS_TAIs	**_data_ptr;
    _data_ptr = (_List_of_5GS_TAIs **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _List_of_5GS_TAIs * _tempa = *_data_ptr;
	    _List_of_5GS_TAIs * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_TAI_5GS(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fMessage_Identifier(OssGlobal * _g, void * _data)
{
    OSSC::COssBitString	*_data_ptr;
    _data_ptr = (OSSC::COssBitString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f10Number_of_Broadcasts_Reque(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fNgENB_ID(OssGlobal * _g, void * _data)
{
    _NgENB_ID	*_data_ptr;
    _data_ptr = (_NgENB_ID *)_data;
    if (_data_ptr) {
	switch (_data_ptr->choice) {
	case 1:
		_oss_dec_free(_g, _data_ptr->u.macroNgENB_ID.value);
	    break;
	case 2:
		_oss_dec_free(_g, _data_ptr->u.shortMacroNgENB_ID.value);
	    break;
	case 3:
		_oss_dec_free(_g, _data_ptr->u.longMacroNgENB_ID.value);
	    break;
	default:
	    /* Ignore for now */	;
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fOmc_Id(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fRepetition_Period(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fRestarted_Cell_List(OssGlobal * _g, void * _data)
{
    _ECGIList	**_data_ptr;
    _data_ptr = (_ECGIList **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _ECGIList * _tempa = *_data_ptr;
	    _ECGIList * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_EUTRAN_CGI(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fRAT_Selector_5GS(OssGlobal * _g, void * _data)
{
    enum RAT_Selector_5GS	*_data_ptr;
    _data_ptr = (enum RAT_Selector_5GS *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fRestarted_Cell_List_NR(OssGlobal * _g, void * _data)
{
    _NR_CGIList	**_data_ptr;
    _data_ptr = (_NR_CGIList **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _NR_CGIList * _tempa = *_data_ptr;
	    _NR_CGIList * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_NR_CGI(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f11Send_Write_Replace_Warning(OssGlobal * _g, void * _data)
{
    enum Send_Write_Replace_Warning_Indication	*_data_ptr;
    _data_ptr = (enum Send_Write_Replace_Warning_Indication *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fSend_Stop_Warning_Indication(OssGlobal * _g, void * _data)
{
    enum Send_Stop_Warning_Indication	*_data_ptr;
    _data_ptr = (enum Send_Stop_Warning_Indication *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fSerial_Number(OssGlobal * _g, void * _data)
{
    OSSC::COssBitString	*_data_ptr;
    _data_ptr = (OSSC::COssBitString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fStop_All_Indicator(OssGlobal * _g, void * _data)
{
    enum Stop_All_Indicator	*_data_ptr;
    _data_ptr = (enum Stop_All_Indicator *)_data;
    _oss_dec_free(_g, _data_ptr);
}

static void _fUnknown_Tracking_Area_List(OssGlobal * _g, void * _data)
{
    _TAI_List_for_Warning	**_data_ptr;
    _data_ptr = (_TAI_List_for_Warning **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _TAI_List_for_Warning * _tempa = *_data_ptr;
	    _TAI_List_for_Warning * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_TAI(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _f12Unknown_5GS_Tracking_Area_(OssGlobal * _g, void * _data)
{
    _List_of_5GS_TAIs	**_data_ptr;
    _data_ptr = (_List_of_5GS_TAIs **)_data;
    if (_data_ptr) {
	if (*_data_ptr) {
	    _List_of_5GS_TAIs * _tempa = *_data_ptr;
	    _List_of_5GS_TAIs * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_f_TAI_5GS(_g, &_tempa->value);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fWarning_Area_List(OssGlobal * _g, void * _data)
{
    _Warning_Area_List	*_data_ptr;
    _data_ptr = (_Warning_Area_List *)_data;
    if (_data_ptr) {
	switch (_data_ptr->choice) {
	case 1:
	    _f_ECGIList(_g, &_data_ptr->u.cell_ID_List);
	    break;
	case 2:
	    if (_data_ptr->u.tracking_Area_List_for_Warning) {
		_TAI_List_for_Warning * _tempa = _data_ptr->u.tracking_Area_List_for_Warning;
		_TAI_List_for_Warning * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_TAI(_g, &_tempa->value);
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	    break;
	case 3:
	    _f_Emergency_Area_ID_List(_g, &_data_ptr->u.emergency_Area_ID_List);
	    break;
	default:
	    /* Ignore for now */	;
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fWarning_Message_Content(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fWarning_Area_Coordinates(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fWarning_Security_Information(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fWarning_Type(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    if (_data_ptr) {
	    _oss_dec_free(_g, _data_ptr->value);
    }
    _oss_dec_free(_g, _data_ptr);
}

static void _fWarning_Area_List_5GS(OssGlobal * _g, void * _data)
{
    _Warning_Area_List_5GS	*_data_ptr;
    _data_ptr = (_Warning_Area_List_5GS *)_data;
    if (_data_ptr) {
	switch (_data_ptr->choice) {
	case 1:
	    _f_ECGIList(_g, &_data_ptr->u.cell_ID_List);
	    break;
	case 2:
	    if (_data_ptr->u.nR_CGIList) {
		_NR_CGIList * _tempa = _data_ptr->u.nR_CGIList;
		_NR_CGIList * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    _f_NR_CGI(_g, &_tempa->value);
		    _oss_dec_free(_g, _tempa);
		    _tempa = _tempb;
		}
	    }
	    break;
	case 3:
	    _f_TAI_5GS(_g, _data_ptr->u.tAIList_5GS);
	    _oss_dec_free(_g, _data_ptr->u.tAIList_5GS);
	    break;
	case 4:
	    _f_Emergency_Area_ID_List(_g, &_data_ptr->u.emergencyAreaIDList);
	    break;
	default:
	    /* Ignore for now */	;
	}
    }
    _oss_dec_free(_g, _data_ptr);
}

static int _fmSBC_AP_Containers(struct ossGlobal * _g, int _pdunum, void * _data)
{
    if (_pdunum < 1 || _pdunum > 52)
	return PDU_RANGE;
    else
	_FreePDU[_pdunum - 1](_g, _data);

    return PDU_FREED;
}

static void _fo_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _data_ptr)
{
    if (_data_ptr) {
	if (*_data_ptr) {
	    _seqof1 * _tempa = *_data_ptr;
	    _seqof1 * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		if (_tempa->value.value.encoded.value)
		    _oss_dec_free(_g, _tempa->value.value.encoded.value);
		if (_tempa->value.value.pduNum != 0 && *(void **)&_tempa->value.value.decoded)
		    _fmSBC_AP_Containers(_g, _tempa->value.value.pduNum, *(void **)&_tempa->value.value.decoded);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
}

static void _fo_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _data_ptr)
{
    if (_data_ptr) {
	if (*_data_ptr) {
	    _seqof2 * _tempa = *_data_ptr;
	    _seqof2 * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		if (_tempa->value.extensionValue.encoded.value)
		    _oss_dec_free(_g, _tempa->value.extensionValue.encoded.value);
		if (_tempa->value.extensionValue.pduNum != 0 && *(void **)&_tempa->value.extensionValue.decoded)
		    _fmSBC_AP_Containers(_g, _tempa->value.extensionValue.pduNum, *(void **)&_tempa->value.extensionValue.decoded);
		_oss_dec_free(_g, _tempa);
		_tempa = _tempb;
	    }
	}
    }
}

#endif
#ifdef OSSPRINT
static void _p_Global_ENB_ID(OssGlobal * _g, _Global_ENB_ID * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "pLMNidentity ");
	_oss_prt_oct(_g, _data_ptr->pLMNidentity.value, _data_ptr->pLMNidentity.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "eNB-ID ");
	_p_ENB_ID(_g, &_data_ptr->eNB_ID);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p_Global_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID * _data_ptr)
{
    switch (_data_ptr->choice) {
    case 1:
	ossPrint(_g, "global-GNB-ID : ");
#ifndef OSS_DO_NOT_CHECK_POINTERS
	if (_data_ptr->u.global_GNB_ID == NULL)
#if OSS_TOED_API_LEVEL >= 41
	    _oss_prt_null_ptr(_g);
#else
	    ossPrint(_g, "<<<<<<NULL>>>>>>");
#endif
	else
#endif
	    _p_Global_GNB_ID(_g, _data_ptr->u.global_GNB_ID);
	break;
    case 2:
	ossPrint(_g, "global-NgENB-ID : ");
#ifndef OSS_DO_NOT_CHECK_POINTERS
	if (_data_ptr->u.global_NgENB_ID == NULL)
#if OSS_TOED_API_LEVEL >= 41
	    _oss_prt_null_ptr(_g);
#else
	    ossPrint(_g, "<<<<<<NULL>>>>>>");
#endif
	else
#endif
	    {
		_oss_indent(_g, 1);
		ossPrint(_g, "{");
		_oss_indent(_g, 0);
		ossPrint(_g, "pLMNidentity ");
		_oss_prt_oct(_g, _data_ptr->u.global_NgENB_ID->pLMNidentity.value, _data_ptr->u.global_NgENB_ID->pLMNidentity.length);
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "ngENB-ID ");
		_p_ENB_ID(_g, &_data_ptr->u.global_NgENB_ID->ngENB_ID);
		if (_data_ptr->u.global_NgENB_ID->bit_mask & 0x80000000) {
		    ossPrint(_g, ",");
		    _oss_indent(_g, 0);
		    ossPrint(_g, "iE-Extensions ");
		    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->u.global_NgENB_ID->iE_Extensions);
		}
		_oss_indent(_g, -1);
		ossPrint(_g, "}");
	    }
	break;
    default:
#if OSS_TOED_API_LEVEL >= 41
	_oss_prt_bad_alt(_g, _data_ptr->choice);
#else
	ossPrint(_g, "<unknown choice>");
#endif
    }

}

static void _p_Global_GNB_ID(OssGlobal * _g, _Global_GNB_ID * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "pLMNidentity ");
	_oss_prt_oct(_g, _data_ptr->pLMNidentity.value, _data_ptr->pLMNidentity.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "gNB-ID ");
	switch (_data_ptr->gNB_ID.choice) {
	case 1:
	    ossPrint(_g, "gNB-ID : ");
	    _oss_prt_bit(_g, _data_ptr->gNB_ID.u.gNB_ID.value, _data_ptr->gNB_ID.u.gNB_ID.length);
	    break;
	default:
#if OSS_TOED_API_LEVEL >= 41
	    _oss_prt_bad_alt(_g, _data_ptr->gNB_ID.choice);
#else
	    ossPrint(_g, "<unknown choice>");
#endif
	}
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p_ENB_ID(OssGlobal * _g, _ENB_ID * _data_ptr)
{
    switch (_data_ptr->choice) {
    case 1:
	ossPrint(_g, "macroENB-ID : ");
	_oss_prt_bit(_g, _data_ptr->u.macroENB_ID.value, _data_ptr->u.macroENB_ID.length);
	break;
    case 2:
	ossPrint(_g, "homeENB-ID : ");
	_oss_prt_bit(_g, _data_ptr->u.homeENB_ID.value, _data_ptr->u.homeENB_ID.length);
	break;
    case 3:
	ossPrint(_g, "short-macroENB-ID : ");
	_oss_prt_bit(_g, _data_ptr->u.short_macroENB_ID.value, _data_ptr->u.short_macroENB_ID.length);
	break;
    case 4:
	ossPrint(_g, "long-macroENB-ID : ");
	_oss_prt_bit(_g, _data_ptr->u.long_macroENB_ID.value, _data_ptr->u.long_macroENB_ID.length);
	break;
    default:
#if OSS_TOED_API_LEVEL >= 41
	_oss_prt_bad_alt(_g, _data_ptr->choice);
#else
	ossPrint(_g, "<unknown choice>");
#endif
    }

}

static void _p_EUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "pLMNidentity ");
	_oss_prt_oct(_g, _data_ptr->pLMNidentity.value, _data_ptr->pLMNidentity.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "cell-ID ");
	_oss_prt_bit(_g, _data_ptr->cell_ID.value, _data_ptr->cell_ID.length);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p_NR_CGI(OssGlobal * _g, _NR_CGI * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "pLMNidentity ");
	_oss_prt_oct(_g, _data_ptr->pLMNidentity.value, _data_ptr->pLMNidentity.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "nRCellIdentity ");
	_oss_prt_bit(_g, _data_ptr->nRCellIdentity.value, _data_ptr->nRCellIdentity.length);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p_ECGIList(OssGlobal * _g, _ECGIList ** _data_ptr)
{
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_ECGIList * _tempa = *_data_ptr;
	_ECGIList * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_EUTRAN_CGI(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

}

static void _p_Emergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List ** _data_ptr)
{
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_Emergency_Area_ID_List * _tempa = *_data_ptr;
	_Emergency_Area_ID_List * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _oss_indent(_g, 0);
	    _oss_prt_oct(_g, _tempa->value.value, _tempa->value.length);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

}

static void _p_13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "emergencyAreaID ");
	_oss_prt_oct(_g, _data_ptr->emergencyAreaID.value, _data_ptr->emergencyAreaID.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "scheduledCellinEAI ");
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->scheduledCellinEAI) {
	    _CellId_Broadcast_List * _tempa = _data_ptr->scheduledCellinEAI;
	    _CellId_Broadcast_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		{
		    _oss_indent(_g, 1);
		    ossPrint(_g, "{");
		    _oss_indent(_g, 0);
		    ossPrint(_g, "eCGI ");
		    _p_EUTRAN_CGI(_g, &_tempa->value.eCGI);
		    if (_tempa->value.bit_mask & 0x80000000) {
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "iE-Extensions ");
			_po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_indent(_g, -1);
		    ossPrint(_g, "}");
		}
		_tempa = _tempb;
		if (_tempa)
		    ossPrint(_g, ",");
	    }
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p_14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List ** _data_ptr)
{
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_EmergencyAreaID_Broadcast_List * _tempa = *_data_ptr;
	_EmergencyAreaID_Broadcast_List * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_13EmergencyAreaID_Broadcast_(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

}

static void _p_15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "emergencyAreaID ");
	_oss_prt_oct(_g, _data_ptr->emergencyAreaID.value, _data_ptr->emergencyAreaID.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "cancelledCellinEAI ");
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->cancelledCellinEAI) {
	    _CellID_Cancelled_List * _tempa = _data_ptr->cancelledCellinEAI;
	    _CellID_Cancelled_List * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		{
		    _oss_indent(_g, 1);
		    ossPrint(_g, "{");
		    _oss_indent(_g, 0);
		    ossPrint(_g, "eCGI ");
		    _p_EUTRAN_CGI(_g, &_tempa->value.eCGI);
		    ossPrint(_g, ",");
		    _oss_indent(_g, 0);
		    ossPrint(_g, "numberOfBroadcasts ");
		    {
			ULONG_LONG value = _tempa->value.numberOfBroadcasts;
			ossPrint(_g, ULLONG_FMT, value);
		    }
		    if (_tempa->value.bit_mask & 0x80000000) {
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "iE-Extensions ");
			_po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
		    }
		    _oss_indent(_g, -1);
		    ossPrint(_g, "}");
		}
		_tempa = _tempb;
		if (_tempa)
		    ossPrint(_g, ",");
	    }
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p_16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List ** _data_ptr)
{
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_EmergencyAreaID_Cancelled_List * _tempa = *_data_ptr;
	_EmergencyAreaID_Cancelled_List * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_15EmergencyAreaID_Cancelled_(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

}

static void _p_TAI(OssGlobal * _g, _TAI * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "pLMNidentity ");
	_oss_prt_oct(_g, _data_ptr->pLMNidentity.value, _data_ptr->pLMNidentity.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "tAC ");
	_oss_prt_oct(_g, _data_ptr->tAC.value, _data_ptr->tAC.length);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p__seq43(OssGlobal * _g, _seq43 * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "tai ");
	_p_TAI(_g, &_data_ptr->tai);
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static void _p_TAI_5GS(OssGlobal * _g, _TAI_5GS * _data_ptr)
{
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "pLMNidentity ");
	_oss_prt_oct(_g, _data_ptr->pLMNidentity.value, _data_ptr->pLMNidentity.length);
	ossPrint(_g, ",");
	_oss_indent(_g, 0);
	ossPrint(_g, "tAC-5GS ");
	_oss_prt_oct(_g, _data_ptr->tAC_5GS.value, _data_ptr->tAC_5GS.length);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

}

static int _pSBC_AP_PDU(OssGlobal * _g, void * _data)
{
    _SBC_AP_PDU	*_data_ptr;
    _data_ptr = (_SBC_AP_PDU *)_data;
    switch (_data_ptr->choice) {
    case 1:
	ossPrint(_g, "initiatingMessage : ");
#ifndef OSS_DO_NOT_CHECK_POINTERS
	if (_data_ptr->u.initiatingMessage == NULL)
#if OSS_TOED_API_LEVEL >= 41
	    _oss_prt_null_ptr(_g);
#else
	    ossPrint(_g, "<<<<<<NULL>>>>>>");
#endif
	else
#endif
	    {
		_oss_indent(_g, 1);
		ossPrint(_g, "{");
		_oss_indent(_g, 0);
		ossPrint(_g, "procedureCode ");
		{
		    ULONG_LONG value = _data_ptr->u.initiatingMessage->procedureCode;
		    ossPrint(_g, ULLONG_FMT, value);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "criticality ");
		{
		    ULONG_LONG value = _data_ptr->u.initiatingMessage->criticality;
		    _oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "value ");
		_oss_prt_new_opentype(_g, _data_ptr->u.initiatingMessage->value.pduNum, *(void **)&_data_ptr->u.initiatingMessage->value.decoded, &_data_ptr->u.initiatingMessage->value.encoded);
		_oss_indent(_g, -1);
		ossPrint(_g, "}");
	    }
	break;
    case 2:
	ossPrint(_g, "successfulOutcome : ");
#ifndef OSS_DO_NOT_CHECK_POINTERS
	if (_data_ptr->u.successfulOutcome == NULL)
#if OSS_TOED_API_LEVEL >= 41
	    _oss_prt_null_ptr(_g);
#else
	    ossPrint(_g, "<<<<<<NULL>>>>>>");
#endif
	else
#endif
	    {
		_oss_indent(_g, 1);
		ossPrint(_g, "{");
		_oss_indent(_g, 0);
		ossPrint(_g, "procedureCode ");
		{
		    ULONG_LONG value = _data_ptr->u.successfulOutcome->procedureCode;
		    ossPrint(_g, ULLONG_FMT, value);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "criticality ");
		{
		    ULONG_LONG value = _data_ptr->u.successfulOutcome->criticality;
		    _oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "value ");
		_oss_prt_new_opentype(_g, _data_ptr->u.successfulOutcome->value.pduNum, *(void **)&_data_ptr->u.successfulOutcome->value.decoded, &_data_ptr->u.successfulOutcome->value.encoded);
		_oss_indent(_g, -1);
		ossPrint(_g, "}");
	    }
	break;
    case 3:
	ossPrint(_g, "unsuccessfulOutcome : ");
#ifndef OSS_DO_NOT_CHECK_POINTERS
	if (_data_ptr->u.unsuccessfulOutcome == NULL)
#if OSS_TOED_API_LEVEL >= 41
	    _oss_prt_null_ptr(_g);
#else
	    ossPrint(_g, "<<<<<<NULL>>>>>>");
#endif
	else
#endif
	    {
		_oss_indent(_g, 1);
		ossPrint(_g, "{");
		_oss_indent(_g, 0);
		ossPrint(_g, "procedureCode ");
		{
		    ULONG_LONG value = _data_ptr->u.unsuccessfulOutcome->procedureCode;
		    ossPrint(_g, ULLONG_FMT, value);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "criticality ");
		{
		    ULONG_LONG value = _data_ptr->u.unsuccessfulOutcome->criticality;
		    _oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "value ");
		_oss_prt_new_opentype(_g, _data_ptr->u.unsuccessfulOutcome->value.pduNum, *(void **)&_data_ptr->u.unsuccessfulOutcome->value.decoded, &_data_ptr->u.unsuccessfulOutcome->value.encoded);
		_oss_indent(_g, -1);
		ossPrint(_g, "}");
	    }
	break;
    default:
#if OSS_TOED_API_LEVEL >= 41
	_oss_prt_bad_alt(_g, _data_ptr->choice);
#else
	ossPrint(_g, "<unknown choice>");
#endif
    }

    return PDU_PRINTED;
}

static int _p0Write_Replace_Warning_Reque(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Request	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Request *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _p1Write_Replace_Warning_Respo(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Response	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Response *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pStop_Warning_Request(OssGlobal * _g, void * _data)
{
    _Stop_Warning_Request	*_data_ptr;
    _data_ptr = (_Stop_Warning_Request *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pStop_Warning_Response(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Response	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Response *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _p2Write_Replace_Warning_Indic(OssGlobal * _g, void * _data)
{
    _Write_Replace_Warning_Indication	*_data_ptr;
    _data_ptr = (_Write_Replace_Warning_Indication *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pStop_Warning_Indication(OssGlobal * _g, void * _data)
{
    _Stop_Warning_Indication	*_data_ptr;
    _data_ptr = (_Stop_Warning_Indication *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pPWS_Restart_Indication(OssGlobal * _g, void * _data)
{
    _PWS_Restart_Indication	*_data_ptr;
    _data_ptr = (_PWS_Restart_Indication *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pPWS_Failure_Indication(OssGlobal * _g, void * _data)
{
    _PWS_Failure_Indication	*_data_ptr;
    _data_ptr = (_PWS_Failure_Indication *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	if (_data_ptr->bit_mask & 0x80000000) {
	    ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "protocolExtensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->protocolExtensions);
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pError_Indication(OssGlobal * _g, void * _data)
{
    _Error_Indication	*_data_ptr;
    _data_ptr = (_Error_Indication *)_data;
    {
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	_oss_indent(_g, 0);
	ossPrint(_g, "protocolIEs ");
	_po_ProtocolIE_Container(_g, (_seqof1 **)&_data_ptr->protocolIEs);
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _p3Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Scheduled_Area_List	*_data_ptr;
    _data_ptr = (_Broadcast_Scheduled_Area_List *)_data;
    {
	short _comma = 0;

	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->bit_mask & 0x80000000) {
	    _oss_indent(_g, 0);
	    ossPrint(_g, "cellId-Broadcast-List ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->cellId_Broadcast_List) {
		_CellId_Broadcast_List * _tempa = _data_ptr->cellId_Broadcast_List;
		_CellId_Broadcast_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "eCGI ");
			_p_EUTRAN_CGI(_g, &_tempa->value.eCGI);
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "tAI-Broadcast-List ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->tAI_Broadcast_List) {
		_TAI_Broadcast_List * _tempa = _data_ptr->tAI_Broadcast_List;
		_TAI_Broadcast_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "tAI ");
			_p_TAI(_g, &_tempa->value.tAI);
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "scheduledCellinTAI ");
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			if (_tempa->value.scheduledCellinTAI) {
			    _CellId_Broadcast_List * _temp1a = _tempa->value.scheduledCellinTAI;
			    _CellId_Broadcast_List * _temp1b;
			    while (_temp1a) {
				_temp1b = _temp1a->next;
				{
				    _oss_indent(_g, 1);
				    ossPrint(_g, "{");
				    _oss_indent(_g, 0);
				    ossPrint(_g, "eCGI ");
				    _p_EUTRAN_CGI(_g, &_temp1a->value.eCGI);
				    if (_temp1a->value.bit_mask & 0x80000000) {
					ossPrint(_g, ",");
					_oss_indent(_g, 0);
					ossPrint(_g, "iE-Extensions ");
					_po_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
				    }
				    _oss_indent(_g, -1);
				    ossPrint(_g, "}");
				}
				_temp1a = _temp1b;
				if (_temp1a)
				    ossPrint(_g, ",");
			    }
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "emergencyAreaID-Broadcast-List ");
	    _p_14EmergencyAreaID_Broadcast_(_g, &_data_ptr->emergencyAreaID_Broadcast_List);
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	    _comma = 1;
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _p4Broadcast_Scheduled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Scheduled_Area_List_5GS	*_data_ptr;
    _data_ptr = (_Broadcast_Scheduled_Area_List_5GS *)_data;
    {
	short _comma = 0;

	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->bit_mask & 0x80000000) {
	    _oss_indent(_g, 0);
	    ossPrint(_g, "cellId-Broadcast-List-5GS ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->cellId_Broadcast_List_5GS) {
		_CellId_Broadcast_List_5GS * _tempa = _data_ptr->cellId_Broadcast_List_5GS;
		_CellId_Broadcast_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "nR-CGI ");
			_p_NR_CGI(_g, &_tempa->value.nR_CGI);
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "tAI-Broadcast-List-5GS ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->tAI_Broadcast_List_5GS) {
		_TAI_Broadcast_List_5GS * _tempa = _data_ptr->tAI_Broadcast_List_5GS;
		_TAI_Broadcast_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "tAI-5GS ");
			_p_TAI_5GS(_g, &_tempa->value.tAI_5GS);
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "scheduledCellinTAI-5GS ");
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			if (_tempa->value.scheduledCellinTAI_5GS) {
			    _CellId_Broadcast_List_5GS * _temp1a = _tempa->value.scheduledCellinTAI_5GS;
			    _CellId_Broadcast_List_5GS * _temp1b;
			    while (_temp1a) {
				_temp1b = _temp1a->next;
				{
				    _oss_indent(_g, 1);
				    ossPrint(_g, "{");
				    _oss_indent(_g, 0);
				    ossPrint(_g, "nR-CGI ");
				    _p_NR_CGI(_g, &_temp1a->value.nR_CGI);
				    if (_temp1a->value.bit_mask & 0x80000000) {
					ossPrint(_g, ",");
					_oss_indent(_g, 0);
					ossPrint(_g, "iE-Extensions ");
					_po_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
				    }
				    _oss_indent(_g, -1);
				    ossPrint(_g, "}");
				}
				_temp1a = _temp1b;
				if (_temp1a)
				    ossPrint(_g, ",");
			    }
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "emergencyAreaID-Broadcast-List ");
	    _p_14EmergencyAreaID_Broadcast_(_g, &_data_ptr->emergencyAreaID_Broadcast_List);
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	    _comma = 1;
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _p5Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Cancelled_Area_List	*_data_ptr;
    _data_ptr = (_Broadcast_Cancelled_Area_List *)_data;
    {
	short _comma = 0;

	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->bit_mask & 0x80000000) {
	    _oss_indent(_g, 0);
	    ossPrint(_g, "cellID-Cancelled-List ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->cellID_Cancelled_List) {
		_CellID_Cancelled_List * _tempa = _data_ptr->cellID_Cancelled_List;
		_CellID_Cancelled_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "eCGI ");
			_p_EUTRAN_CGI(_g, &_tempa->value.eCGI);
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "numberOfBroadcasts ");
			{
			    ULONG_LONG value = _tempa->value.numberOfBroadcasts;
			    ossPrint(_g, ULLONG_FMT, value);
			}
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "tAI-Cancelled-List ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->tAI_Cancelled_List) {
		_TAI_Cancelled_List * _tempa = _data_ptr->tAI_Cancelled_List;
		_TAI_Cancelled_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "tAI ");
			_p_TAI(_g, &_tempa->value.tAI);
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "cancelledCellinTAI ");
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			if (_tempa->value.cancelledCellinTAI) {
			    _CellID_Cancelled_List * _temp1a = _tempa->value.cancelledCellinTAI;
			    _CellID_Cancelled_List * _temp1b;
			    while (_temp1a) {
				_temp1b = _temp1a->next;
				{
				    _oss_indent(_g, 1);
				    ossPrint(_g, "{");
				    _oss_indent(_g, 0);
				    ossPrint(_g, "eCGI ");
				    _p_EUTRAN_CGI(_g, &_temp1a->value.eCGI);
				    ossPrint(_g, ",");
				    _oss_indent(_g, 0);
				    ossPrint(_g, "numberOfBroadcasts ");
				    {
					ULONG_LONG value = _temp1a->value.numberOfBroadcasts;
					ossPrint(_g, ULLONG_FMT, value);
				    }
				    if (_temp1a->value.bit_mask & 0x80000000) {
					ossPrint(_g, ",");
					_oss_indent(_g, 0);
					ossPrint(_g, "iE-Extensions ");
					_po_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
				    }
				    _oss_indent(_g, -1);
				    ossPrint(_g, "}");
				}
				_temp1a = _temp1b;
				if (_temp1a)
				    ossPrint(_g, ",");
			    }
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "emergencyAreaID-Cancelled-List ");
	    _p_16EmergencyAreaID_Cancelled_(_g, &_data_ptr->emergencyAreaID_Cancelled_List);
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	    _comma = 1;
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _p6Broadcast_Cancelled_Area_Li(OssGlobal * _g, void * _data)
{
    _Broadcast_Cancelled_Area_List_5GS	*_data_ptr;
    _data_ptr = (_Broadcast_Cancelled_Area_List_5GS *)_data;
    {
	short _comma = 0;

	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->bit_mask & 0x80000000) {
	    _oss_indent(_g, 0);
	    ossPrint(_g, "cellID-Cancelled-List-5GS ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->cellID_Cancelled_List_5GS) {
		_CellID_Cancelled_List_5GS * _tempa = _data_ptr->cellID_Cancelled_List_5GS;
		_CellID_Cancelled_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "nR-CGI ");
			_p_NR_CGI(_g, &_tempa->value.nR_CGI);
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "numberOfBroadcasts ");
			{
			    ULONG_LONG value = _tempa->value.numberOfBroadcasts;
			    ossPrint(_g, ULLONG_FMT, value);
			}
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "tAI-Cancelled-List-5GS ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->tAI_Cancelled_List_5GS) {
		_TAI_Cancelled_List_5GS * _tempa = _data_ptr->tAI_Cancelled_List_5GS;
		_TAI_Cancelled_List_5GS * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "tAI-5GS ");
			_p_TAI_5GS(_g, &_tempa->value.tAI_5GS);
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "cancelledCellinTAI-5GS ");
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			if (_tempa->value.cancelledCellinTAI_5GS) {
			    _CellID_Cancelled_List_5GS * _temp1a = _tempa->value.cancelledCellinTAI_5GS;
			    _CellID_Cancelled_List_5GS * _temp1b;
			    while (_temp1a) {
				_temp1b = _temp1a->next;
				{
				    _oss_indent(_g, 1);
				    ossPrint(_g, "{");
				    _oss_indent(_g, 0);
				    ossPrint(_g, "nR-CGI ");
				    _p_NR_CGI(_g, &_temp1a->value.nR_CGI);
				    ossPrint(_g, ",");
				    _oss_indent(_g, 0);
				    ossPrint(_g, "numberOfBroadcasts ");
				    {
					ULONG_LONG value = _temp1a->value.numberOfBroadcasts;
					ossPrint(_g, ULLONG_FMT, value);
				    }
				    if (_temp1a->value.bit_mask & 0x80000000) {
					ossPrint(_g, ",");
					_oss_indent(_g, 0);
					ossPrint(_g, "iE-Extensions ");
					_po_ProtocolExtensionContaine(_g, (_seqof2 **)&_temp1a->value.iE_Extensions);
				    }
				    _oss_indent(_g, -1);
				    ossPrint(_g, "}");
				}
				_temp1a = _temp1b;
				if (_temp1a)
				    ossPrint(_g, ",");
			    }
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "emergencyAreaID-Cancelled-List ");
	    _p_16EmergencyAreaID_Cancelled_(_g, &_data_ptr->emergencyAreaID_Cancelled_List);
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	    _comma = 1;
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pBroadcast_Empty_Area_List(OssGlobal * _g, void * _data)
{
    _Broadcast_Empty_Area_List	**_data_ptr;
    _data_ptr = (_Broadcast_Empty_Area_List **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_Broadcast_Empty_Area_List * _tempa = *_data_ptr;
	_Broadcast_Empty_Area_List * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_Global_ENB_ID(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _p7Broadcast_Empty_Area_List_5(OssGlobal * _g, void * _data)
{
    _Broadcast_Empty_Area_List_5GS	**_data_ptr;
    _data_ptr = (_Broadcast_Empty_Area_List_5GS **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_Broadcast_Empty_Area_List_5GS * _tempa = *_data_ptr;
	_Broadcast_Empty_Area_List_5GS * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _oss_indent(_g, 0);
	    _p_Global_RAN_Node_ID(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pCause(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	ossPrint(_g, ULLONG_FMT, value);
    }

    return PDU_PRINTED;
}

static int _p8Concurrent_Warning_Message_(OssGlobal * _g, void * _data)
{
    enum Concurrent_Warning_Message_Indicator	*_data_ptr;
    _data_ptr = (enum Concurrent_Warning_Message_Indicator *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	_oss_prt_enum(_g, value, _ssd[1].sa, (int)_ssd[1].alen);
    }

    return PDU_PRINTED;
}

static int _pCriticality_Diagnostics(OssGlobal * _g, void * _data)
{
    _Criticality_Diagnostics	*_data_ptr;
    _data_ptr = (_Criticality_Diagnostics *)_data;
    {
	short _comma = 0;

	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->bit_mask & 0x80000000) {
	    _oss_indent(_g, 0);
	    ossPrint(_g, "procedureCode ");
	    {
		ULONG_LONG value = _data_ptr->procedureCode;
		ossPrint(_g, ULLONG_FMT, value);
	    }
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x40000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "triggeringMessage ");
	    {
		ULONG_LONG value = _data_ptr->triggeringMessage;
		_oss_prt_enum(_g, value, _ssd[2].sa, (int)_ssd[2].alen);
	    }
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x20000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "procedureCriticality ");
	    {
		ULONG_LONG value = _data_ptr->procedureCriticality;
		_oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
	    }
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x10000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-CriticalityDiagnostics ");
	    _oss_indent(_g, 1);
	    ossPrint(_g, "{");
	    if (_data_ptr->iE_CriticalityDiagnostics) {
		_CriticalityDiagnostics_IE_List * _tempa = _data_ptr->iE_CriticalityDiagnostics;
		_CriticalityDiagnostics_IE_List * _tempb;
		while (_tempa) {
		    _tempb = _tempa->next;
		    {
			_oss_indent(_g, 1);
			ossPrint(_g, "{");
			_oss_indent(_g, 0);
			ossPrint(_g, "iECriticality ");
			{
			    ULONG_LONG value = _tempa->value.iECriticality;
			    _oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
			}
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "iE-ID ");
			{
			    ULONG_LONG value = _tempa->value.iE_ID;
			    ossPrint(_g, ULLONG_FMT, value);
			}
			ossPrint(_g, ",");
			_oss_indent(_g, 0);
			ossPrint(_g, "typeOfError ");
			{
			    LONG_LONG value = _tempa->value.typeOfError;
			    _oss_prt_enum(_g, (unsigned)value, _ssd[3].sa, (int)_ssd[3].alen);
			}
			if (_tempa->value.bit_mask & 0x80000000) {
			    ossPrint(_g, ",");
			    _oss_indent(_g, 0);
			    ossPrint(_g, "iE-Extensions ");
			    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_tempa->value.iE_Extensions);
			}
			_oss_indent(_g, -1);
			ossPrint(_g, "}");
		    }
		    _tempa = _tempb;
		    if (_tempa)
			ossPrint(_g, ",");
		}
	    }
	    _oss_indent(_g, -1);
	    ossPrint(_g, "}");
	    _comma = 1;
	}
	if (_data_ptr->bit_mask & 0x8000000) {
	    if (_comma) ossPrint(_g, ",");
	    _oss_indent(_g, 0);
	    ossPrint(_g, "iE-Extensions ");
	    _po_ProtocolExtensionContaine(_g, (_seqof2 **)&_data_ptr->iE_Extensions);
	    _comma = 1;
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
    }

    return PDU_PRINTED;
}

static int _pData_Coding_Scheme(OssGlobal * _g, void * _data)
{
    OSSC::COssBitString	*_data_ptr;
    _data_ptr = (OSSC::COssBitString *)_data;
    _oss_prt_bit(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _pExtended_Repetition_Period(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	ossPrint(_g, ULLONG_FMT, value);
    }

    return PDU_PRINTED;
}

static int _pFailed_Cell_List(OssGlobal * _g, void * _data)
{
    _ECGIList	**_data_ptr;
    _data_ptr = (_ECGIList **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_ECGIList * _tempa = *_data_ptr;
	_ECGIList * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_EUTRAN_CGI(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pFailed_Cell_List_NR(OssGlobal * _g, void * _data)
{
    _NR_CGIList	**_data_ptr;
    _data_ptr = (_NR_CGIList **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_NR_CGIList * _tempa = *_data_ptr;
	_NR_CGIList * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_NR_CGI(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pGlobal_ENB_ID(OssGlobal * _g, void * _data)
{
    _Global_ENB_ID	*_data_ptr;
    _data_ptr = (_Global_ENB_ID *)_data;
    _p_Global_ENB_ID(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _pGlobal_RAN_Node_ID(OssGlobal * _g, void * _data)
{
    _Global_RAN_Node_ID	*_data_ptr;
    _data_ptr = (_Global_RAN_Node_ID *)_data;
    _p_Global_RAN_Node_ID(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _pGlobal_GNB_ID(OssGlobal * _g, void * _data)
{
    _Global_GNB_ID	*_data_ptr;
    _data_ptr = (_Global_GNB_ID *)_data;
    _p_Global_GNB_ID(_g, _data_ptr);

    return PDU_PRINTED;
}

static int _pList_of_TAIs(OssGlobal * _g, void * _data)
{
    _List_of_TAIs	**_data_ptr;
    _data_ptr = (_List_of_TAIs **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_List_of_TAIs * _tempa = *_data_ptr;
	_List_of_TAIs * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p__seq43(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pList_of_TAIs_Restart(OssGlobal * _g, void * _data)
{
    _List_of_TAIs	**_data_ptr;
    _data_ptr = (_List_of_TAIs **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_List_of_TAIs * _tempa = *_data_ptr;
	_List_of_TAIs * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p__seq43(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pList_of_EAIs_Restart(OssGlobal * _g, void * _data)
{
    _Emergency_Area_ID_List	**_data_ptr;
    _data_ptr = (_Emergency_Area_ID_List **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_Emergency_Area_ID_List * _tempa = *_data_ptr;
	_Emergency_Area_ID_List * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _oss_indent(_g, 0);
	    _oss_prt_oct(_g, _tempa->value.value, _tempa->value.length);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pList_of_5GS_TAIs(OssGlobal * _g, void * _data)
{
    _List_of_5GS_TAIs	**_data_ptr;
    _data_ptr = (_List_of_5GS_TAIs **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_List_of_5GS_TAIs * _tempa = *_data_ptr;
	_List_of_5GS_TAIs * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_TAI_5GS(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _p9List_of_5GS_Cells_for_Failu(OssGlobal * _g, void * _data)
{
    _NR_CGIList	**_data_ptr;
    _data_ptr = (_NR_CGIList **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_NR_CGIList * _tempa = *_data_ptr;
	_NR_CGIList * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_NR_CGI(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pList_of_5GS_TAI_for_Restart(OssGlobal * _g, void * _data)
{
    _List_of_5GS_TAIs	**_data_ptr;
    _data_ptr = (_List_of_5GS_TAIs **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_List_of_5GS_TAIs * _tempa = *_data_ptr;
	_List_of_5GS_TAIs * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_TAI_5GS(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pMessage_Identifier(OssGlobal * _g, void * _data)
{
    OSSC::COssBitString	*_data_ptr;
    _data_ptr = (OSSC::COssBitString *)_data;
    _oss_prt_bit(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _p10Number_of_Broadcasts_Reque(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	ossPrint(_g, ULLONG_FMT, value);
    }

    return PDU_PRINTED;
}

static int _pNgENB_ID(OssGlobal * _g, void * _data)
{
    _NgENB_ID	*_data_ptr;
    _data_ptr = (_NgENB_ID *)_data;
    switch (_data_ptr->choice) {
    case 1:
	ossPrint(_g, "macroNgENB-ID : ");
	_oss_prt_bit(_g, _data_ptr->u.macroNgENB_ID.value, _data_ptr->u.macroNgENB_ID.length);
	break;
    case 2:
	ossPrint(_g, "shortMacroNgENB-ID : ");
	_oss_prt_bit(_g, _data_ptr->u.shortMacroNgENB_ID.value, _data_ptr->u.shortMacroNgENB_ID.length);
	break;
    case 3:
	ossPrint(_g, "longMacroNgENB-ID : ");
	_oss_prt_bit(_g, _data_ptr->u.longMacroNgENB_ID.value, _data_ptr->u.longMacroNgENB_ID.length);
	break;
    default:
#if OSS_TOED_API_LEVEL >= 41
	_oss_prt_bad_alt(_g, _data_ptr->choice);
#else
	ossPrint(_g, "<unknown choice>");
#endif
    }

    return PDU_PRINTED;
}

static int _pOmc_Id(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    _oss_prt_oct(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _pRepetition_Period(OssGlobal * _g, void * _data)
{
    OSS_UINT32	*_data_ptr;
    _data_ptr = (OSS_UINT32 *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	ossPrint(_g, ULLONG_FMT, value);
    }

    return PDU_PRINTED;
}

static int _pRestarted_Cell_List(OssGlobal * _g, void * _data)
{
    _ECGIList	**_data_ptr;
    _data_ptr = (_ECGIList **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_ECGIList * _tempa = *_data_ptr;
	_ECGIList * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_EUTRAN_CGI(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pRAT_Selector_5GS(OssGlobal * _g, void * _data)
{
    enum RAT_Selector_5GS	*_data_ptr;
    _data_ptr = (enum RAT_Selector_5GS *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	_oss_prt_enum(_g, value, _ssd[1].sa, (int)_ssd[1].alen);
    }

    return PDU_PRINTED;
}

static int _pRestarted_Cell_List_NR(OssGlobal * _g, void * _data)
{
    _NR_CGIList	**_data_ptr;
    _data_ptr = (_NR_CGIList **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_NR_CGIList * _tempa = *_data_ptr;
	_NR_CGIList * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_NR_CGI(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _p11Send_Write_Replace_Warning(OssGlobal * _g, void * _data)
{
    enum Send_Write_Replace_Warning_Indication	*_data_ptr;
    _data_ptr = (enum Send_Write_Replace_Warning_Indication *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	_oss_prt_enum(_g, value, _ssd[1].sa, (int)_ssd[1].alen);
    }

    return PDU_PRINTED;
}

static int _pSend_Stop_Warning_Indication(OssGlobal * _g, void * _data)
{
    enum Send_Stop_Warning_Indication	*_data_ptr;
    _data_ptr = (enum Send_Stop_Warning_Indication *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	_oss_prt_enum(_g, value, _ssd[1].sa, (int)_ssd[1].alen);
    }

    return PDU_PRINTED;
}

static int _pSerial_Number(OssGlobal * _g, void * _data)
{
    OSSC::COssBitString	*_data_ptr;
    _data_ptr = (OSSC::COssBitString *)_data;
    _oss_prt_bit(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _pStop_All_Indicator(OssGlobal * _g, void * _data)
{
    enum Stop_All_Indicator	*_data_ptr;
    _data_ptr = (enum Stop_All_Indicator *)_data;
    {
	ULONG_LONG value = *_data_ptr;
	_oss_prt_enum(_g, value, _ssd[1].sa, (int)_ssd[1].alen);
    }

    return PDU_PRINTED;
}

static int _pUnknown_Tracking_Area_List(OssGlobal * _g, void * _data)
{
    _TAI_List_for_Warning	**_data_ptr;
    _data_ptr = (_TAI_List_for_Warning **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_TAI_List_for_Warning * _tempa = *_data_ptr;
	_TAI_List_for_Warning * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_TAI(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _p12Unknown_5GS_Tracking_Area_(OssGlobal * _g, void * _data)
{
    _List_of_5GS_TAIs	**_data_ptr;
    _data_ptr = (_List_of_5GS_TAIs **)_data;
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_List_of_5GS_TAIs * _tempa = *_data_ptr;
	_List_of_5GS_TAIs * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    _p_TAI_5GS(_g, &_tempa->value);
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

    return PDU_PRINTED;
}

static int _pWarning_Area_List(OssGlobal * _g, void * _data)
{
    _Warning_Area_List	*_data_ptr;
    _data_ptr = (_Warning_Area_List *)_data;
    switch (_data_ptr->choice) {
    case 1:
	ossPrint(_g, "cell-ID-List : ");
	_p_ECGIList(_g, &_data_ptr->u.cell_ID_List);
	break;
    case 2:
	ossPrint(_g, "tracking-Area-List-for-Warning : ");
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->u.tracking_Area_List_for_Warning) {
	    _TAI_List_for_Warning * _tempa = _data_ptr->u.tracking_Area_List_for_Warning;
	    _TAI_List_for_Warning * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_p_TAI(_g, &_tempa->value);
		_tempa = _tempb;
		if (_tempa)
		    ossPrint(_g, ",");
	    }
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
	break;
    case 3:
	ossPrint(_g, "emergency-Area-ID-List : ");
	_p_Emergency_Area_ID_List(_g, &_data_ptr->u.emergency_Area_ID_List);
	break;
    default:
#if OSS_TOED_API_LEVEL >= 41
	_oss_prt_bad_alt(_g, _data_ptr->choice);
#else
	ossPrint(_g, "<unknown choice>");
#endif
    }

    return PDU_PRINTED;
}

static int _pWarning_Message_Content(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    _oss_prt_oct(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _pWarning_Area_Coordinates(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    _oss_prt_oct(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _pWarning_Security_Information(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    _oss_prt_oct(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _pWarning_Type(OssGlobal * _g, void * _data)
{
    OSSC::COssString	*_data_ptr;
    _data_ptr = (OSSC::COssString *)_data;
    _oss_prt_oct(_g, _data_ptr->value, _data_ptr->length);

    return PDU_PRINTED;
}

static int _pWarning_Area_List_5GS(OssGlobal * _g, void * _data)
{
    _Warning_Area_List_5GS	*_data_ptr;
    _data_ptr = (_Warning_Area_List_5GS *)_data;
    switch (_data_ptr->choice) {
    case 1:
	ossPrint(_g, "cell-ID-List : ");
	_p_ECGIList(_g, &_data_ptr->u.cell_ID_List);
	break;
    case 2:
	ossPrint(_g, "nR-CGIList : ");
	_oss_indent(_g, 1);
	ossPrint(_g, "{");
	if (_data_ptr->u.nR_CGIList) {
	    _NR_CGIList * _tempa = _data_ptr->u.nR_CGIList;
	    _NR_CGIList * _tempb;
	    while (_tempa) {
		_tempb = _tempa->next;
		_p_NR_CGI(_g, &_tempa->value);
		_tempa = _tempb;
		if (_tempa)
		    ossPrint(_g, ",");
	    }
	}
	_oss_indent(_g, -1);
	ossPrint(_g, "}");
	break;
    case 3:
	ossPrint(_g, "tAIList-5GS : ");
#ifndef OSS_DO_NOT_CHECK_POINTERS
	if (_data_ptr->u.tAIList_5GS == NULL)
#if OSS_TOED_API_LEVEL >= 41
	    _oss_prt_null_ptr(_g);
#else
	    ossPrint(_g, "<<<<<<NULL>>>>>>");
#endif
	else
#endif
	    _p_TAI_5GS(_g, _data_ptr->u.tAIList_5GS);
	break;
    case 4:
	ossPrint(_g, "emergencyAreaIDList : ");
	_p_Emergency_Area_ID_List(_g, &_data_ptr->u.emergencyAreaIDList);
	break;
    default:
#if OSS_TOED_API_LEVEL >= 41
	_oss_prt_bad_alt(_g, _data_ptr->choice);
#else
	ossPrint(_g, "<unknown choice>");
#endif
    }

    return PDU_PRINTED;
}

static int _pmSBC_AP_Containers(struct ossGlobal * _g, int _pdunum, void * _data)
{
    int _rc = _pdunum < 0;

    if (_rc)
	_pdunum = -_pdunum;
    if (_pdunum < 1 || _pdunum > 52 || !_PrintPDU[_pdunum - 1]._pf)
	return PDU_RANGE;
    else {
	if (_rc) {
	    ossPrint(_g, "%s : ", _PrintPDU[_pdunum - 1]._name);
	    _rc = _PrintPDU[_pdunum - 1]._pf(_g, _data);
	} else {
	    ossPrint(_g, "value %s ::= ", _PrintPDU[_pdunum - 1]._name);
	    _rc = _PrintPDU[_pdunum - 1]._pf(_g, _data);
	    ossPrint(_g, "\n");
	}
    }

    return _rc;
}

static void _po_ProtocolIE_Container(OssGlobal * _g, _seqof1 ** _data_ptr)
{
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_seqof1 * _tempa = *_data_ptr;
	_seqof1 * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    {
		_oss_indent(_g, 1);
		ossPrint(_g, "{");
		_oss_indent(_g, 0);
		ossPrint(_g, "id ");
		{
		    ULONG_LONG value = _tempa->value.id;
		    ossPrint(_g, ULLONG_FMT, value);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "criticality ");
		{
		    ULONG_LONG value = _tempa->value.criticality;
		    _oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "value ");
		_oss_prt_new_opentype(_g, _tempa->value.value.pduNum, *(void **)&_tempa->value.value.decoded, &_tempa->value.value.encoded);
		_oss_indent(_g, -1);
		ossPrint(_g, "}");
	    }
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

}

static void _po_ProtocolExtensionContaine(OssGlobal * _g, _seqof2 ** _data_ptr)
{
    _oss_indent(_g, 1);
    ossPrint(_g, "{");
    if (*_data_ptr) {
	_seqof2 * _tempa = *_data_ptr;
	_seqof2 * _tempb;
	while (_tempa) {
	    _tempb = _tempa->next;
	    {
		_oss_indent(_g, 1);
		ossPrint(_g, "{");
		_oss_indent(_g, 0);
		ossPrint(_g, "id ");
		{
		    ULONG_LONG value = _tempa->value.id;
		    ossPrint(_g, ULLONG_FMT, value);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "criticality ");
		{
		    ULONG_LONG value = _tempa->value.criticality;
		    _oss_prt_enum(_g, value, _ssd[0].sa, (int)_ssd[0].alen);
		}
		ossPrint(_g, ",");
		_oss_indent(_g, 0);
		ossPrint(_g, "extensionValue ");
		_oss_prt_new_opentype(_g, _tempa->value.extensionValue.pduNum, *(void **)&_tempa->value.extensionValue.decoded, &_tempa->value.extensionValue.encoded);
		_oss_indent(_g, -1);
		ossPrint(_g, "}");
	    }
	    _tempa = _tempb;
	    if (_tempa)
		ossPrint(_g, ",");
	}
    }
    _oss_indent(_g, -1);
    ossPrint(_g, "}");

}

#endif

#ifdef OSS_COPY_VALUE
#define _oss_c ((_EncDecGlobals*)_g->encDecVar)

static _Global_ENB_ID  * _cpGlobal_ENB_ID(OssGlobal * _g, _Global_ENB_ID  * psVal, _Global_ENB_ID  * pdVal)
{
    if (!pdVal) {
	pdVal = (_Global_ENB_ID  *)_oss_dec_const_alloc(_g, sizeof(_Global_ENB_ID ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).pLMNidentity), &((*pdVal).pLMNidentity), sizeof(((*pdVal).pLMNidentity).length), sizeof(((*pdVal).pLMNidentity).value[0]), (unsigned int)((char *)&((*psVal).pLMNidentity).value - (char *)&((*psVal).pLMNidentity)));
    }
    {
	_cpENB_ID(_g, &((*psVal).eNB_ID), &((*pdVal).eNB_ID));
    }
    if ((*psVal).bit_mask & 0x80000000) {
	(*pdVal).iE_Extensions = NULL;
	if ((*psVal).iE_Extensions) {
	    _seqof38 *  s_oss_tmp_2 = (*psVal).iE_Extensions;
	    _seqof38 *  d_oss_tmp_2;

	    (*pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    do {
		OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
		{
		    {
			int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
			_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
			((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
		    }
		}
		if (s_oss_tmp_2->next)
		    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		s_oss_tmp_2 = s_oss_tmp_2->next;
		d_oss_tmp_2 = d_oss_tmp_2->next;
	    } while (s_oss_tmp_2);
	}
    }
    return pdVal;
}


static _Global_RAN_Node_ID  * _cpGlobal_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID  * psVal, _Global_RAN_Node_ID  * pdVal)
{
    if (!pdVal) {
	pdVal = (_Global_RAN_Node_ID  *)_oss_dec_const_alloc(_g, sizeof(_Global_RAN_Node_ID ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    switch ((*psVal).choice) {
	case 1: {
	    (*pdVal).u.global_GNB_ID = NULL;
	    (*pdVal).u.global_GNB_ID = _cpGlobal_GNB_ID(_g, (*psVal).u.global_GNB_ID, (*pdVal).u.global_GNB_ID);
	}   break;
	case 2: {
	    (*pdVal).u.global_NgENB_ID = (_Global_NgENB_ID  *)_oss_dec_const_alloc(_g, sizeof(_Global_NgENB_ID ));
	    OSS_MEMCPY(_g, (*pdVal).u.global_NgENB_ID, sizeof(*(*pdVal).u.global_NgENB_ID), (*psVal).u.global_NgENB_ID, sizeof(*(*pdVal).u.global_NgENB_ID));
	    {
		_oss_cpy_unbnd_octet_ia(_g, &((*(*psVal).u.global_NgENB_ID).pLMNidentity), &((*(*pdVal).u.global_NgENB_ID).pLMNidentity), sizeof(((*(*pdVal).u.global_NgENB_ID).pLMNidentity).length), sizeof(((*(*pdVal).u.global_NgENB_ID).pLMNidentity).value[0]), (unsigned int)((char *)&((*(*psVal).u.global_NgENB_ID).pLMNidentity).value - (char *)&((*(*psVal).u.global_NgENB_ID).pLMNidentity)));
	    }
	    {
		_cpENB_ID(_g, &((*(*psVal).u.global_NgENB_ID).ngENB_ID), &((*(*pdVal).u.global_NgENB_ID).ngENB_ID));
	    }
	    if ((*(*psVal).u.global_NgENB_ID).bit_mask & 0x80000000) {
		(*(*pdVal).u.global_NgENB_ID).iE_Extensions = NULL;
		if ((*(*psVal).u.global_NgENB_ID).iE_Extensions) {
		    _seqof38 *  s_oss_tmp_3 = (*(*psVal).u.global_NgENB_ID).iE_Extensions;
		    _seqof38 *  d_oss_tmp_3;

		    (*(*pdVal).u.global_NgENB_ID).iE_Extensions = d_oss_tmp_3 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_3,  sizeof(_seqof38), s_oss_tmp_3, sizeof(_seqof38));
			{
			    _seq42  * src_3 = &(s_oss_tmp_3->value);
			    _seq42  * dst_3 = &(d_oss_tmp_3->value);

			    {
				int         _pduNum = ((*src_3).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((*src_3).extensionValue).encoded, &((*dst_3).extensionValue).encoded, *(void **)&((*src_3).extensionValue).decoded, (void **)&((*dst_3).extensionValue).decoded);
				((*dst_3).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_3->next)
			    d_oss_tmp_3->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			s_oss_tmp_3 = s_oss_tmp_3->next;
			d_oss_tmp_3 = d_oss_tmp_3->next;
		    } while (s_oss_tmp_3);
		}
	    }
	}   break;
	default:;
    }
    return pdVal;
}


static _Global_GNB_ID  * _cpGlobal_GNB_ID(OssGlobal * _g, _Global_GNB_ID  * psVal, _Global_GNB_ID  * pdVal)
{
    if (!pdVal) {
	pdVal = (_Global_GNB_ID  *)_oss_dec_const_alloc(_g, sizeof(_Global_GNB_ID ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).pLMNidentity), &((*pdVal).pLMNidentity), sizeof(((*pdVal).pLMNidentity).length), sizeof(((*pdVal).pLMNidentity).value[0]), (unsigned int)((char *)&((*psVal).pLMNidentity).value - (char *)&((*psVal).pLMNidentity)));
    }
    {
	switch (((*psVal).gNB_ID).choice) {
	    case 1: {
		_oss_cpy_unbnd_octet_ia(_g, &(((*psVal).gNB_ID).u.gNB_ID), &(((*pdVal).gNB_ID).u.gNB_ID), sizeof((((*pdVal).gNB_ID).u.gNB_ID).length), -1L, (unsigned int)((char *)&(((*psVal).gNB_ID).u.gNB_ID).value - (char *)&(((*psVal).gNB_ID).u.gNB_ID)));
	    }   break;
	    default:;
	}
    }
    if ((*psVal).bit_mask & 0x80000000) {
	(*pdVal).iE_Extensions = NULL;
	if ((*psVal).iE_Extensions) {
	    _seqof38 *  s_oss_tmp_2 = (*psVal).iE_Extensions;
	    _seqof38 *  d_oss_tmp_2;

	    (*pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    do {
		OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
		{
		    {
			int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
			_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
			((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
		    }
		}
		if (s_oss_tmp_2->next)
		    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		s_oss_tmp_2 = s_oss_tmp_2->next;
		d_oss_tmp_2 = d_oss_tmp_2->next;
	    } while (s_oss_tmp_2);
	}
    }
    return pdVal;
}


static _ENB_ID  * _cpENB_ID(OssGlobal * _g, _ENB_ID  * psVal, _ENB_ID  * pdVal)
{
    if (!pdVal) {
	pdVal = (_ENB_ID  *)_oss_dec_const_alloc(_g, sizeof(_ENB_ID ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    switch ((*psVal).choice) {
	case 1: {
	    _oss_cpy_unbnd_octet_ia(_g, &((*psVal).u.macroENB_ID), &((*pdVal).u.macroENB_ID), sizeof(((*pdVal).u.macroENB_ID).length), -1L, (unsigned int)((char *)&((*psVal).u.macroENB_ID).value - (char *)&((*psVal).u.macroENB_ID)));
	}   break;
	case 2: {
	    _oss_cpy_unbnd_octet_ia(_g, &((*psVal).u.homeENB_ID), &((*pdVal).u.homeENB_ID), sizeof(((*pdVal).u.homeENB_ID).length), -1L, (unsigned int)((char *)&((*psVal).u.homeENB_ID).value - (char *)&((*psVal).u.homeENB_ID)));
	}   break;
	case 3: {
	    _oss_cpy_unbnd_octet_ia(_g, &((*psVal).u.short_macroENB_ID), &((*pdVal).u.short_macroENB_ID), sizeof(((*pdVal).u.short_macroENB_ID).length), -1L, (unsigned int)((char *)&((*psVal).u.short_macroENB_ID).value - (char *)&((*psVal).u.short_macroENB_ID)));
	}   break;
	case 4: {
	    _oss_cpy_unbnd_octet_ia(_g, &((*psVal).u.long_macroENB_ID), &((*pdVal).u.long_macroENB_ID), sizeof(((*pdVal).u.long_macroENB_ID).length), -1L, (unsigned int)((char *)&((*psVal).u.long_macroENB_ID).value - (char *)&((*psVal).u.long_macroENB_ID)));
	}   break;
	default:;
    }
    return pdVal;
}


static _seqof38 * * _cp_seqof23(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal)
{
    if (!pdVal) {
	pdVal = (_seqof38 * *)_oss_dec_const_alloc(_g, sizeof(_seqof38 *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_seqof38 *  s_oss_tmp_1 = *psVal;
	_seqof38 *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_seqof38), s_oss_tmp_1, sizeof(_seqof38));
	    {
		{
		    int         _pduNum = ((s_oss_tmp_1->value).extensionValue).pduNum;
		    _oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_1->value).extensionValue).encoded, &((d_oss_tmp_1->value).extensionValue).encoded, *(void **)&((s_oss_tmp_1->value).extensionValue).decoded, (void **)&((d_oss_tmp_1->value).extensionValue).decoded);
		    ((d_oss_tmp_1->value).extensionValue).pduNum = _pduNum;
		}
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _EUTRAN_CGI  * _cpEUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI  * psVal, _EUTRAN_CGI  * pdVal)
{
    if (!pdVal) {
	pdVal = (_EUTRAN_CGI  *)_oss_dec_const_alloc(_g, sizeof(_EUTRAN_CGI ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).pLMNidentity), &((*pdVal).pLMNidentity), sizeof(((*pdVal).pLMNidentity).length), sizeof(((*pdVal).pLMNidentity).value[0]), (unsigned int)((char *)&((*psVal).pLMNidentity).value - (char *)&((*psVal).pLMNidentity)));
    }
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).cell_ID), &((*pdVal).cell_ID), sizeof(((*pdVal).cell_ID).length), -1L, (unsigned int)((char *)&((*psVal).cell_ID).value - (char *)&((*psVal).cell_ID)));
    }
    if ((*psVal).bit_mask & 0x80000000) {
	_cp_seqof23(_g, &((*psVal).iE_Extensions), &((*pdVal).iE_Extensions));
    }
    return pdVal;
}


static _seqof38 * * _cp_seqof26(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal)
{
    if (!pdVal) {
	pdVal = (_seqof38 * *)_oss_dec_const_alloc(_g, sizeof(_seqof38 *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_seqof38 *  s_oss_tmp_1 = *psVal;
	_seqof38 *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_seqof38), s_oss_tmp_1, sizeof(_seqof38));
	    {
		{
		    int         _pduNum = ((s_oss_tmp_1->value).extensionValue).pduNum;
		    _oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_1->value).extensionValue).encoded, &((d_oss_tmp_1->value).extensionValue).encoded, *(void **)&((s_oss_tmp_1->value).extensionValue).decoded, (void **)&((d_oss_tmp_1->value).extensionValue).decoded);
		    ((d_oss_tmp_1->value).extensionValue).pduNum = _pduNum;
		}
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _NR_CGI  * _cpNR_CGI(OssGlobal * _g, _NR_CGI  * psVal, _NR_CGI  * pdVal)
{
    if (!pdVal) {
	pdVal = (_NR_CGI  *)_oss_dec_const_alloc(_g, sizeof(_NR_CGI ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).pLMNidentity), &((*pdVal).pLMNidentity), sizeof(((*pdVal).pLMNidentity).length), sizeof(((*pdVal).pLMNidentity).value[0]), (unsigned int)((char *)&((*psVal).pLMNidentity).value - (char *)&((*psVal).pLMNidentity)));
    }
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).nRCellIdentity), &((*pdVal).nRCellIdentity), sizeof(((*pdVal).nRCellIdentity).length), -1L, (unsigned int)((char *)&((*psVal).nRCellIdentity).value - (char *)&((*psVal).nRCellIdentity)));
    }
    if ((*psVal).bit_mask & 0x80000000) {
	_cp_seqof26(_g, &((*psVal).iE_Extensions), &((*pdVal).iE_Extensions));
    }
    return pdVal;
}


static _ECGIList * * _cpECGIList(OssGlobal * _g, _ECGIList * * psVal, _ECGIList * * pdVal)
{
    if (!pdVal) {
	pdVal = (_ECGIList * *)_oss_dec_const_alloc(_g, sizeof(_ECGIList *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_ECGIList *  s_oss_tmp_1 = *psVal;
	_ECGIList *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_ECGIList *)_oss_dec_getmem_internal(_g, sizeof(_ECGIList));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_ECGIList), s_oss_tmp_1, sizeof(_ECGIList));
	    {
		_cpEUTRAN_CGI(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_ECGIList *)_oss_dec_getmem_internal(_g, sizeof(_ECGIList));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _Emergency_Area_ID_List * * _cpEmergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List * * psVal, _Emergency_Area_ID_List * * pdVal)
{
    if (!pdVal) {
	pdVal = (_Emergency_Area_ID_List * *)_oss_dec_const_alloc(_g, sizeof(_Emergency_Area_ID_List *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_Emergency_Area_ID_List *  s_oss_tmp_1 = *psVal;
	_Emergency_Area_ID_List *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_Emergency_Area_ID_List *)_oss_dec_getmem_internal(_g, sizeof(_Emergency_Area_ID_List));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_Emergency_Area_ID_List), s_oss_tmp_1, sizeof(_Emergency_Area_ID_List));
	    {
		_oss_cpy_unbnd_octet_ia(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value), sizeof((d_oss_tmp_1->value).length), sizeof((d_oss_tmp_1->value).value[0]), (unsigned int)((char *)&(s_oss_tmp_1->value).value - (char *)&(s_oss_tmp_1->value)));
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_Emergency_Area_ID_List *)_oss_dec_getmem_internal(_g, sizeof(_Emergency_Area_ID_List));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _EmergencyAreaID_Broadcast_List_Item  * _cp13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item  * psVal, _EmergencyAreaID_Broadcast_List_Item  * pdVal)
{
    if (!pdVal) {
	pdVal = (_EmergencyAreaID_Broadcast_List_Item  *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Broadcast_List_Item ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).emergencyAreaID), &((*pdVal).emergencyAreaID), sizeof(((*pdVal).emergencyAreaID).length), sizeof(((*pdVal).emergencyAreaID).value[0]), (unsigned int)((char *)&((*psVal).emergencyAreaID).value - (char *)&((*psVal).emergencyAreaID)));
    }
    {
	(*pdVal).scheduledCellinEAI = NULL;
	if ((*psVal).scheduledCellinEAI) {
	    _CellId_Broadcast_List *  s_oss_tmp_2 = (*psVal).scheduledCellinEAI;
	    _CellId_Broadcast_List *  d_oss_tmp_2;

	    (*pdVal).scheduledCellinEAI = d_oss_tmp_2 = (_CellId_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List));
	    do {
		OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_CellId_Broadcast_List), s_oss_tmp_2, sizeof(_CellId_Broadcast_List));
		{
		    {
			_cpEUTRAN_CGI(_g, &((s_oss_tmp_2->value).eCGI), &((d_oss_tmp_2->value).eCGI));
		    }
		    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
			_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
			_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

			*dst_3 = NULL;
			if (*src_3) {
			    _seqof38 *  s_oss_tmp_4 = *src_3;
			    _seqof38 *  d_oss_tmp_4;

			    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			    do {
				OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
				{
				    {
					int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
					_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
					((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
				    }
				}
				if (s_oss_tmp_4->next)
				    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				s_oss_tmp_4 = s_oss_tmp_4->next;
				d_oss_tmp_4 = d_oss_tmp_4->next;
			    } while (s_oss_tmp_4);
			}
		    }
		}
		if (s_oss_tmp_2->next)
		    d_oss_tmp_2->next = (_CellId_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List));
		s_oss_tmp_2 = s_oss_tmp_2->next;
		d_oss_tmp_2 = d_oss_tmp_2->next;
	    } while (s_oss_tmp_2);
	}
    }
    if ((*psVal).bit_mask & 0x80000000) {
	(*pdVal).iE_Extensions = NULL;
	if ((*psVal).iE_Extensions) {
	    _seqof38 *  s_oss_tmp_2 = (*psVal).iE_Extensions;
	    _seqof38 *  d_oss_tmp_2;

	    (*pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    do {
		OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
		{
		    {
			int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
			_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
			((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
		    }
		}
		if (s_oss_tmp_2->next)
		    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		s_oss_tmp_2 = s_oss_tmp_2->next;
		d_oss_tmp_2 = d_oss_tmp_2->next;
	    } while (s_oss_tmp_2);
	}
    }
    return pdVal;
}


static _EmergencyAreaID_Broadcast_List * * _cp14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List * * psVal, _EmergencyAreaID_Broadcast_List * * pdVal)
{
    if (!pdVal) {
	pdVal = (_EmergencyAreaID_Broadcast_List * *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Broadcast_List *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_EmergencyAreaID_Broadcast_List *  s_oss_tmp_1 = *psVal;
	_EmergencyAreaID_Broadcast_List *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_EmergencyAreaID_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_EmergencyAreaID_Broadcast_List));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_EmergencyAreaID_Broadcast_List), s_oss_tmp_1, sizeof(_EmergencyAreaID_Broadcast_List));
	    {
		_cp13EmergencyAreaID_Broadcast_(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_EmergencyAreaID_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_EmergencyAreaID_Broadcast_List));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _EmergencyAreaID_Cancelled_Item  * _cp15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item  * psVal, _EmergencyAreaID_Cancelled_Item  * pdVal)
{
    if (!pdVal) {
	pdVal = (_EmergencyAreaID_Cancelled_Item  *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Cancelled_Item ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).emergencyAreaID), &((*pdVal).emergencyAreaID), sizeof(((*pdVal).emergencyAreaID).length), sizeof(((*pdVal).emergencyAreaID).value[0]), (unsigned int)((char *)&((*psVal).emergencyAreaID).value - (char *)&((*psVal).emergencyAreaID)));
    }
    {
	(*pdVal).cancelledCellinEAI = NULL;
	if ((*psVal).cancelledCellinEAI) {
	    _CellID_Cancelled_List *  s_oss_tmp_2 = (*psVal).cancelledCellinEAI;
	    _CellID_Cancelled_List *  d_oss_tmp_2;

	    (*pdVal).cancelledCellinEAI = d_oss_tmp_2 = (_CellID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List));
	    do {
		OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_CellID_Cancelled_List), s_oss_tmp_2, sizeof(_CellID_Cancelled_List));
		{
		    {
			_cpEUTRAN_CGI(_g, &((s_oss_tmp_2->value).eCGI), &((d_oss_tmp_2->value).eCGI));
		    }
		    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
			_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
			_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

			*dst_3 = NULL;
			if (*src_3) {
			    _seqof38 *  s_oss_tmp_4 = *src_3;
			    _seqof38 *  d_oss_tmp_4;

			    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			    do {
				OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
				{
				    {
					int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
					_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
					((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
				    }
				}
				if (s_oss_tmp_4->next)
				    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				s_oss_tmp_4 = s_oss_tmp_4->next;
				d_oss_tmp_4 = d_oss_tmp_4->next;
			    } while (s_oss_tmp_4);
			}
		    }
		}
		if (s_oss_tmp_2->next)
		    d_oss_tmp_2->next = (_CellID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List));
		s_oss_tmp_2 = s_oss_tmp_2->next;
		d_oss_tmp_2 = d_oss_tmp_2->next;
	    } while (s_oss_tmp_2);
	}
    }
    if ((*psVal).bit_mask & 0x80000000) {
	(*pdVal).iE_Extensions = NULL;
	if ((*psVal).iE_Extensions) {
	    _seqof38 *  s_oss_tmp_2 = (*psVal).iE_Extensions;
	    _seqof38 *  d_oss_tmp_2;

	    (*pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    do {
		OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
		{
		    {
			int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
			_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
			((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
		    }
		}
		if (s_oss_tmp_2->next)
		    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		s_oss_tmp_2 = s_oss_tmp_2->next;
		d_oss_tmp_2 = d_oss_tmp_2->next;
	    } while (s_oss_tmp_2);
	}
    }
    return pdVal;
}


static _EmergencyAreaID_Cancelled_List * * _cp16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List * * psVal, _EmergencyAreaID_Cancelled_List * * pdVal)
{
    if (!pdVal) {
	pdVal = (_EmergencyAreaID_Cancelled_List * *)_oss_dec_const_alloc(_g, sizeof(_EmergencyAreaID_Cancelled_List *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_EmergencyAreaID_Cancelled_List *  s_oss_tmp_1 = *psVal;
	_EmergencyAreaID_Cancelled_List *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_EmergencyAreaID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_EmergencyAreaID_Cancelled_List));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_EmergencyAreaID_Cancelled_List), s_oss_tmp_1, sizeof(_EmergencyAreaID_Cancelled_List));
	    {
		_cp15EmergencyAreaID_Cancelled_(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_EmergencyAreaID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_EmergencyAreaID_Cancelled_List));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _seqof38 * * _cp_seqof38(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal)
{
    if (!pdVal) {
	pdVal = (_seqof38 * *)_oss_dec_const_alloc(_g, sizeof(_seqof38 *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_seqof38 *  s_oss_tmp_1 = *psVal;
	_seqof38 *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_seqof38), s_oss_tmp_1, sizeof(_seqof38));
	    {
		{
		    int         _pduNum = ((s_oss_tmp_1->value).extensionValue).pduNum;
		    _oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_1->value).extensionValue).encoded, &((d_oss_tmp_1->value).extensionValue).encoded, *(void **)&((s_oss_tmp_1->value).extensionValue).decoded, (void **)&((d_oss_tmp_1->value).extensionValue).decoded);
		    ((d_oss_tmp_1->value).extensionValue).pduNum = _pduNum;
		}
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _TAI  * _cpTAI(OssGlobal * _g, _TAI  * psVal, _TAI  * pdVal)
{
    if (!pdVal) {
	pdVal = (_TAI  *)_oss_dec_const_alloc(_g, sizeof(_TAI ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).pLMNidentity), &((*pdVal).pLMNidentity), sizeof(((*pdVal).pLMNidentity).length), sizeof(((*pdVal).pLMNidentity).value[0]), (unsigned int)((char *)&((*psVal).pLMNidentity).value - (char *)&((*psVal).pLMNidentity)));
    }
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).tAC), &((*pdVal).tAC), sizeof(((*pdVal).tAC).length), sizeof(((*pdVal).tAC).value[0]), (unsigned int)((char *)&((*psVal).tAC).value - (char *)&((*psVal).tAC)));
    }
    if ((*psVal).bit_mask & 0x80000000) {
	_cp_seqof38(_g, &((*psVal).iE_Extensions), &((*pdVal).iE_Extensions));
    }
    return pdVal;
}


static _seq43  * _cp_seq43(OssGlobal * _g, _seq43  * psVal, _seq43  * pdVal)
{
    if (!pdVal) {
	pdVal = (_seq43  *)_oss_dec_const_alloc(_g, sizeof(_seq43 ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_cpTAI(_g, &((*psVal).tai), &((*pdVal).tai));
    }
    return pdVal;
}


static _seqof38 * * _cp_seqof39(OssGlobal * _g, _seqof38 * * psVal, _seqof38 * * pdVal)
{
    if (!pdVal) {
	pdVal = (_seqof38 * *)_oss_dec_const_alloc(_g, sizeof(_seqof38 *));
    }
    *pdVal = NULL;
    if (*psVal) {
	_seqof38 *  s_oss_tmp_1 = *psVal;
	_seqof38 *  d_oss_tmp_1;

	*pdVal = d_oss_tmp_1 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	do {
	    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_seqof38), s_oss_tmp_1, sizeof(_seqof38));
	    {
		{
		    int         _pduNum = ((s_oss_tmp_1->value).extensionValue).pduNum;
		    _oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_1->value).extensionValue).encoded, &((d_oss_tmp_1->value).extensionValue).encoded, *(void **)&((s_oss_tmp_1->value).extensionValue).decoded, (void **)&((d_oss_tmp_1->value).extensionValue).decoded);
		    ((d_oss_tmp_1->value).extensionValue).pduNum = _pduNum;
		}
	    }
	    if (s_oss_tmp_1->next)
		d_oss_tmp_1->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
	    s_oss_tmp_1 = s_oss_tmp_1->next;
	    d_oss_tmp_1 = d_oss_tmp_1->next;
	} while (s_oss_tmp_1);
    }
    return pdVal;
}


static _TAI_5GS  * _cpTAI_5GS(OssGlobal * _g, _TAI_5GS  * psVal, _TAI_5GS  * pdVal)
{
    if (!pdVal) {
	pdVal = (_TAI_5GS  *)_oss_dec_const_alloc(_g, sizeof(_TAI_5GS ));
    }
    OSS_MEMCPY(_g, pdVal, sizeof(*pdVal), psVal, sizeof(*pdVal));
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).pLMNidentity), &((*pdVal).pLMNidentity), sizeof(((*pdVal).pLMNidentity).length), sizeof(((*pdVal).pLMNidentity).value[0]), (unsigned int)((char *)&((*psVal).pLMNidentity).value - (char *)&((*psVal).pLMNidentity)));
    }
    {
	_oss_cpy_unbnd_octet_ia(_g, &((*psVal).tAC_5GS), &((*pdVal).tAC_5GS), sizeof(((*pdVal).tAC_5GS).length), sizeof(((*pdVal).tAC_5GS).value[0]), (unsigned int)((char *)&((*psVal).tAC_5GS).value - (char *)&((*psVal).tAC_5GS)));
    }
    if ((*psVal).bit_mask & 0x80000000) {
	_cp_seqof39(_g, &((*psVal).iE_Extensions), &((*pdVal).iE_Extensions));
    }
    return pdVal;
}


static int _CPSBC_AP_Containers(struct ossGlobal * _g, int pduNum, void * src, void ** pdst)
{
    int res = 0;
    void *pdVal = NULL;

    if (pduNum <= 0 || pduNum > 53)
	return PDU_RANGE;
    switch (pduNum) {
	case 1: {
	    pdVal = (_SBC_AP_PDU  *)_oss_dec_const_alloc(_g, sizeof(_SBC_AP_PDU ));
	    OSS_MEMCPY(_g, (_SBC_AP_PDU  *)pdVal, sizeof(*(_SBC_AP_PDU  *)pdVal), (_SBC_AP_PDU  *)src, sizeof(*(_SBC_AP_PDU  *)pdVal));
	    switch ((*(_SBC_AP_PDU  *)src).choice) {
		case 1: {
		    (*(_SBC_AP_PDU  *)pdVal).u.initiatingMessage = (_InitiatingMessage  *)_oss_dec_const_alloc(_g, sizeof(_InitiatingMessage ));
		    OSS_MEMCPY(_g, (*(_SBC_AP_PDU  *)pdVal).u.initiatingMessage, sizeof(*(*(_SBC_AP_PDU  *)pdVal).u.initiatingMessage), (*(_SBC_AP_PDU  *)src).u.initiatingMessage, sizeof(*(*(_SBC_AP_PDU  *)pdVal).u.initiatingMessage));
		    {
			int         _pduNum = ((*(*(_SBC_AP_PDU  *)src).u.initiatingMessage).value).pduNum;
			_oss_cpy_new_open_type(_g, &_pduNum, &((*(*(_SBC_AP_PDU  *)src).u.initiatingMessage).value).encoded, &((*(*(_SBC_AP_PDU  *)pdVal).u.initiatingMessage).value).encoded, *(void **)&((*(*(_SBC_AP_PDU  *)src).u.initiatingMessage).value).decoded, (void **)&((*(*(_SBC_AP_PDU  *)pdVal).u.initiatingMessage).value).decoded);
			((*(*(_SBC_AP_PDU  *)pdVal).u.initiatingMessage).value).pduNum = _pduNum;
		    }
		}   break;
		case 2: {
		    (*(_SBC_AP_PDU  *)pdVal).u.successfulOutcome = (_SuccessfulOutcome  *)_oss_dec_const_alloc(_g, sizeof(_SuccessfulOutcome ));
		    OSS_MEMCPY(_g, (*(_SBC_AP_PDU  *)pdVal).u.successfulOutcome, sizeof(*(*(_SBC_AP_PDU  *)pdVal).u.successfulOutcome), (*(_SBC_AP_PDU  *)src).u.successfulOutcome, sizeof(*(*(_SBC_AP_PDU  *)pdVal).u.successfulOutcome));
		    {
			int         _pduNum = ((*(*(_SBC_AP_PDU  *)src).u.successfulOutcome).value).pduNum;
			_oss_cpy_new_open_type(_g, &_pduNum, &((*(*(_SBC_AP_PDU  *)src).u.successfulOutcome).value).encoded, &((*(*(_SBC_AP_PDU  *)pdVal).u.successfulOutcome).value).encoded, *(void **)&((*(*(_SBC_AP_PDU  *)src).u.successfulOutcome).value).decoded, (void **)&((*(*(_SBC_AP_PDU  *)pdVal).u.successfulOutcome).value).decoded);
			((*(*(_SBC_AP_PDU  *)pdVal).u.successfulOutcome).value).pduNum = _pduNum;
		    }
		}   break;
		case 3: {
		    (*(_SBC_AP_PDU  *)pdVal).u.unsuccessfulOutcome = (_UnsuccessfulOutcome  *)_oss_dec_const_alloc(_g, sizeof(_UnsuccessfulOutcome ));
		    OSS_MEMCPY(_g, (*(_SBC_AP_PDU  *)pdVal).u.unsuccessfulOutcome, sizeof(*(*(_SBC_AP_PDU  *)pdVal).u.unsuccessfulOutcome), (*(_SBC_AP_PDU  *)src).u.unsuccessfulOutcome, sizeof(*(*(_SBC_AP_PDU  *)pdVal).u.unsuccessfulOutcome));
		    {
			int         _pduNum = ((*(*(_SBC_AP_PDU  *)src).u.unsuccessfulOutcome).value).pduNum;
			_oss_cpy_new_open_type(_g, &_pduNum, &((*(*(_SBC_AP_PDU  *)src).u.unsuccessfulOutcome).value).encoded, &((*(*(_SBC_AP_PDU  *)pdVal).u.unsuccessfulOutcome).value).encoded, *(void **)&((*(*(_SBC_AP_PDU  *)src).u.unsuccessfulOutcome).value).decoded, (void **)&((*(*(_SBC_AP_PDU  *)pdVal).u.unsuccessfulOutcome).value).decoded);
			((*(*(_SBC_AP_PDU  *)pdVal).u.unsuccessfulOutcome).value).pduNum = _pduNum;
		    }
		}   break;
		default:;
	    }
	} break;
	case 2: {
	    pdVal = (_Write_Replace_Warning_Request  *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Request ));
	    OSS_MEMCPY(_g, (_Write_Replace_Warning_Request  *)pdVal, sizeof(*(_Write_Replace_Warning_Request  *)pdVal), (_Write_Replace_Warning_Request  *)src, sizeof(*(_Write_Replace_Warning_Request  *)pdVal));
	    {
		(*(_Write_Replace_Warning_Request  *)pdVal).protocolIEs = NULL;
		if ((*(_Write_Replace_Warning_Request  *)src).protocolIEs) {
		    _seqof1 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Request  *)src).protocolIEs;
		    _seqof1 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Request  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof1 *)_oss_dec_getmem_internal(_g, sizeof(_seqof1));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof1), s_oss_tmp_2, sizeof(_seqof1));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof1 *)_oss_dec_getmem_internal(_g, sizeof(_seqof1));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Write_Replace_Warning_Request  *)src).bit_mask & 0x80000000) {
		(*(_Write_Replace_Warning_Request  *)pdVal).protocolExtensions = NULL;
		if ((*(_Write_Replace_Warning_Request  *)src).protocolExtensions) {
		    _seqof2 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Request  *)src).protocolExtensions;
		    _seqof2 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Request  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof2 *)_oss_dec_getmem_internal(_g, sizeof(_seqof2));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof2), s_oss_tmp_2, sizeof(_seqof2));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof2 *)_oss_dec_getmem_internal(_g, sizeof(_seqof2));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 3: {
	    pdVal = (_Write_Replace_Warning_Response  *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Response ));
	    OSS_MEMCPY(_g, (_Write_Replace_Warning_Response  *)pdVal, sizeof(*(_Write_Replace_Warning_Response  *)pdVal), (_Write_Replace_Warning_Response  *)src, sizeof(*(_Write_Replace_Warning_Response  *)pdVal));
	    {
		(*(_Write_Replace_Warning_Response  *)pdVal).protocolIEs = NULL;
		if ((*(_Write_Replace_Warning_Response  *)src).protocolIEs) {
		    _seqof3 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)src).protocolIEs;
		    _seqof3 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Response  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof3 *)_oss_dec_getmem_internal(_g, sizeof(_seqof3));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof3), s_oss_tmp_2, sizeof(_seqof3));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof3 *)_oss_dec_getmem_internal(_g, sizeof(_seqof3));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Write_Replace_Warning_Response  *)src).bit_mask & 0x80000000) {
		(*(_Write_Replace_Warning_Response  *)pdVal).protocolExtensions = NULL;
		if ((*(_Write_Replace_Warning_Response  *)src).protocolExtensions) {
		    _seqof4 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)src).protocolExtensions;
		    _seqof4 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Response  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof4 *)_oss_dec_getmem_internal(_g, sizeof(_seqof4));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof4), s_oss_tmp_2, sizeof(_seqof4));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof4 *)_oss_dec_getmem_internal(_g, sizeof(_seqof4));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 4: {
	    pdVal = (_Stop_Warning_Request  *)_oss_dec_const_alloc(_g, sizeof(_Stop_Warning_Request ));
	    OSS_MEMCPY(_g, (_Stop_Warning_Request  *)pdVal, sizeof(*(_Stop_Warning_Request  *)pdVal), (_Stop_Warning_Request  *)src, sizeof(*(_Stop_Warning_Request  *)pdVal));
	    {
		(*(_Stop_Warning_Request  *)pdVal).protocolIEs = NULL;
		if ((*(_Stop_Warning_Request  *)src).protocolIEs) {
		    _seqof5 *  s_oss_tmp_2 = (*(_Stop_Warning_Request  *)src).protocolIEs;
		    _seqof5 *  d_oss_tmp_2;

		    (*(_Stop_Warning_Request  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof5 *)_oss_dec_getmem_internal(_g, sizeof(_seqof5));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof5), s_oss_tmp_2, sizeof(_seqof5));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof5 *)_oss_dec_getmem_internal(_g, sizeof(_seqof5));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Stop_Warning_Request  *)src).bit_mask & 0x80000000) {
		(*(_Stop_Warning_Request  *)pdVal).protocolExtensions = NULL;
		if ((*(_Stop_Warning_Request  *)src).protocolExtensions) {
		    _seqof6 *  s_oss_tmp_2 = (*(_Stop_Warning_Request  *)src).protocolExtensions;
		    _seqof6 *  d_oss_tmp_2;

		    (*(_Stop_Warning_Request  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof6 *)_oss_dec_getmem_internal(_g, sizeof(_seqof6));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof6), s_oss_tmp_2, sizeof(_seqof6));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof6 *)_oss_dec_getmem_internal(_g, sizeof(_seqof6));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 5: {
	    pdVal = (_Write_Replace_Warning_Response  *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Response ));
	    OSS_MEMCPY(_g, (_Write_Replace_Warning_Response  *)pdVal, sizeof(*(_Write_Replace_Warning_Response  *)pdVal), (_Write_Replace_Warning_Response  *)src, sizeof(*(_Write_Replace_Warning_Response  *)pdVal));
	    {
		(*(_Write_Replace_Warning_Response  *)pdVal).protocolIEs = NULL;
		if ((*(_Write_Replace_Warning_Response  *)src).protocolIEs) {
		    _seqof3 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)src).protocolIEs;
		    _seqof3 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Response  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof3 *)_oss_dec_getmem_internal(_g, sizeof(_seqof3));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof3), s_oss_tmp_2, sizeof(_seqof3));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof3 *)_oss_dec_getmem_internal(_g, sizeof(_seqof3));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Write_Replace_Warning_Response  *)src).bit_mask & 0x80000000) {
		(*(_Write_Replace_Warning_Response  *)pdVal).protocolExtensions = NULL;
		if ((*(_Write_Replace_Warning_Response  *)src).protocolExtensions) {
		    _seqof4 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)src).protocolExtensions;
		    _seqof4 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Response  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof4 *)_oss_dec_getmem_internal(_g, sizeof(_seqof4));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof4), s_oss_tmp_2, sizeof(_seqof4));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof4 *)_oss_dec_getmem_internal(_g, sizeof(_seqof4));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 6: {
	    pdVal = (_Write_Replace_Warning_Indication  *)_oss_dec_const_alloc(_g, sizeof(_Write_Replace_Warning_Indication ));
	    OSS_MEMCPY(_g, (_Write_Replace_Warning_Indication  *)pdVal, sizeof(*(_Write_Replace_Warning_Indication  *)pdVal), (_Write_Replace_Warning_Indication  *)src, sizeof(*(_Write_Replace_Warning_Indication  *)pdVal));
	    {
		(*(_Write_Replace_Warning_Indication  *)pdVal).protocolIEs = NULL;
		if ((*(_Write_Replace_Warning_Indication  *)src).protocolIEs) {
		    _seqof9 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Indication  *)src).protocolIEs;
		    _seqof9 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Indication  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof9 *)_oss_dec_getmem_internal(_g, sizeof(_seqof9));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof9), s_oss_tmp_2, sizeof(_seqof9));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof9 *)_oss_dec_getmem_internal(_g, sizeof(_seqof9));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Write_Replace_Warning_Indication  *)src).bit_mask & 0x80000000) {
		(*(_Write_Replace_Warning_Indication  *)pdVal).protocolExtensions = NULL;
		if ((*(_Write_Replace_Warning_Indication  *)src).protocolExtensions) {
		    _seqof10 *  s_oss_tmp_2 = (*(_Write_Replace_Warning_Indication  *)src).protocolExtensions;
		    _seqof10 *  d_oss_tmp_2;

		    (*(_Write_Replace_Warning_Indication  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof10 *)_oss_dec_getmem_internal(_g, sizeof(_seqof10));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof10), s_oss_tmp_2, sizeof(_seqof10));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof10 *)_oss_dec_getmem_internal(_g, sizeof(_seqof10));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 7: {
	    pdVal = (_Stop_Warning_Indication  *)_oss_dec_const_alloc(_g, sizeof(_Stop_Warning_Indication ));
	    OSS_MEMCPY(_g, (_Stop_Warning_Indication  *)pdVal, sizeof(*(_Stop_Warning_Indication  *)pdVal), (_Stop_Warning_Indication  *)src, sizeof(*(_Stop_Warning_Indication  *)pdVal));
	    {
		(*(_Stop_Warning_Indication  *)pdVal).protocolIEs = NULL;
		if ((*(_Stop_Warning_Indication  *)src).protocolIEs) {
		    _seqof11 *  s_oss_tmp_2 = (*(_Stop_Warning_Indication  *)src).protocolIEs;
		    _seqof11 *  d_oss_tmp_2;

		    (*(_Stop_Warning_Indication  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof11 *)_oss_dec_getmem_internal(_g, sizeof(_seqof11));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof11), s_oss_tmp_2, sizeof(_seqof11));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof11 *)_oss_dec_getmem_internal(_g, sizeof(_seqof11));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Stop_Warning_Indication  *)src).bit_mask & 0x80000000) {
		(*(_Stop_Warning_Indication  *)pdVal).protocolExtensions = NULL;
		if ((*(_Stop_Warning_Indication  *)src).protocolExtensions) {
		    _seqof12 *  s_oss_tmp_2 = (*(_Stop_Warning_Indication  *)src).protocolExtensions;
		    _seqof12 *  d_oss_tmp_2;

		    (*(_Stop_Warning_Indication  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof12 *)_oss_dec_getmem_internal(_g, sizeof(_seqof12));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof12), s_oss_tmp_2, sizeof(_seqof12));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof12 *)_oss_dec_getmem_internal(_g, sizeof(_seqof12));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 8: {
	    pdVal = (_PWS_Restart_Indication  *)_oss_dec_const_alloc(_g, sizeof(_PWS_Restart_Indication ));
	    OSS_MEMCPY(_g, (_PWS_Restart_Indication  *)pdVal, sizeof(*(_PWS_Restart_Indication  *)pdVal), (_PWS_Restart_Indication  *)src, sizeof(*(_PWS_Restart_Indication  *)pdVal));
	    {
		(*(_PWS_Restart_Indication  *)pdVal).protocolIEs = NULL;
		if ((*(_PWS_Restart_Indication  *)src).protocolIEs) {
		    _seqof13 *  s_oss_tmp_2 = (*(_PWS_Restart_Indication  *)src).protocolIEs;
		    _seqof13 *  d_oss_tmp_2;

		    (*(_PWS_Restart_Indication  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof13 *)_oss_dec_getmem_internal(_g, sizeof(_seqof13));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof13), s_oss_tmp_2, sizeof(_seqof13));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof13 *)_oss_dec_getmem_internal(_g, sizeof(_seqof13));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_PWS_Restart_Indication  *)src).bit_mask & 0x80000000) {
		(*(_PWS_Restart_Indication  *)pdVal).protocolExtensions = NULL;
		if ((*(_PWS_Restart_Indication  *)src).protocolExtensions) {
		    _seqof14 *  s_oss_tmp_2 = (*(_PWS_Restart_Indication  *)src).protocolExtensions;
		    _seqof14 *  d_oss_tmp_2;

		    (*(_PWS_Restart_Indication  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof14 *)_oss_dec_getmem_internal(_g, sizeof(_seqof14));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof14), s_oss_tmp_2, sizeof(_seqof14));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof14 *)_oss_dec_getmem_internal(_g, sizeof(_seqof14));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 9: {
	    pdVal = (_PWS_Failure_Indication  *)_oss_dec_const_alloc(_g, sizeof(_PWS_Failure_Indication ));
	    OSS_MEMCPY(_g, (_PWS_Failure_Indication  *)pdVal, sizeof(*(_PWS_Failure_Indication  *)pdVal), (_PWS_Failure_Indication  *)src, sizeof(*(_PWS_Failure_Indication  *)pdVal));
	    {
		(*(_PWS_Failure_Indication  *)pdVal).protocolIEs = NULL;
		if ((*(_PWS_Failure_Indication  *)src).protocolIEs) {
		    _seqof15 *  s_oss_tmp_2 = (*(_PWS_Failure_Indication  *)src).protocolIEs;
		    _seqof15 *  d_oss_tmp_2;

		    (*(_PWS_Failure_Indication  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof15 *)_oss_dec_getmem_internal(_g, sizeof(_seqof15));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof15), s_oss_tmp_2, sizeof(_seqof15));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof15 *)_oss_dec_getmem_internal(_g, sizeof(_seqof15));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_PWS_Failure_Indication  *)src).bit_mask & 0x80000000) {
		(*(_PWS_Failure_Indication  *)pdVal).protocolExtensions = NULL;
		if ((*(_PWS_Failure_Indication  *)src).protocolExtensions) {
		    _seqof16 *  s_oss_tmp_2 = (*(_PWS_Failure_Indication  *)src).protocolExtensions;
		    _seqof16 *  d_oss_tmp_2;

		    (*(_PWS_Failure_Indication  *)pdVal).protocolExtensions = d_oss_tmp_2 = (_seqof16 *)_oss_dec_getmem_internal(_g, sizeof(_seqof16));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof16), s_oss_tmp_2, sizeof(_seqof16));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof16 *)_oss_dec_getmem_internal(_g, sizeof(_seqof16));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 10: {
	    pdVal = (_Error_Indication  *)_oss_dec_const_alloc(_g, sizeof(_Error_Indication ));
	    OSS_MEMCPY(_g, (_Error_Indication  *)pdVal, sizeof(*(_Error_Indication  *)pdVal), (_Error_Indication  *)src, sizeof(*(_Error_Indication  *)pdVal));
	    {
		(*(_Error_Indication  *)pdVal).protocolIEs = NULL;
		if ((*(_Error_Indication  *)src).protocolIEs) {
		    _seqof17 *  s_oss_tmp_2 = (*(_Error_Indication  *)src).protocolIEs;
		    _seqof17 *  d_oss_tmp_2;

		    (*(_Error_Indication  *)pdVal).protocolIEs = d_oss_tmp_2 = (_seqof17 *)_oss_dec_getmem_internal(_g, sizeof(_seqof17));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof17), s_oss_tmp_2, sizeof(_seqof17));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).value).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).value).encoded, &((d_oss_tmp_2->value).value).encoded, *(void **)&((s_oss_tmp_2->value).value).decoded, (void **)&((d_oss_tmp_2->value).value).decoded);
				((d_oss_tmp_2->value).value).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof17 *)_oss_dec_getmem_internal(_g, sizeof(_seqof17));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 11: {
	    pdVal = (_Broadcast_Scheduled_Area_List  *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Scheduled_Area_List ));
	    OSS_MEMCPY(_g, (_Broadcast_Scheduled_Area_List  *)pdVal, sizeof(*(_Broadcast_Scheduled_Area_List  *)pdVal), (_Broadcast_Scheduled_Area_List  *)src, sizeof(*(_Broadcast_Scheduled_Area_List  *)pdVal));
	    if ((*(_Broadcast_Scheduled_Area_List  *)src).bit_mask & 0x80000000) {
		(*(_Broadcast_Scheduled_Area_List  *)pdVal).cellId_Broadcast_List = NULL;
		if ((*(_Broadcast_Scheduled_Area_List  *)src).cellId_Broadcast_List) {
		    _CellId_Broadcast_List *  s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List  *)src).cellId_Broadcast_List;
		    _CellId_Broadcast_List *  d_oss_tmp_2;

		    (*(_Broadcast_Scheduled_Area_List  *)pdVal).cellId_Broadcast_List = d_oss_tmp_2 = (_CellId_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_CellId_Broadcast_List), s_oss_tmp_2, sizeof(_CellId_Broadcast_List));
			{
			    {
				_cpEUTRAN_CGI(_g, &((s_oss_tmp_2->value).eCGI), &((d_oss_tmp_2->value).eCGI));
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_CellId_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Scheduled_Area_List  *)src).bit_mask & 0x40000000) {
		(*(_Broadcast_Scheduled_Area_List  *)pdVal).tAI_Broadcast_List = NULL;
		if ((*(_Broadcast_Scheduled_Area_List  *)src).tAI_Broadcast_List) {
		    _TAI_Broadcast_List *  s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List  *)src).tAI_Broadcast_List;
		    _TAI_Broadcast_List *  d_oss_tmp_2;

		    (*(_Broadcast_Scheduled_Area_List  *)pdVal).tAI_Broadcast_List = d_oss_tmp_2 = (_TAI_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Broadcast_List));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_TAI_Broadcast_List), s_oss_tmp_2, sizeof(_TAI_Broadcast_List));
			{
			    {
				_cpTAI(_g, &((s_oss_tmp_2->value).tAI), &((d_oss_tmp_2->value).tAI));
			    }
			    {
				_CellId_Broadcast_List * * src_3 = &((s_oss_tmp_2->value).scheduledCellinTAI);
				_CellId_Broadcast_List * * dst_3 = &((d_oss_tmp_2->value).scheduledCellinTAI);

				*dst_3 = NULL;
				if (*src_3) {
				    _CellId_Broadcast_List *  s_oss_tmp_4 = *src_3;
				    _CellId_Broadcast_List *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_CellId_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_CellId_Broadcast_List), s_oss_tmp_4, sizeof(_CellId_Broadcast_List));
					{
					    {
						_cpEUTRAN_CGI(_g, &((s_oss_tmp_4->value).eCGI), &((d_oss_tmp_4->value).eCGI));
					    }
					    if ((s_oss_tmp_4->value).bit_mask & 0x80000000) {
						(d_oss_tmp_4->value).iE_Extensions = NULL;
						if ((s_oss_tmp_4->value).iE_Extensions) {
						    _seqof38 *  s_oss_tmp_6 = (s_oss_tmp_4->value).iE_Extensions;
						    _seqof38 *  d_oss_tmp_6;

						    (d_oss_tmp_4->value).iE_Extensions = d_oss_tmp_6 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
						    do {
							OSS_MEMCPY(_g, d_oss_tmp_6,  sizeof(_seqof38), s_oss_tmp_6, sizeof(_seqof38));
							{
							    _seq42  * src_6 = &(s_oss_tmp_6->value);
							    _seq42  * dst_6 = &(d_oss_tmp_6->value);

							    {
								int         _pduNum = ((*src_6).extensionValue).pduNum;
								_oss_cpy_new_open_type(_g, &_pduNum, &((*src_6).extensionValue).encoded, &((*dst_6).extensionValue).encoded, *(void **)&((*src_6).extensionValue).decoded, (void **)&((*dst_6).extensionValue).decoded);
								((*dst_6).extensionValue).pduNum = _pduNum;
							    }
							}
							if (s_oss_tmp_6->next)
							    d_oss_tmp_6->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
							s_oss_tmp_6 = s_oss_tmp_6->next;
							d_oss_tmp_6 = d_oss_tmp_6->next;
						    } while (s_oss_tmp_6);
						}
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_CellId_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_TAI_Broadcast_List *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Broadcast_List));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Scheduled_Area_List  *)src).bit_mask & 0x20000000) {
		_cp14EmergencyAreaID_Broadcast_(_g, &((*(_Broadcast_Scheduled_Area_List  *)src).emergencyAreaID_Broadcast_List), &((*(_Broadcast_Scheduled_Area_List  *)pdVal).emergencyAreaID_Broadcast_List));
	    }
	    if ((*(_Broadcast_Scheduled_Area_List  *)src).bit_mask & 0x10000000) {
		(*(_Broadcast_Scheduled_Area_List  *)pdVal).iE_Extensions = NULL;
		if ((*(_Broadcast_Scheduled_Area_List  *)src).iE_Extensions) {
		    _seqof38 *  s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List  *)src).iE_Extensions;
		    _seqof38 *  d_oss_tmp_2;

		    (*(_Broadcast_Scheduled_Area_List  *)pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 12: {
	    pdVal = (_Broadcast_Scheduled_Area_List_5GS  *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Scheduled_Area_List_5GS ));
	    OSS_MEMCPY(_g, (_Broadcast_Scheduled_Area_List_5GS  *)pdVal, sizeof(*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal), (_Broadcast_Scheduled_Area_List_5GS  *)src, sizeof(*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal));
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)src).bit_mask & 0x80000000) {
		(*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal).cellId_Broadcast_List_5GS = NULL;
		if ((*(_Broadcast_Scheduled_Area_List_5GS  *)src).cellId_Broadcast_List_5GS) {
		    _CellId_Broadcast_List_5GS *  s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List_5GS  *)src).cellId_Broadcast_List_5GS;
		    _CellId_Broadcast_List_5GS *  d_oss_tmp_2;

		    (*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal).cellId_Broadcast_List_5GS = d_oss_tmp_2 = (_CellId_Broadcast_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List_5GS));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_CellId_Broadcast_List_5GS), s_oss_tmp_2, sizeof(_CellId_Broadcast_List_5GS));
			{
			    {
				_cpNR_CGI(_g, &((s_oss_tmp_2->value).nR_CGI), &((d_oss_tmp_2->value).nR_CGI));
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_CellId_Broadcast_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List_5GS));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)src).bit_mask & 0x40000000) {
		(*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal).tAI_Broadcast_List_5GS = NULL;
		if ((*(_Broadcast_Scheduled_Area_List_5GS  *)src).tAI_Broadcast_List_5GS) {
		    _TAI_Broadcast_List_5GS *  s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List_5GS  *)src).tAI_Broadcast_List_5GS;
		    _TAI_Broadcast_List_5GS *  d_oss_tmp_2;

		    (*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal).tAI_Broadcast_List_5GS = d_oss_tmp_2 = (_TAI_Broadcast_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Broadcast_List_5GS));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_TAI_Broadcast_List_5GS), s_oss_tmp_2, sizeof(_TAI_Broadcast_List_5GS));
			{
			    {
				_cpTAI_5GS(_g, &((s_oss_tmp_2->value).tAI_5GS), &((d_oss_tmp_2->value).tAI_5GS));
			    }
			    {
				_CellId_Broadcast_List_5GS * * src_3 = &((s_oss_tmp_2->value).scheduledCellinTAI_5GS);
				_CellId_Broadcast_List_5GS * * dst_3 = &((d_oss_tmp_2->value).scheduledCellinTAI_5GS);

				*dst_3 = NULL;
				if (*src_3) {
				    _CellId_Broadcast_List_5GS *  s_oss_tmp_4 = *src_3;
				    _CellId_Broadcast_List_5GS *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_CellId_Broadcast_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List_5GS));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_CellId_Broadcast_List_5GS), s_oss_tmp_4, sizeof(_CellId_Broadcast_List_5GS));
					{
					    {
						_cpNR_CGI(_g, &((s_oss_tmp_4->value).nR_CGI), &((d_oss_tmp_4->value).nR_CGI));
					    }
					    if ((s_oss_tmp_4->value).bit_mask & 0x80000000) {
						(d_oss_tmp_4->value).iE_Extensions = NULL;
						if ((s_oss_tmp_4->value).iE_Extensions) {
						    _seqof38 *  s_oss_tmp_6 = (s_oss_tmp_4->value).iE_Extensions;
						    _seqof38 *  d_oss_tmp_6;

						    (d_oss_tmp_4->value).iE_Extensions = d_oss_tmp_6 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
						    do {
							OSS_MEMCPY(_g, d_oss_tmp_6,  sizeof(_seqof38), s_oss_tmp_6, sizeof(_seqof38));
							{
							    _seq42  * src_6 = &(s_oss_tmp_6->value);
							    _seq42  * dst_6 = &(d_oss_tmp_6->value);

							    {
								int         _pduNum = ((*src_6).extensionValue).pduNum;
								_oss_cpy_new_open_type(_g, &_pduNum, &((*src_6).extensionValue).encoded, &((*dst_6).extensionValue).encoded, *(void **)&((*src_6).extensionValue).decoded, (void **)&((*dst_6).extensionValue).decoded);
								((*dst_6).extensionValue).pduNum = _pduNum;
							    }
							}
							if (s_oss_tmp_6->next)
							    d_oss_tmp_6->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
							s_oss_tmp_6 = s_oss_tmp_6->next;
							d_oss_tmp_6 = d_oss_tmp_6->next;
						    } while (s_oss_tmp_6);
						}
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_CellId_Broadcast_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellId_Broadcast_List_5GS));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_TAI_Broadcast_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Broadcast_List_5GS));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)src).bit_mask & 0x20000000) {
		_cp14EmergencyAreaID_Broadcast_(_g, &((*(_Broadcast_Scheduled_Area_List_5GS  *)src).emergencyAreaID_Broadcast_List), &((*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal).emergencyAreaID_Broadcast_List));
	    }
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)src).bit_mask & 0x10000000) {
		(*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal).iE_Extensions = NULL;
		if ((*(_Broadcast_Scheduled_Area_List_5GS  *)src).iE_Extensions) {
		    _seqof38 *  s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List_5GS  *)src).iE_Extensions;
		    _seqof38 *  d_oss_tmp_2;

		    (*(_Broadcast_Scheduled_Area_List_5GS  *)pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 13: {
	    pdVal = (_Broadcast_Cancelled_Area_List  *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Cancelled_Area_List ));
	    OSS_MEMCPY(_g, (_Broadcast_Cancelled_Area_List  *)pdVal, sizeof(*(_Broadcast_Cancelled_Area_List  *)pdVal), (_Broadcast_Cancelled_Area_List  *)src, sizeof(*(_Broadcast_Cancelled_Area_List  *)pdVal));
	    if ((*(_Broadcast_Cancelled_Area_List  *)src).bit_mask & 0x80000000) {
		(*(_Broadcast_Cancelled_Area_List  *)pdVal).cellID_Cancelled_List = NULL;
		if ((*(_Broadcast_Cancelled_Area_List  *)src).cellID_Cancelled_List) {
		    _CellID_Cancelled_List *  s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List  *)src).cellID_Cancelled_List;
		    _CellID_Cancelled_List *  d_oss_tmp_2;

		    (*(_Broadcast_Cancelled_Area_List  *)pdVal).cellID_Cancelled_List = d_oss_tmp_2 = (_CellID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_CellID_Cancelled_List), s_oss_tmp_2, sizeof(_CellID_Cancelled_List));
			{
			    {
				_cpEUTRAN_CGI(_g, &((s_oss_tmp_2->value).eCGI), &((d_oss_tmp_2->value).eCGI));
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_CellID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Cancelled_Area_List  *)src).bit_mask & 0x40000000) {
		(*(_Broadcast_Cancelled_Area_List  *)pdVal).tAI_Cancelled_List = NULL;
		if ((*(_Broadcast_Cancelled_Area_List  *)src).tAI_Cancelled_List) {
		    _TAI_Cancelled_List *  s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List  *)src).tAI_Cancelled_List;
		    _TAI_Cancelled_List *  d_oss_tmp_2;

		    (*(_Broadcast_Cancelled_Area_List  *)pdVal).tAI_Cancelled_List = d_oss_tmp_2 = (_TAI_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Cancelled_List));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_TAI_Cancelled_List), s_oss_tmp_2, sizeof(_TAI_Cancelled_List));
			{
			    {
				_cpTAI(_g, &((s_oss_tmp_2->value).tAI), &((d_oss_tmp_2->value).tAI));
			    }
			    {
				_CellID_Cancelled_List * * src_3 = &((s_oss_tmp_2->value).cancelledCellinTAI);
				_CellID_Cancelled_List * * dst_3 = &((d_oss_tmp_2->value).cancelledCellinTAI);

				*dst_3 = NULL;
				if (*src_3) {
				    _CellID_Cancelled_List *  s_oss_tmp_4 = *src_3;
				    _CellID_Cancelled_List *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_CellID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_CellID_Cancelled_List), s_oss_tmp_4, sizeof(_CellID_Cancelled_List));
					{
					    {
						_cpEUTRAN_CGI(_g, &((s_oss_tmp_4->value).eCGI), &((d_oss_tmp_4->value).eCGI));
					    }
					    if ((s_oss_tmp_4->value).bit_mask & 0x80000000) {
						(d_oss_tmp_4->value).iE_Extensions = NULL;
						if ((s_oss_tmp_4->value).iE_Extensions) {
						    _seqof38 *  s_oss_tmp_6 = (s_oss_tmp_4->value).iE_Extensions;
						    _seqof38 *  d_oss_tmp_6;

						    (d_oss_tmp_4->value).iE_Extensions = d_oss_tmp_6 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
						    do {
							OSS_MEMCPY(_g, d_oss_tmp_6,  sizeof(_seqof38), s_oss_tmp_6, sizeof(_seqof38));
							{
							    _seq42  * src_6 = &(s_oss_tmp_6->value);
							    _seq42  * dst_6 = &(d_oss_tmp_6->value);

							    {
								int         _pduNum = ((*src_6).extensionValue).pduNum;
								_oss_cpy_new_open_type(_g, &_pduNum, &((*src_6).extensionValue).encoded, &((*dst_6).extensionValue).encoded, *(void **)&((*src_6).extensionValue).decoded, (void **)&((*dst_6).extensionValue).decoded);
								((*dst_6).extensionValue).pduNum = _pduNum;
							    }
							}
							if (s_oss_tmp_6->next)
							    d_oss_tmp_6->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
							s_oss_tmp_6 = s_oss_tmp_6->next;
							d_oss_tmp_6 = d_oss_tmp_6->next;
						    } while (s_oss_tmp_6);
						}
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_CellID_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_TAI_Cancelled_List *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Cancelled_List));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Cancelled_Area_List  *)src).bit_mask & 0x20000000) {
		_cp16EmergencyAreaID_Cancelled_(_g, &((*(_Broadcast_Cancelled_Area_List  *)src).emergencyAreaID_Cancelled_List), &((*(_Broadcast_Cancelled_Area_List  *)pdVal).emergencyAreaID_Cancelled_List));
	    }
	    if ((*(_Broadcast_Cancelled_Area_List  *)src).bit_mask & 0x10000000) {
		(*(_Broadcast_Cancelled_Area_List  *)pdVal).iE_Extensions = NULL;
		if ((*(_Broadcast_Cancelled_Area_List  *)src).iE_Extensions) {
		    _seqof38 *  s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List  *)src).iE_Extensions;
		    _seqof38 *  d_oss_tmp_2;

		    (*(_Broadcast_Cancelled_Area_List  *)pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 14: {
	    pdVal = (_Broadcast_Cancelled_Area_List_5GS  *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Cancelled_Area_List_5GS ));
	    OSS_MEMCPY(_g, (_Broadcast_Cancelled_Area_List_5GS  *)pdVal, sizeof(*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal), (_Broadcast_Cancelled_Area_List_5GS  *)src, sizeof(*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal));
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)src).bit_mask & 0x80000000) {
		(*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal).cellID_Cancelled_List_5GS = NULL;
		if ((*(_Broadcast_Cancelled_Area_List_5GS  *)src).cellID_Cancelled_List_5GS) {
		    _CellID_Cancelled_List_5GS *  s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List_5GS  *)src).cellID_Cancelled_List_5GS;
		    _CellID_Cancelled_List_5GS *  d_oss_tmp_2;

		    (*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal).cellID_Cancelled_List_5GS = d_oss_tmp_2 = (_CellID_Cancelled_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List_5GS));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_CellID_Cancelled_List_5GS), s_oss_tmp_2, sizeof(_CellID_Cancelled_List_5GS));
			{
			    {
				_cpNR_CGI(_g, &((s_oss_tmp_2->value).nR_CGI), &((d_oss_tmp_2->value).nR_CGI));
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_CellID_Cancelled_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List_5GS));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)src).bit_mask & 0x40000000) {
		(*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal).tAI_Cancelled_List_5GS = NULL;
		if ((*(_Broadcast_Cancelled_Area_List_5GS  *)src).tAI_Cancelled_List_5GS) {
		    _TAI_Cancelled_List_5GS *  s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List_5GS  *)src).tAI_Cancelled_List_5GS;
		    _TAI_Cancelled_List_5GS *  d_oss_tmp_2;

		    (*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal).tAI_Cancelled_List_5GS = d_oss_tmp_2 = (_TAI_Cancelled_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Cancelled_List_5GS));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_TAI_Cancelled_List_5GS), s_oss_tmp_2, sizeof(_TAI_Cancelled_List_5GS));
			{
			    {
				_cpTAI_5GS(_g, &((s_oss_tmp_2->value).tAI_5GS), &((d_oss_tmp_2->value).tAI_5GS));
			    }
			    {
				_CellID_Cancelled_List_5GS * * src_3 = &((s_oss_tmp_2->value).cancelledCellinTAI_5GS);
				_CellID_Cancelled_List_5GS * * dst_3 = &((d_oss_tmp_2->value).cancelledCellinTAI_5GS);

				*dst_3 = NULL;
				if (*src_3) {
				    _CellID_Cancelled_List_5GS *  s_oss_tmp_4 = *src_3;
				    _CellID_Cancelled_List_5GS *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_CellID_Cancelled_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List_5GS));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_CellID_Cancelled_List_5GS), s_oss_tmp_4, sizeof(_CellID_Cancelled_List_5GS));
					{
					    {
						_cpNR_CGI(_g, &((s_oss_tmp_4->value).nR_CGI), &((d_oss_tmp_4->value).nR_CGI));
					    }
					    if ((s_oss_tmp_4->value).bit_mask & 0x80000000) {
						(d_oss_tmp_4->value).iE_Extensions = NULL;
						if ((s_oss_tmp_4->value).iE_Extensions) {
						    _seqof38 *  s_oss_tmp_6 = (s_oss_tmp_4->value).iE_Extensions;
						    _seqof38 *  d_oss_tmp_6;

						    (d_oss_tmp_4->value).iE_Extensions = d_oss_tmp_6 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
						    do {
							OSS_MEMCPY(_g, d_oss_tmp_6,  sizeof(_seqof38), s_oss_tmp_6, sizeof(_seqof38));
							{
							    _seq42  * src_6 = &(s_oss_tmp_6->value);
							    _seq42  * dst_6 = &(d_oss_tmp_6->value);

							    {
								int         _pduNum = ((*src_6).extensionValue).pduNum;
								_oss_cpy_new_open_type(_g, &_pduNum, &((*src_6).extensionValue).encoded, &((*dst_6).extensionValue).encoded, *(void **)&((*src_6).extensionValue).decoded, (void **)&((*dst_6).extensionValue).decoded);
								((*dst_6).extensionValue).pduNum = _pduNum;
							    }
							}
							if (s_oss_tmp_6->next)
							    d_oss_tmp_6->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
							s_oss_tmp_6 = s_oss_tmp_6->next;
							d_oss_tmp_6 = d_oss_tmp_6->next;
						    } while (s_oss_tmp_6);
						}
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_CellID_Cancelled_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_CellID_Cancelled_List_5GS));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_TAI_Cancelled_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_TAI_Cancelled_List_5GS));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)src).bit_mask & 0x20000000) {
		_cp16EmergencyAreaID_Cancelled_(_g, &((*(_Broadcast_Cancelled_Area_List_5GS  *)src).emergencyAreaID_Cancelled_List), &((*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal).emergencyAreaID_Cancelled_List));
	    }
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)src).bit_mask & 0x10000000) {
		(*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal).iE_Extensions = NULL;
		if ((*(_Broadcast_Cancelled_Area_List_5GS  *)src).iE_Extensions) {
		    _seqof38 *  s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List_5GS  *)src).iE_Extensions;
		    _seqof38 *  d_oss_tmp_2;

		    (*(_Broadcast_Cancelled_Area_List_5GS  *)pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 15: {
	    pdVal = (_Broadcast_Empty_Area_List * *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Empty_Area_List *));
	    *(_Broadcast_Empty_Area_List * *)pdVal = NULL;
	    if (*(_Broadcast_Empty_Area_List * *)src) {
		_Broadcast_Empty_Area_List *  s_oss_tmp_1 = *(_Broadcast_Empty_Area_List * *)src;
		_Broadcast_Empty_Area_List *  d_oss_tmp_1;

		*(_Broadcast_Empty_Area_List * *)pdVal = d_oss_tmp_1 = (_Broadcast_Empty_Area_List *)_oss_dec_getmem_internal(_g, sizeof(_Broadcast_Empty_Area_List));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_Broadcast_Empty_Area_List), s_oss_tmp_1, sizeof(_Broadcast_Empty_Area_List));
		    {
			_cpGlobal_ENB_ID(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_Broadcast_Empty_Area_List *)_oss_dec_getmem_internal(_g, sizeof(_Broadcast_Empty_Area_List));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 16: {
	    pdVal = (_Broadcast_Empty_Area_List_5GS * *)_oss_dec_const_alloc(_g, sizeof(_Broadcast_Empty_Area_List_5GS *));
	    *(_Broadcast_Empty_Area_List_5GS * *)pdVal = NULL;
	    if (*(_Broadcast_Empty_Area_List_5GS * *)src) {
		_Broadcast_Empty_Area_List_5GS *  s_oss_tmp_1 = *(_Broadcast_Empty_Area_List_5GS * *)src;
		_Broadcast_Empty_Area_List_5GS *  d_oss_tmp_1;

		*(_Broadcast_Empty_Area_List_5GS * *)pdVal = d_oss_tmp_1 = (_Broadcast_Empty_Area_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_Broadcast_Empty_Area_List_5GS));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_Broadcast_Empty_Area_List_5GS), s_oss_tmp_1, sizeof(_Broadcast_Empty_Area_List_5GS));
		    {
			_cpGlobal_RAN_Node_ID(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_Broadcast_Empty_Area_List_5GS *)_oss_dec_getmem_internal(_g, sizeof(_Broadcast_Empty_Area_List_5GS));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 17: {
	    pdVal = (OSS_UINT32  *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32 ));
	    *(OSS_UINT32  *)pdVal = *(OSS_UINT32  *)src;
	} break;
	case 18: {
	    pdVal = (enum Concurrent_Warning_Message_Indicator  *)_oss_dec_const_alloc(_g, sizeof(enum Concurrent_Warning_Message_Indicator ));
	    *(enum Concurrent_Warning_Message_Indicator  *)pdVal = *(enum Concurrent_Warning_Message_Indicator  *)src;
	} break;
	case 19: {
	    pdVal = (_Criticality_Diagnostics  *)_oss_dec_const_alloc(_g, sizeof(_Criticality_Diagnostics ));
	    OSS_MEMCPY(_g, (_Criticality_Diagnostics  *)pdVal, sizeof(*(_Criticality_Diagnostics  *)pdVal), (_Criticality_Diagnostics  *)src, sizeof(*(_Criticality_Diagnostics  *)pdVal));
	    if ((*(_Criticality_Diagnostics  *)src).bit_mask & 0x10000000) {
		(*(_Criticality_Diagnostics  *)pdVal).iE_CriticalityDiagnostics = NULL;
		if ((*(_Criticality_Diagnostics  *)src).iE_CriticalityDiagnostics) {
		    _CriticalityDiagnostics_IE_List *  s_oss_tmp_2 = (*(_Criticality_Diagnostics  *)src).iE_CriticalityDiagnostics;
		    _CriticalityDiagnostics_IE_List *  d_oss_tmp_2;

		    (*(_Criticality_Diagnostics  *)pdVal).iE_CriticalityDiagnostics = d_oss_tmp_2 = (_CriticalityDiagnostics_IE_List *)_oss_dec_getmem_internal(_g, sizeof(_CriticalityDiagnostics_IE_List));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_CriticalityDiagnostics_IE_List), s_oss_tmp_2, sizeof(_CriticalityDiagnostics_IE_List));
			{
			    if ((s_oss_tmp_2->value).bit_mask & 0x80000000) {
				_seqof38 * * src_3 = &((s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * dst_3 = &((d_oss_tmp_2->value).iE_Extensions);

				*dst_3 = NULL;
				if (*src_3) {
				    _seqof38 *  s_oss_tmp_4 = *src_3;
				    _seqof38 *  d_oss_tmp_4;

				    *dst_3 = d_oss_tmp_4 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
				    do {
					OSS_MEMCPY(_g, d_oss_tmp_4,  sizeof(_seqof38), s_oss_tmp_4, sizeof(_seqof38));
					{
					    {
						int         _pduNum = ((s_oss_tmp_4->value).extensionValue).pduNum;
						_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_4->value).extensionValue).encoded, &((d_oss_tmp_4->value).extensionValue).encoded, *(void **)&((s_oss_tmp_4->value).extensionValue).decoded, (void **)&((d_oss_tmp_4->value).extensionValue).decoded);
						((d_oss_tmp_4->value).extensionValue).pduNum = _pduNum;
					    }
					}
					if (s_oss_tmp_4->next)
					    d_oss_tmp_4->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
					s_oss_tmp_4 = s_oss_tmp_4->next;
					d_oss_tmp_4 = d_oss_tmp_4->next;
				    } while (s_oss_tmp_4);
				}
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_CriticalityDiagnostics_IE_List *)_oss_dec_getmem_internal(_g, sizeof(_CriticalityDiagnostics_IE_List));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	    if ((*(_Criticality_Diagnostics  *)src).bit_mask & 0x8000000) {
		(*(_Criticality_Diagnostics  *)pdVal).iE_Extensions = NULL;
		if ((*(_Criticality_Diagnostics  *)src).iE_Extensions) {
		    _seqof38 *  s_oss_tmp_2 = (*(_Criticality_Diagnostics  *)src).iE_Extensions;
		    _seqof38 *  d_oss_tmp_2;

		    (*(_Criticality_Diagnostics  *)pdVal).iE_Extensions = d_oss_tmp_2 = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
		    do {
			OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_seqof38), s_oss_tmp_2, sizeof(_seqof38));
			{
			    {
				int         _pduNum = ((s_oss_tmp_2->value).extensionValue).pduNum;
				_oss_cpy_new_open_type(_g, &_pduNum, &((s_oss_tmp_2->value).extensionValue).encoded, &((d_oss_tmp_2->value).extensionValue).encoded, *(void **)&((s_oss_tmp_2->value).extensionValue).decoded, (void **)&((d_oss_tmp_2->value).extensionValue).decoded);
				((d_oss_tmp_2->value).extensionValue).pduNum = _pduNum;
			    }
			}
			if (s_oss_tmp_2->next)
			    d_oss_tmp_2->next = (_seqof38 *)_oss_dec_getmem_internal(_g, sizeof(_seqof38));
			s_oss_tmp_2 = s_oss_tmp_2->next;
			d_oss_tmp_2 = d_oss_tmp_2->next;
		    } while (s_oss_tmp_2);
		}
	    }
	} break;
	case 20: {
	    pdVal = (OSSC::COssBitString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssBitString  *)src, (OSSC::COssBitString  *)pdVal, sizeof((*(OSSC::COssBitString  *)pdVal).length), -1L, (unsigned int)((char *)&(*(OSSC::COssBitString  *)src).value - (char *)(OSSC::COssBitString  *)src));
	} break;
	case 21: {
	    pdVal = (OSS_UINT32  *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32 ));
	    *(OSS_UINT32  *)pdVal = *(OSS_UINT32  *)src;
	} break;
	case 22: {
	    pdVal = (_ECGIList * *)_oss_dec_const_alloc(_g, sizeof(_ECGIList *));
	    *(_ECGIList * *)pdVal = NULL;
	    if (*(_ECGIList * *)src) {
		_ECGIList *  s_oss_tmp_1 = *(_ECGIList * *)src;
		_ECGIList *  d_oss_tmp_1;

		*(_ECGIList * *)pdVal = d_oss_tmp_1 = (_ECGIList *)_oss_dec_getmem_internal(_g, sizeof(_ECGIList));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_ECGIList), s_oss_tmp_1, sizeof(_ECGIList));
		    {
			_cpEUTRAN_CGI(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_ECGIList *)_oss_dec_getmem_internal(_g, sizeof(_ECGIList));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 23: {
	    pdVal = (_NR_CGIList * *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList *));
	    *(_NR_CGIList * *)pdVal = NULL;
	    if (*(_NR_CGIList * *)src) {
		_NR_CGIList *  s_oss_tmp_1 = *(_NR_CGIList * *)src;
		_NR_CGIList *  d_oss_tmp_1;

		*(_NR_CGIList * *)pdVal = d_oss_tmp_1 = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_NR_CGIList), s_oss_tmp_1, sizeof(_NR_CGIList));
		    {
			_cpNR_CGI(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 24: {
	    pdVal = _cpGlobal_ENB_ID(_g, (_Global_ENB_ID  *)src, (_Global_ENB_ID  *)pdVal);
	} break;
	case 25: {
	    pdVal = _cpGlobal_RAN_Node_ID(_g, (_Global_RAN_Node_ID  *)src, (_Global_RAN_Node_ID  *)pdVal);
	} break;
	case 26: {
	    pdVal = _cpGlobal_GNB_ID(_g, (_Global_GNB_ID  *)src, (_Global_GNB_ID  *)pdVal);
	} break;
	case 27: {
	    pdVal = (_List_of_TAIs * *)_oss_dec_const_alloc(_g, sizeof(_List_of_TAIs *));
	    *(_List_of_TAIs * *)pdVal = NULL;
	    if (*(_List_of_TAIs * *)src) {
		_List_of_TAIs *  s_oss_tmp_1 = *(_List_of_TAIs * *)src;
		_List_of_TAIs *  d_oss_tmp_1;

		*(_List_of_TAIs * *)pdVal = d_oss_tmp_1 = (_List_of_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_TAIs));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_List_of_TAIs), s_oss_tmp_1, sizeof(_List_of_TAIs));
		    {
			_cp_seq43(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_List_of_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_TAIs));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 28: {
	    pdVal = (_List_of_TAIs * *)_oss_dec_const_alloc(_g, sizeof(_List_of_TAIs *));
	    *(_List_of_TAIs * *)pdVal = NULL;
	    if (*(_List_of_TAIs * *)src) {
		_List_of_TAIs *  s_oss_tmp_1 = *(_List_of_TAIs * *)src;
		_List_of_TAIs *  d_oss_tmp_1;

		*(_List_of_TAIs * *)pdVal = d_oss_tmp_1 = (_List_of_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_TAIs));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_List_of_TAIs), s_oss_tmp_1, sizeof(_List_of_TAIs));
		    {
			_cp_seq43(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_List_of_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_TAIs));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 29: {
	    pdVal = (_Emergency_Area_ID_List * *)_oss_dec_const_alloc(_g, sizeof(_Emergency_Area_ID_List *));
	    *(_Emergency_Area_ID_List * *)pdVal = NULL;
	    if (*(_Emergency_Area_ID_List * *)src) {
		_Emergency_Area_ID_List *  s_oss_tmp_1 = *(_Emergency_Area_ID_List * *)src;
		_Emergency_Area_ID_List *  d_oss_tmp_1;

		*(_Emergency_Area_ID_List * *)pdVal = d_oss_tmp_1 = (_Emergency_Area_ID_List *)_oss_dec_getmem_internal(_g, sizeof(_Emergency_Area_ID_List));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_Emergency_Area_ID_List), s_oss_tmp_1, sizeof(_Emergency_Area_ID_List));
		    {
			_oss_cpy_unbnd_octet_ia(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value), sizeof((d_oss_tmp_1->value).length), sizeof((d_oss_tmp_1->value).value[0]), (unsigned int)((char *)&(s_oss_tmp_1->value).value - (char *)&(s_oss_tmp_1->value)));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_Emergency_Area_ID_List *)_oss_dec_getmem_internal(_g, sizeof(_Emergency_Area_ID_List));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 30: {
	    pdVal = (_List_of_5GS_TAIs * *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs *));
	    *(_List_of_5GS_TAIs * *)pdVal = NULL;
	    if (*(_List_of_5GS_TAIs * *)src) {
		_List_of_5GS_TAIs *  s_oss_tmp_1 = *(_List_of_5GS_TAIs * *)src;
		_List_of_5GS_TAIs *  d_oss_tmp_1;

		*(_List_of_5GS_TAIs * *)pdVal = d_oss_tmp_1 = (_List_of_5GS_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_5GS_TAIs));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_List_of_5GS_TAIs), s_oss_tmp_1, sizeof(_List_of_5GS_TAIs));
		    {
			_cpTAI_5GS(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_List_of_5GS_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_5GS_TAIs));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 31: {
	    pdVal = (_NR_CGIList * *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList *));
	    *(_NR_CGIList * *)pdVal = NULL;
	    if (*(_NR_CGIList * *)src) {
		_NR_CGIList *  s_oss_tmp_1 = *(_NR_CGIList * *)src;
		_NR_CGIList *  d_oss_tmp_1;

		*(_NR_CGIList * *)pdVal = d_oss_tmp_1 = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_NR_CGIList), s_oss_tmp_1, sizeof(_NR_CGIList));
		    {
			_cpNR_CGI(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 32: {
	    pdVal = (_List_of_5GS_TAIs * *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs *));
	    *(_List_of_5GS_TAIs * *)pdVal = NULL;
	    if (*(_List_of_5GS_TAIs * *)src) {
		_List_of_5GS_TAIs *  s_oss_tmp_1 = *(_List_of_5GS_TAIs * *)src;
		_List_of_5GS_TAIs *  d_oss_tmp_1;

		*(_List_of_5GS_TAIs * *)pdVal = d_oss_tmp_1 = (_List_of_5GS_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_5GS_TAIs));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_List_of_5GS_TAIs), s_oss_tmp_1, sizeof(_List_of_5GS_TAIs));
		    {
			_cpTAI_5GS(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_List_of_5GS_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_5GS_TAIs));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 33: {
	    pdVal = (OSSC::COssBitString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssBitString  *)src, (OSSC::COssBitString  *)pdVal, sizeof((*(OSSC::COssBitString  *)pdVal).length), -1L, (unsigned int)((char *)&(*(OSSC::COssBitString  *)src).value - (char *)(OSSC::COssBitString  *)src));
	} break;
	case 34: {
	    pdVal = (OSS_UINT32  *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32 ));
	    *(OSS_UINT32  *)pdVal = *(OSS_UINT32  *)src;
	} break;
	case 35: {
	    pdVal = (_NgENB_ID  *)_oss_dec_const_alloc(_g, sizeof(_NgENB_ID ));
	    OSS_MEMCPY(_g, (_NgENB_ID  *)pdVal, sizeof(*(_NgENB_ID  *)pdVal), (_NgENB_ID  *)src, sizeof(*(_NgENB_ID  *)pdVal));
	    switch ((*(_NgENB_ID  *)src).choice) {
		case 1: {
		    _oss_cpy_unbnd_octet_ia(_g, &((*(_NgENB_ID  *)src).u.macroNgENB_ID), &((*(_NgENB_ID  *)pdVal).u.macroNgENB_ID), sizeof(((*(_NgENB_ID  *)pdVal).u.macroNgENB_ID).length), -1L, (unsigned int)((char *)&((*(_NgENB_ID  *)src).u.macroNgENB_ID).value - (char *)&((*(_NgENB_ID  *)src).u.macroNgENB_ID)));
		}   break;
		case 2: {
		    _oss_cpy_unbnd_octet_ia(_g, &((*(_NgENB_ID  *)src).u.shortMacroNgENB_ID), &((*(_NgENB_ID  *)pdVal).u.shortMacroNgENB_ID), sizeof(((*(_NgENB_ID  *)pdVal).u.shortMacroNgENB_ID).length), -1L, (unsigned int)((char *)&((*(_NgENB_ID  *)src).u.shortMacroNgENB_ID).value - (char *)&((*(_NgENB_ID  *)src).u.shortMacroNgENB_ID)));
		}   break;
		case 3: {
		    _oss_cpy_unbnd_octet_ia(_g, &((*(_NgENB_ID  *)src).u.longMacroNgENB_ID), &((*(_NgENB_ID  *)pdVal).u.longMacroNgENB_ID), sizeof(((*(_NgENB_ID  *)pdVal).u.longMacroNgENB_ID).length), -1L, (unsigned int)((char *)&((*(_NgENB_ID  *)src).u.longMacroNgENB_ID).value - (char *)&((*(_NgENB_ID  *)src).u.longMacroNgENB_ID)));
		}   break;
		default:;
	    }
	} break;
	case 36: {
	    pdVal = (OSSC::COssString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssString  *)src, (OSSC::COssString  *)pdVal, sizeof((*(OSSC::COssString  *)pdVal).length), sizeof((*(OSSC::COssString  *)pdVal).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)src).value - (char *)(OSSC::COssString  *)src));
	} break;
	case 37: {
	    pdVal = (OSS_UINT32  *)_oss_dec_const_alloc(_g, sizeof(OSS_UINT32 ));
	    *(OSS_UINT32  *)pdVal = *(OSS_UINT32  *)src;
	} break;
	case 38: {
	    pdVal = (_ECGIList * *)_oss_dec_const_alloc(_g, sizeof(_ECGIList *));
	    *(_ECGIList * *)pdVal = NULL;
	    if (*(_ECGIList * *)src) {
		_ECGIList *  s_oss_tmp_1 = *(_ECGIList * *)src;
		_ECGIList *  d_oss_tmp_1;

		*(_ECGIList * *)pdVal = d_oss_tmp_1 = (_ECGIList *)_oss_dec_getmem_internal(_g, sizeof(_ECGIList));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_ECGIList), s_oss_tmp_1, sizeof(_ECGIList));
		    {
			_cpEUTRAN_CGI(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_ECGIList *)_oss_dec_getmem_internal(_g, sizeof(_ECGIList));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 39: {
	    pdVal = (enum RAT_Selector_5GS  *)_oss_dec_const_alloc(_g, sizeof(enum RAT_Selector_5GS ));
	    *(enum RAT_Selector_5GS  *)pdVal = *(enum RAT_Selector_5GS  *)src;
	} break;
	case 40: {
	    pdVal = (_NR_CGIList * *)_oss_dec_const_alloc(_g, sizeof(_NR_CGIList *));
	    *(_NR_CGIList * *)pdVal = NULL;
	    if (*(_NR_CGIList * *)src) {
		_NR_CGIList *  s_oss_tmp_1 = *(_NR_CGIList * *)src;
		_NR_CGIList *  d_oss_tmp_1;

		*(_NR_CGIList * *)pdVal = d_oss_tmp_1 = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_NR_CGIList), s_oss_tmp_1, sizeof(_NR_CGIList));
		    {
			_cpNR_CGI(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 41: {
	    pdVal = (enum Send_Write_Replace_Warning_Indication  *)_oss_dec_const_alloc(_g, sizeof(enum Send_Write_Replace_Warning_Indication ));
	    *(enum Send_Write_Replace_Warning_Indication  *)pdVal = *(enum Send_Write_Replace_Warning_Indication  *)src;
	} break;
	case 42: {
	    pdVal = (enum Send_Stop_Warning_Indication  *)_oss_dec_const_alloc(_g, sizeof(enum Send_Stop_Warning_Indication ));
	    *(enum Send_Stop_Warning_Indication  *)pdVal = *(enum Send_Stop_Warning_Indication  *)src;
	} break;
	case 43: {
	    pdVal = (OSSC::COssBitString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssBitString  *)src, (OSSC::COssBitString  *)pdVal, sizeof((*(OSSC::COssBitString  *)pdVal).length), -1L, (unsigned int)((char *)&(*(OSSC::COssBitString  *)src).value - (char *)(OSSC::COssBitString  *)src));
	} break;
	case 44: {
	    pdVal = (enum Stop_All_Indicator  *)_oss_dec_const_alloc(_g, sizeof(enum Stop_All_Indicator ));
	    *(enum Stop_All_Indicator  *)pdVal = *(enum Stop_All_Indicator  *)src;
	} break;
	case 45: {
	    pdVal = (_TAI_List_for_Warning * *)_oss_dec_const_alloc(_g, sizeof(_TAI_List_for_Warning *));
	    *(_TAI_List_for_Warning * *)pdVal = NULL;
	    if (*(_TAI_List_for_Warning * *)src) {
		_TAI_List_for_Warning *  s_oss_tmp_1 = *(_TAI_List_for_Warning * *)src;
		_TAI_List_for_Warning *  d_oss_tmp_1;

		*(_TAI_List_for_Warning * *)pdVal = d_oss_tmp_1 = (_TAI_List_for_Warning *)_oss_dec_getmem_internal(_g, sizeof(_TAI_List_for_Warning));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_TAI_List_for_Warning), s_oss_tmp_1, sizeof(_TAI_List_for_Warning));
		    {
			_cpTAI(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_TAI_List_for_Warning *)_oss_dec_getmem_internal(_g, sizeof(_TAI_List_for_Warning));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 46: {
	    pdVal = (_List_of_5GS_TAIs * *)_oss_dec_const_alloc(_g, sizeof(_List_of_5GS_TAIs *));
	    *(_List_of_5GS_TAIs * *)pdVal = NULL;
	    if (*(_List_of_5GS_TAIs * *)src) {
		_List_of_5GS_TAIs *  s_oss_tmp_1 = *(_List_of_5GS_TAIs * *)src;
		_List_of_5GS_TAIs *  d_oss_tmp_1;

		*(_List_of_5GS_TAIs * *)pdVal = d_oss_tmp_1 = (_List_of_5GS_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_5GS_TAIs));
		do {
		    OSS_MEMCPY(_g, d_oss_tmp_1,  sizeof(_List_of_5GS_TAIs), s_oss_tmp_1, sizeof(_List_of_5GS_TAIs));
		    {
			_cpTAI_5GS(_g, &(s_oss_tmp_1->value), &(d_oss_tmp_1->value));
		    }
		    if (s_oss_tmp_1->next)
			d_oss_tmp_1->next = (_List_of_5GS_TAIs *)_oss_dec_getmem_internal(_g, sizeof(_List_of_5GS_TAIs));
		    s_oss_tmp_1 = s_oss_tmp_1->next;
		    d_oss_tmp_1 = d_oss_tmp_1->next;
		} while (s_oss_tmp_1);
	    }
	} break;
	case 47: {
	    pdVal = (_Warning_Area_List  *)_oss_dec_const_alloc(_g, sizeof(_Warning_Area_List ));
	    OSS_MEMCPY(_g, (_Warning_Area_List  *)pdVal, sizeof(*(_Warning_Area_List  *)pdVal), (_Warning_Area_List  *)src, sizeof(*(_Warning_Area_List  *)pdVal));
	    switch ((*(_Warning_Area_List  *)src).choice) {
		case 1: {
		    _cpECGIList(_g, &((*(_Warning_Area_List  *)src).u.cell_ID_List), &((*(_Warning_Area_List  *)pdVal).u.cell_ID_List));
		}   break;
		case 2: {
		    (*(_Warning_Area_List  *)pdVal).u.tracking_Area_List_for_Warning = NULL;
		    if ((*(_Warning_Area_List  *)src).u.tracking_Area_List_for_Warning) {
			_TAI_List_for_Warning *  s_oss_tmp_2 = (*(_Warning_Area_List  *)src).u.tracking_Area_List_for_Warning;
			_TAI_List_for_Warning *  d_oss_tmp_2;

			(*(_Warning_Area_List  *)pdVal).u.tracking_Area_List_for_Warning = d_oss_tmp_2 = (_TAI_List_for_Warning *)_oss_dec_getmem_internal(_g, sizeof(_TAI_List_for_Warning));
			do {
			    OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_TAI_List_for_Warning), s_oss_tmp_2, sizeof(_TAI_List_for_Warning));
			    {
				_cpTAI(_g, &(s_oss_tmp_2->value), &(d_oss_tmp_2->value));
			    }
			    if (s_oss_tmp_2->next)
				d_oss_tmp_2->next = (_TAI_List_for_Warning *)_oss_dec_getmem_internal(_g, sizeof(_TAI_List_for_Warning));
			    s_oss_tmp_2 = s_oss_tmp_2->next;
			    d_oss_tmp_2 = d_oss_tmp_2->next;
			} while (s_oss_tmp_2);
		    }
		}   break;
		case 3: {
		    _cpEmergency_Area_ID_List(_g, &((*(_Warning_Area_List  *)src).u.emergency_Area_ID_List), &((*(_Warning_Area_List  *)pdVal).u.emergency_Area_ID_List));
		}   break;
		default:;
	    }
	} break;
	case 48: {
	    pdVal = (OSSC::COssString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssString  *)src, (OSSC::COssString  *)pdVal, sizeof((*(OSSC::COssString  *)pdVal).length), sizeof((*(OSSC::COssString  *)pdVal).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)src).value - (char *)(OSSC::COssString  *)src));
	} break;
	case 49: {
	    pdVal = (OSSC::COssString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssString  *)src, (OSSC::COssString  *)pdVal, sizeof((*(OSSC::COssString  *)pdVal).length), sizeof((*(OSSC::COssString  *)pdVal).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)src).value - (char *)(OSSC::COssString  *)src));
	} break;
	case 50: {
	    pdVal = (OSSC::COssString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssString  *)src, (OSSC::COssString  *)pdVal, sizeof((*(OSSC::COssString  *)pdVal).length), sizeof((*(OSSC::COssString  *)pdVal).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)src).value - (char *)(OSSC::COssString  *)src));
	} break;
	case 51: {
	    pdVal = (OSSC::COssString  *)_oss_cpy_unbnd_octet_ia(_g, (OSSC::COssString  *)src, (OSSC::COssString  *)pdVal, sizeof((*(OSSC::COssString  *)pdVal).length), sizeof((*(OSSC::COssString  *)pdVal).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)src).value - (char *)(OSSC::COssString  *)src));
	} break;
	case 52: {
	    pdVal = (_Warning_Area_List_5GS  *)_oss_dec_const_alloc(_g, sizeof(_Warning_Area_List_5GS ));
	    OSS_MEMCPY(_g, (_Warning_Area_List_5GS  *)pdVal, sizeof(*(_Warning_Area_List_5GS  *)pdVal), (_Warning_Area_List_5GS  *)src, sizeof(*(_Warning_Area_List_5GS  *)pdVal));
	    switch ((*(_Warning_Area_List_5GS  *)src).choice) {
		case 1: {
		    _cpECGIList(_g, &((*(_Warning_Area_List_5GS  *)src).u.cell_ID_List), &((*(_Warning_Area_List_5GS  *)pdVal).u.cell_ID_List));
		}   break;
		case 2: {
		    (*(_Warning_Area_List_5GS  *)pdVal).u.nR_CGIList = NULL;
		    if ((*(_Warning_Area_List_5GS  *)src).u.nR_CGIList) {
			_NR_CGIList *  s_oss_tmp_2 = (*(_Warning_Area_List_5GS  *)src).u.nR_CGIList;
			_NR_CGIList *  d_oss_tmp_2;

			(*(_Warning_Area_List_5GS  *)pdVal).u.nR_CGIList = d_oss_tmp_2 = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
			do {
			    OSS_MEMCPY(_g, d_oss_tmp_2,  sizeof(_NR_CGIList), s_oss_tmp_2, sizeof(_NR_CGIList));
			    {
				_cpNR_CGI(_g, &(s_oss_tmp_2->value), &(d_oss_tmp_2->value));
			    }
			    if (s_oss_tmp_2->next)
				d_oss_tmp_2->next = (_NR_CGIList *)_oss_dec_getmem_internal(_g, sizeof(_NR_CGIList));
			    s_oss_tmp_2 = s_oss_tmp_2->next;
			    d_oss_tmp_2 = d_oss_tmp_2->next;
			} while (s_oss_tmp_2);
		    }
		}   break;
		case 3: {
		    (*(_Warning_Area_List_5GS  *)pdVal).u.tAIList_5GS = NULL;
		    (*(_Warning_Area_List_5GS  *)pdVal).u.tAIList_5GS = _cpTAI_5GS(_g, (*(_Warning_Area_List_5GS  *)src).u.tAIList_5GS, (*(_Warning_Area_List_5GS  *)pdVal).u.tAIList_5GS);
		}   break;
		case 4: {
		    _cpEmergency_Area_ID_List(_g, &((*(_Warning_Area_List_5GS  *)src).u.emergencyAreaIDList), &((*(_Warning_Area_List_5GS  *)pdVal).u.emergencyAreaIDList));
		}   break;
		default:;
	    }
	} break;
	default:
	    res = PDU_RANGE;
    }
    *pdst = pdVal;
    return res;
}
#undef _oss_c

void _oss_cpy_new_open_type (OssGlobal *_g, int *_pduNum,
		OssBuf *_obuf, OssBuf *_cbuf, void *_odecoded, void **_cdecoded)
{
    unsigned long   apiFlags = _g->decodingFlags | _g->encodingFlags;

    if (_obuf->length && _obuf->value) {
	if (apiFlags & DONT_DO_ENCODED) {
	    _cbuf->length = 0L;
	    _cbuf->value = NULL;
	} else {
	    _cbuf->value = (unsigned char *)_oss_dec_getmem_internal(_g, _obuf->length);
	    OSS_MEMCPY(_g, _cbuf->value, _obuf->length, _obuf->value, _obuf->length);
	    _cbuf->length = _obuf->length;
	}
    } else {
	_cbuf->length = 0L;
	_cbuf->value = NULL;
    }
    if (*_pduNum && _odecoded && !(apiFlags & DONT_DO_DECODED)) {
	_CPSBC_AP_Containers(_g, *_pduNum, _odecoded, _cdecoded);
    } else {
	*_pduNum = 0;
	*_cdecoded = NULL;
    }
}
#endif /* OSS_COPY_VALUE */

#ifdef OSS_COMPARE_VALUE
static int _cmGlobal_ENB_ID(OssGlobal * _g, _Global_ENB_ID  * _odata, _Global_ENB_ID  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).pLMNidentity), &((*_cdata).pLMNidentity), sizeof(((*_cdata).pLMNidentity).length), sizeof(((*_cdata).pLMNidentity).value[0]), (unsigned int)((char *)&((*_odata).pLMNidentity).value - (char *)&((*_odata).pLMNidentity))))
	return 1;
    _res = _cmENB_ID(_g, &((*_odata).eNB_ID), &((*_cdata).eNB_ID));
    if (_res)
	return _res;
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	{
	    _seqof38 *  _s_oss_tmp_2 = (*_odata).iE_Extensions;
	    _seqof38 *  _d_oss_tmp_2 = (*_cdata).iE_Extensions;

	    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
		    return 1;
		if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
		    return 1;
		_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
		if (_res)
		    return _res;
		_s_oss_tmp_2 = _s_oss_tmp_2->next;
		_d_oss_tmp_2 = _d_oss_tmp_2->next;
	    }
	    if (_s_oss_tmp_2 || _d_oss_tmp_2)
		return 1;
	}
    }
    (void)_g;

    return _res;
}


static int _cmGlobal_RAN_Node_ID(OssGlobal * _g, _Global_RAN_Node_ID  * _odata, _Global_RAN_Node_ID  * _cdata)
{
    int _res = 0;

    if ((*_odata).choice != (*_cdata).choice)
	return 1;
    switch ((*_odata).choice) {
	case 1: {
	    _res = _cmGlobal_GNB_ID(_g, (*_odata).u.global_GNB_ID, (*_cdata).u.global_GNB_ID);
	    if (_res)
		return _res;
	}   break;
	case 2: {
	    if (_oss_cmp_unbnd_octet_ia(&((*(*_odata).u.global_NgENB_ID).pLMNidentity), &((*(*_cdata).u.global_NgENB_ID).pLMNidentity), sizeof(((*(*_cdata).u.global_NgENB_ID).pLMNidentity).length), sizeof(((*(*_cdata).u.global_NgENB_ID).pLMNidentity).value[0]), (unsigned int)((char *)&((*(*_odata).u.global_NgENB_ID).pLMNidentity).value - (char *)&((*(*_odata).u.global_NgENB_ID).pLMNidentity))))
		return 1;
	    _res = _cmENB_ID(_g, &((*(*_odata).u.global_NgENB_ID).ngENB_ID), &((*(*_cdata).u.global_NgENB_ID).ngENB_ID));
	    if (_res)
		return _res;
	    if (((*(*_odata).u.global_NgENB_ID).bit_mask ^ (*(*_cdata).u.global_NgENB_ID).bit_mask) & 0x80000000)
		return 1;
	    if ((*(*_odata).u.global_NgENB_ID).bit_mask & 0x80000000) {
		{
		    _seqof38 *  _s_oss_tmp_3 = (*(*_odata).u.global_NgENB_ID).iE_Extensions;
		    _seqof38 *  _d_oss_tmp_3 = (*(*_cdata).u.global_NgENB_ID).iE_Extensions;

		    while (_s_oss_tmp_3 && _d_oss_tmp_3) {
			{
			    _seq42  * _odata_3 = &(_s_oss_tmp_3->value);
			    _seq42  * _cdata_3 = &(_d_oss_tmp_3->value);

			    if ((*_cdata_3).id != (*_odata_3).id)
				return 1;
			    if ((*_cdata_3).criticality != (*_odata_3).criticality)
				return 1;
			    _res = _oss_cmp_new_open_type(_g, ((*_odata_3).extensionValue).pduNum, ((*_cdata_3).extensionValue).pduNum, &(((*_odata_3).extensionValue).encoded), &(((*_cdata_3).extensionValue).encoded), *(void **)&(((*_odata_3).extensionValue).decoded), *(void **)&(((*_cdata_3).extensionValue).decoded));
			    if (_res)
				return _res;
			}
			_s_oss_tmp_3 = _s_oss_tmp_3->next;
			_d_oss_tmp_3 = _d_oss_tmp_3->next;
		    }
		    if (_s_oss_tmp_3 || _d_oss_tmp_3)
			return 1;
		}
	    }
	}   break;
	case 0:
	    break;
	default:
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cmGlobal_GNB_ID(OssGlobal * _g, _Global_GNB_ID  * _odata, _Global_GNB_ID  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).pLMNidentity), &((*_cdata).pLMNidentity), sizeof(((*_cdata).pLMNidentity).length), sizeof(((*_cdata).pLMNidentity).value[0]), (unsigned int)((char *)&((*_odata).pLMNidentity).value - (char *)&((*_odata).pLMNidentity))))
	return 1;
    if (((*_odata).gNB_ID).choice != ((*_cdata).gNB_ID).choice)
	return 1;
    switch (((*_odata).gNB_ID).choice) {
	case 1: {
	    if (_oss_cmp_arrbits((((*_odata).gNB_ID).u.gNB_ID).value, (((*_cdata).gNB_ID).u.gNB_ID).value, (((*_odata).gNB_ID).u.gNB_ID).length, (((*_cdata).gNB_ID).u.gNB_ID).length))
		return 1;
	}   break;
	case 0:
	    break;
	default:
	    return 1;
    }
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	{
	    _seqof38 *  _s_oss_tmp_2 = (*_odata).iE_Extensions;
	    _seqof38 *  _d_oss_tmp_2 = (*_cdata).iE_Extensions;

	    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
		    return 1;
		if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
		    return 1;
		_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
		if (_res)
		    return _res;
		_s_oss_tmp_2 = _s_oss_tmp_2->next;
		_d_oss_tmp_2 = _d_oss_tmp_2->next;
	    }
	    if (_s_oss_tmp_2 || _d_oss_tmp_2)
		return 1;
	}
    }
    (void)_g;

    return _res;
}


static int _cmENB_ID(OssGlobal * _g, _ENB_ID  * _odata, _ENB_ID  * _cdata)
{
    int _res = 0;

    if ((*_odata).choice != (*_cdata).choice)
	return 1;
    switch ((*_odata).choice) {
	case 1: {
	    if (_oss_cmp_arrbits(((*_odata).u.macroENB_ID).value, ((*_cdata).u.macroENB_ID).value, ((*_odata).u.macroENB_ID).length, ((*_cdata).u.macroENB_ID).length))
		return 1;
	}   break;
	case 2: {
	    if (_oss_cmp_arrbits(((*_odata).u.homeENB_ID).value, ((*_cdata).u.homeENB_ID).value, ((*_odata).u.homeENB_ID).length, ((*_cdata).u.homeENB_ID).length))
		return 1;
	}   break;
	case 3: {
	    if (_oss_cmp_arrbits(((*_odata).u.short_macroENB_ID).value, ((*_cdata).u.short_macroENB_ID).value, ((*_odata).u.short_macroENB_ID).length, ((*_cdata).u.short_macroENB_ID).length))
		return 1;
	}   break;
	case 4: {
	    if (_oss_cmp_arrbits(((*_odata).u.long_macroENB_ID).value, ((*_cdata).u.long_macroENB_ID).value, ((*_odata).u.long_macroENB_ID).length, ((*_cdata).u.long_macroENB_ID).length))
		return 1;
	}   break;
	case 0:
	    break;
	default:
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cm_seqof23(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata)
{
    int _res = 0;

    {
	_seqof38 *  _s_oss_tmp_1 = *_odata;
	_seqof38 *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    if ((_d_oss_tmp_1->value).id != (_s_oss_tmp_1->value).id)
		return 1;
	    if ((_d_oss_tmp_1->value).criticality != (_s_oss_tmp_1->value).criticality)
		return 1;
	    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_1->value).extensionValue).pduNum, ((_d_oss_tmp_1->value).extensionValue).pduNum, &(((_s_oss_tmp_1->value).extensionValue).encoded), &(((_d_oss_tmp_1->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_1->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_1->value).extensionValue).decoded));
	    if (_res)
		return _res;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cmEUTRAN_CGI(OssGlobal * _g, _EUTRAN_CGI  * _odata, _EUTRAN_CGI  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).pLMNidentity), &((*_cdata).pLMNidentity), sizeof(((*_cdata).pLMNidentity).length), sizeof(((*_cdata).pLMNidentity).value[0]), (unsigned int)((char *)&((*_odata).pLMNidentity).value - (char *)&((*_odata).pLMNidentity))))
	return 1;
    if (_oss_cmp_arrbits(((*_odata).cell_ID).value, ((*_cdata).cell_ID).value, ((*_odata).cell_ID).length, ((*_cdata).cell_ID).length))
	return 1;
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	_res = _cm_seqof23(_g, &((*_odata).iE_Extensions), &((*_cdata).iE_Extensions));
	if (_res)
	    return _res;
    }
    (void)_g;

    return _res;
}


static int _cm_seqof26(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata)
{
    int _res = 0;

    {
	_seqof38 *  _s_oss_tmp_1 = *_odata;
	_seqof38 *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    if ((_d_oss_tmp_1->value).id != (_s_oss_tmp_1->value).id)
		return 1;
	    if ((_d_oss_tmp_1->value).criticality != (_s_oss_tmp_1->value).criticality)
		return 1;
	    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_1->value).extensionValue).pduNum, ((_d_oss_tmp_1->value).extensionValue).pduNum, &(((_s_oss_tmp_1->value).extensionValue).encoded), &(((_d_oss_tmp_1->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_1->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_1->value).extensionValue).decoded));
	    if (_res)
		return _res;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cmNR_CGI(OssGlobal * _g, _NR_CGI  * _odata, _NR_CGI  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).pLMNidentity), &((*_cdata).pLMNidentity), sizeof(((*_cdata).pLMNidentity).length), sizeof(((*_cdata).pLMNidentity).value[0]), (unsigned int)((char *)&((*_odata).pLMNidentity).value - (char *)&((*_odata).pLMNidentity))))
	return 1;
    if (_oss_cmp_arrbits(((*_odata).nRCellIdentity).value, ((*_cdata).nRCellIdentity).value, ((*_odata).nRCellIdentity).length, ((*_cdata).nRCellIdentity).length))
	return 1;
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	_res = _cm_seqof26(_g, &((*_odata).iE_Extensions), &((*_cdata).iE_Extensions));
	if (_res)
	    return _res;
    }
    (void)_g;

    return _res;
}


static int _cmECGIList(OssGlobal * _g, _ECGIList * * _odata, _ECGIList * * _cdata)
{
    int _res = 0;

    {
	_ECGIList *  _s_oss_tmp_1 = *_odata;
	_ECGIList *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    _res = _cmEUTRAN_CGI(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
	    if (_res)
		return _res;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cmEmergency_Area_ID_List(OssGlobal * _g, _Emergency_Area_ID_List * * _odata, _Emergency_Area_ID_List * * _cdata)
{
    int _res = 0;

    {
	_Emergency_Area_ID_List *  _s_oss_tmp_1 = *_odata;
	_Emergency_Area_ID_List *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    if (_oss_cmp_unbnd_octet_ia(&(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value), sizeof((_d_oss_tmp_1->value).length), sizeof((_d_oss_tmp_1->value).value[0]), (unsigned int)((char *)&(_s_oss_tmp_1->value).value - (char *)&(_s_oss_tmp_1->value))))
		return 1;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cm13EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List_Item  * _odata, _EmergencyAreaID_Broadcast_List_Item  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).emergencyAreaID), &((*_cdata).emergencyAreaID), sizeof(((*_cdata).emergencyAreaID).length), sizeof(((*_cdata).emergencyAreaID).value[0]), (unsigned int)((char *)&((*_odata).emergencyAreaID).value - (char *)&((*_odata).emergencyAreaID))))
	return 1;
    {
	_CellId_Broadcast_List *  _s_oss_tmp_2 = (_CellId_Broadcast_List *)(*_odata).scheduledCellinEAI;
	_CellId_Broadcast_List *  _d_oss_tmp_2 = (_CellId_Broadcast_List *)(*_cdata).scheduledCellinEAI;

	while (_s_oss_tmp_2 && _d_oss_tmp_2) {
	    _res = _cmEUTRAN_CGI(_g, &((_s_oss_tmp_2->value).eCGI), &((_d_oss_tmp_2->value).eCGI));
	    if (_res)
		return _res;
	    if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
		return 1;
	    if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
		{
		    _seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
		    _seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

		    {
			_seqof38 *  _s_oss_tmp_4 = *_odata_3;
			_seqof38 *  _d_oss_tmp_4 = *_cdata_3;

			while (_s_oss_tmp_4 && _d_oss_tmp_4) {
			    if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
				return 1;
			    if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
				return 1;
			    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
			    if (_res)
				return _res;
			    _s_oss_tmp_4 = _s_oss_tmp_4->next;
			    _d_oss_tmp_4 = _d_oss_tmp_4->next;
			}
			if (_s_oss_tmp_4 || _d_oss_tmp_4)
			    return 1;
		    }
		}
	    }
	    _s_oss_tmp_2 = _s_oss_tmp_2->next;
	    _d_oss_tmp_2 = _d_oss_tmp_2->next;
	}
	if (_s_oss_tmp_2 || _d_oss_tmp_2)
	    return 1;
    }
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	{
	    _seqof38 *  _s_oss_tmp_2 = (*_odata).iE_Extensions;
	    _seqof38 *  _d_oss_tmp_2 = (*_cdata).iE_Extensions;

	    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
		    return 1;
		if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
		    return 1;
		_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
		if (_res)
		    return _res;
		_s_oss_tmp_2 = _s_oss_tmp_2->next;
		_d_oss_tmp_2 = _d_oss_tmp_2->next;
	    }
	    if (_s_oss_tmp_2 || _d_oss_tmp_2)
		return 1;
	}
    }
    (void)_g;

    return _res;
}


static int _cm14EmergencyAreaID_Broadcast_(OssGlobal * _g, _EmergencyAreaID_Broadcast_List * * _odata, _EmergencyAreaID_Broadcast_List * * _cdata)
{
    int _res = 0;

    {
	_EmergencyAreaID_Broadcast_List *  _s_oss_tmp_1 = *_odata;
	_EmergencyAreaID_Broadcast_List *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    _res = _cm13EmergencyAreaID_Broadcast_(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
	    if (_res)
		return _res;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cm15EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_Item  * _odata, _EmergencyAreaID_Cancelled_Item  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).emergencyAreaID), &((*_cdata).emergencyAreaID), sizeof(((*_cdata).emergencyAreaID).length), sizeof(((*_cdata).emergencyAreaID).value[0]), (unsigned int)((char *)&((*_odata).emergencyAreaID).value - (char *)&((*_odata).emergencyAreaID))))
	return 1;
    {
	_CellID_Cancelled_List *  _s_oss_tmp_2 = (_CellID_Cancelled_List *)(*_odata).cancelledCellinEAI;
	_CellID_Cancelled_List *  _d_oss_tmp_2 = (_CellID_Cancelled_List *)(*_cdata).cancelledCellinEAI;

	while (_s_oss_tmp_2 && _d_oss_tmp_2) {
	    _res = _cmEUTRAN_CGI(_g, &((_s_oss_tmp_2->value).eCGI), &((_d_oss_tmp_2->value).eCGI));
	    if (_res)
		return _res;
	    if ((_d_oss_tmp_2->value).numberOfBroadcasts != (_s_oss_tmp_2->value).numberOfBroadcasts)
		return 1;
	    if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
		return 1;
	    if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
		{
		    _seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
		    _seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

		    {
			_seqof38 *  _s_oss_tmp_4 = *_odata_3;
			_seqof38 *  _d_oss_tmp_4 = *_cdata_3;

			while (_s_oss_tmp_4 && _d_oss_tmp_4) {
			    if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
				return 1;
			    if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
				return 1;
			    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
			    if (_res)
				return _res;
			    _s_oss_tmp_4 = _s_oss_tmp_4->next;
			    _d_oss_tmp_4 = _d_oss_tmp_4->next;
			}
			if (_s_oss_tmp_4 || _d_oss_tmp_4)
			    return 1;
		    }
		}
	    }
	    _s_oss_tmp_2 = _s_oss_tmp_2->next;
	    _d_oss_tmp_2 = _d_oss_tmp_2->next;
	}
	if (_s_oss_tmp_2 || _d_oss_tmp_2)
	    return 1;
    }
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	{
	    _seqof38 *  _s_oss_tmp_2 = (*_odata).iE_Extensions;
	    _seqof38 *  _d_oss_tmp_2 = (*_cdata).iE_Extensions;

	    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
		    return 1;
		if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
		    return 1;
		_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
		if (_res)
		    return _res;
		_s_oss_tmp_2 = _s_oss_tmp_2->next;
		_d_oss_tmp_2 = _d_oss_tmp_2->next;
	    }
	    if (_s_oss_tmp_2 || _d_oss_tmp_2)
		return 1;
	}
    }
    (void)_g;

    return _res;
}


static int _cm16EmergencyAreaID_Cancelled_(OssGlobal * _g, _EmergencyAreaID_Cancelled_List * * _odata, _EmergencyAreaID_Cancelled_List * * _cdata)
{
    int _res = 0;

    {
	_EmergencyAreaID_Cancelled_List *  _s_oss_tmp_1 = *_odata;
	_EmergencyAreaID_Cancelled_List *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    _res = _cm15EmergencyAreaID_Cancelled_(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
	    if (_res)
		return _res;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cm_seqof38(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata)
{
    int _res = 0;

    {
	_seqof38 *  _s_oss_tmp_1 = *_odata;
	_seqof38 *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    if ((_d_oss_tmp_1->value).id != (_s_oss_tmp_1->value).id)
		return 1;
	    if ((_d_oss_tmp_1->value).criticality != (_s_oss_tmp_1->value).criticality)
		return 1;
	    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_1->value).extensionValue).pduNum, ((_d_oss_tmp_1->value).extensionValue).pduNum, &(((_s_oss_tmp_1->value).extensionValue).encoded), &(((_d_oss_tmp_1->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_1->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_1->value).extensionValue).decoded));
	    if (_res)
		return _res;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cmTAI(OssGlobal * _g, _TAI  * _odata, _TAI  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).pLMNidentity), &((*_cdata).pLMNidentity), sizeof(((*_cdata).pLMNidentity).length), sizeof(((*_cdata).pLMNidentity).value[0]), (unsigned int)((char *)&((*_odata).pLMNidentity).value - (char *)&((*_odata).pLMNidentity))))
	return 1;
    if (_oss_cmp_unbnd_octet_ia(&((*_odata).tAC), &((*_cdata).tAC), sizeof(((*_cdata).tAC).length), sizeof(((*_cdata).tAC).value[0]), (unsigned int)((char *)&((*_odata).tAC).value - (char *)&((*_odata).tAC))))
	return 1;
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	_res = _cm_seqof38(_g, &((*_odata).iE_Extensions), &((*_cdata).iE_Extensions));
	if (_res)
	    return _res;
    }
    (void)_g;

    return _res;
}


static int _cm_seq43(OssGlobal * _g, _seq43  * _odata, _seq43  * _cdata)
{
    int _res = 0;

    _res = _cmTAI(_g, &((*_odata).tai), &((*_cdata).tai));
    if (_res)
	return _res;
    (void)_g;

    return _res;
}


static int _cm_seqof39(OssGlobal * _g, _seqof38 * * _odata, _seqof38 * * _cdata)
{
    int _res = 0;

    {
	_seqof38 *  _s_oss_tmp_1 = *_odata;
	_seqof38 *  _d_oss_tmp_1 = *_cdata;

	while (_s_oss_tmp_1 && _d_oss_tmp_1) {
	    if ((_d_oss_tmp_1->value).id != (_s_oss_tmp_1->value).id)
		return 1;
	    if ((_d_oss_tmp_1->value).criticality != (_s_oss_tmp_1->value).criticality)
		return 1;
	    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_1->value).extensionValue).pduNum, ((_d_oss_tmp_1->value).extensionValue).pduNum, &(((_s_oss_tmp_1->value).extensionValue).encoded), &(((_d_oss_tmp_1->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_1->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_1->value).extensionValue).decoded));
	    if (_res)
		return _res;
	    _s_oss_tmp_1 = _s_oss_tmp_1->next;
	    _d_oss_tmp_1 = _d_oss_tmp_1->next;
	}
	if (_s_oss_tmp_1 || _d_oss_tmp_1)
	    return 1;
    }
    (void)_g;

    return _res;
}


static int _cmTAI_5GS(OssGlobal * _g, _TAI_5GS  * _odata, _TAI_5GS  * _cdata)
{
    int _res = 0;

    if (_oss_cmp_unbnd_octet_ia(&((*_odata).pLMNidentity), &((*_cdata).pLMNidentity), sizeof(((*_cdata).pLMNidentity).length), sizeof(((*_cdata).pLMNidentity).value[0]), (unsigned int)((char *)&((*_odata).pLMNidentity).value - (char *)&((*_odata).pLMNidentity))))
	return 1;
    if (_oss_cmp_unbnd_octet_ia(&((*_odata).tAC_5GS), &((*_cdata).tAC_5GS), sizeof(((*_cdata).tAC_5GS).length), sizeof(((*_cdata).tAC_5GS).value[0]), (unsigned int)((char *)&((*_odata).tAC_5GS).value - (char *)&((*_odata).tAC_5GS))))
	return 1;
    if (((*_odata).bit_mask ^ (*_cdata).bit_mask) & 0x80000000)
	return 1;
    if ((*_odata).bit_mask & 0x80000000) {
	_res = _cm_seqof39(_g, &((*_odata).iE_Extensions), &((*_cdata).iE_Extensions));
	if (_res)
	    return _res;
    }
    (void)_g;

    return _res;
}


static int _CMSBC_AP_Containers(struct ossGlobal * _g, int _pduNum, void * _odata, void * _cdata)
{
    int _res = 0;

    if (_pduNum <= 0 || _pduNum > 53)
	return PDU_RANGE;
    switch (_pduNum) {
	case 1: {
	    if ((*(_SBC_AP_PDU  *)_odata).choice != (*(_SBC_AP_PDU  *)_cdata).choice)
		return 1;
	    switch ((*(_SBC_AP_PDU  *)_odata).choice) {
		case 1: {
		    if ((*(*(_SBC_AP_PDU  *)_cdata).u.initiatingMessage).procedureCode != (*(*(_SBC_AP_PDU  *)_odata).u.initiatingMessage).procedureCode)
			return 1;
		    if ((*(*(_SBC_AP_PDU  *)_cdata).u.initiatingMessage).criticality != (*(*(_SBC_AP_PDU  *)_odata).u.initiatingMessage).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((*(*(_SBC_AP_PDU  *)_odata).u.initiatingMessage).value).pduNum, ((*(*(_SBC_AP_PDU  *)_cdata).u.initiatingMessage).value).pduNum, &(((*(*(_SBC_AP_PDU  *)_odata).u.initiatingMessage).value).encoded), &(((*(*(_SBC_AP_PDU  *)_cdata).u.initiatingMessage).value).encoded), *(void **)&(((*(*(_SBC_AP_PDU  *)_odata).u.initiatingMessage).value).decoded), *(void **)&(((*(*(_SBC_AP_PDU  *)_cdata).u.initiatingMessage).value).decoded));
		    if (_res)
			return _res;
		}   break;
		case 2: {
		    if ((*(*(_SBC_AP_PDU  *)_cdata).u.successfulOutcome).procedureCode != (*(*(_SBC_AP_PDU  *)_odata).u.successfulOutcome).procedureCode)
			return 1;
		    if ((*(*(_SBC_AP_PDU  *)_cdata).u.successfulOutcome).criticality != (*(*(_SBC_AP_PDU  *)_odata).u.successfulOutcome).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((*(*(_SBC_AP_PDU  *)_odata).u.successfulOutcome).value).pduNum, ((*(*(_SBC_AP_PDU  *)_cdata).u.successfulOutcome).value).pduNum, &(((*(*(_SBC_AP_PDU  *)_odata).u.successfulOutcome).value).encoded), &(((*(*(_SBC_AP_PDU  *)_cdata).u.successfulOutcome).value).encoded), *(void **)&(((*(*(_SBC_AP_PDU  *)_odata).u.successfulOutcome).value).decoded), *(void **)&(((*(*(_SBC_AP_PDU  *)_cdata).u.successfulOutcome).value).decoded));
		    if (_res)
			return _res;
		}   break;
		case 3: {
		    if ((*(*(_SBC_AP_PDU  *)_cdata).u.unsuccessfulOutcome).procedureCode != (*(*(_SBC_AP_PDU  *)_odata).u.unsuccessfulOutcome).procedureCode)
			return 1;
		    if ((*(*(_SBC_AP_PDU  *)_cdata).u.unsuccessfulOutcome).criticality != (*(*(_SBC_AP_PDU  *)_odata).u.unsuccessfulOutcome).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((*(*(_SBC_AP_PDU  *)_odata).u.unsuccessfulOutcome).value).pduNum, ((*(*(_SBC_AP_PDU  *)_cdata).u.unsuccessfulOutcome).value).pduNum, &(((*(*(_SBC_AP_PDU  *)_odata).u.unsuccessfulOutcome).value).encoded), &(((*(*(_SBC_AP_PDU  *)_cdata).u.unsuccessfulOutcome).value).encoded), *(void **)&(((*(*(_SBC_AP_PDU  *)_odata).u.unsuccessfulOutcome).value).decoded), *(void **)&(((*(*(_SBC_AP_PDU  *)_cdata).u.unsuccessfulOutcome).value).decoded));
		    if (_res)
			return _res;
		}   break;
		case 0:
		    break;
		default:
		    return 1;
	    }
	} break;
	case 2: {
	    {
		_seqof1 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Request  *)_odata).protocolIEs;
		_seqof1 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Request  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_Write_Replace_Warning_Request  *)_odata).bit_mask ^ (*(_Write_Replace_Warning_Request  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Write_Replace_Warning_Request  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof2 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Request  *)_odata).protocolExtensions;
		    _seqof2 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Request  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 3: {
	    {
		_seqof3 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_odata).protocolIEs;
		_seqof3 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_Write_Replace_Warning_Response  *)_odata).bit_mask ^ (*(_Write_Replace_Warning_Response  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Write_Replace_Warning_Response  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof4 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_odata).protocolExtensions;
		    _seqof4 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 4: {
	    {
		_seqof5 *  _s_oss_tmp_2 = (*(_Stop_Warning_Request  *)_odata).protocolIEs;
		_seqof5 *  _d_oss_tmp_2 = (*(_Stop_Warning_Request  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_Stop_Warning_Request  *)_odata).bit_mask ^ (*(_Stop_Warning_Request  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Stop_Warning_Request  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof6 *  _s_oss_tmp_2 = (*(_Stop_Warning_Request  *)_odata).protocolExtensions;
		    _seqof6 *  _d_oss_tmp_2 = (*(_Stop_Warning_Request  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 5: {
	    {
		_seqof3 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_odata).protocolIEs;
		_seqof3 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_Write_Replace_Warning_Response  *)_odata).bit_mask ^ (*(_Write_Replace_Warning_Response  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Write_Replace_Warning_Response  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof4 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_odata).protocolExtensions;
		    _seqof4 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Response  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 6: {
	    {
		_seqof9 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Indication  *)_odata).protocolIEs;
		_seqof9 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Indication  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_Write_Replace_Warning_Indication  *)_odata).bit_mask ^ (*(_Write_Replace_Warning_Indication  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Write_Replace_Warning_Indication  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof10 *  _s_oss_tmp_2 = (*(_Write_Replace_Warning_Indication  *)_odata).protocolExtensions;
		    _seqof10 *  _d_oss_tmp_2 = (*(_Write_Replace_Warning_Indication  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 7: {
	    {
		_seqof11 *  _s_oss_tmp_2 = (*(_Stop_Warning_Indication  *)_odata).protocolIEs;
		_seqof11 *  _d_oss_tmp_2 = (*(_Stop_Warning_Indication  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_Stop_Warning_Indication  *)_odata).bit_mask ^ (*(_Stop_Warning_Indication  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Stop_Warning_Indication  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof12 *  _s_oss_tmp_2 = (*(_Stop_Warning_Indication  *)_odata).protocolExtensions;
		    _seqof12 *  _d_oss_tmp_2 = (*(_Stop_Warning_Indication  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 8: {
	    {
		_seqof13 *  _s_oss_tmp_2 = (*(_PWS_Restart_Indication  *)_odata).protocolIEs;
		_seqof13 *  _d_oss_tmp_2 = (*(_PWS_Restart_Indication  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_PWS_Restart_Indication  *)_odata).bit_mask ^ (*(_PWS_Restart_Indication  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_PWS_Restart_Indication  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof14 *  _s_oss_tmp_2 = (*(_PWS_Restart_Indication  *)_odata).protocolExtensions;
		    _seqof14 *  _d_oss_tmp_2 = (*(_PWS_Restart_Indication  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 9: {
	    {
		_seqof15 *  _s_oss_tmp_2 = (*(_PWS_Failure_Indication  *)_odata).protocolIEs;
		_seqof15 *  _d_oss_tmp_2 = (*(_PWS_Failure_Indication  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	    if (((*(_PWS_Failure_Indication  *)_odata).bit_mask ^ (*(_PWS_Failure_Indication  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_PWS_Failure_Indication  *)_odata).bit_mask & 0x80000000) {
		{
		    _seqof16 *  _s_oss_tmp_2 = (*(_PWS_Failure_Indication  *)_odata).protocolExtensions;
		    _seqof16 *  _d_oss_tmp_2 = (*(_PWS_Failure_Indication  *)_cdata).protocolExtensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 10: {
	    {
		_seqof17 *  _s_oss_tmp_2 = (*(_Error_Indication  *)_odata).protocolIEs;
		_seqof17 *  _d_oss_tmp_2 = (*(_Error_Indication  *)_cdata).protocolIEs;

		while (_s_oss_tmp_2 && _d_oss_tmp_2) {
		    if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			return 1;
		    if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			return 1;
		    _res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).value).pduNum, ((_d_oss_tmp_2->value).value).pduNum, &(((_s_oss_tmp_2->value).value).encoded), &(((_d_oss_tmp_2->value).value).encoded), *(void **)&(((_s_oss_tmp_2->value).value).decoded), *(void **)&(((_d_oss_tmp_2->value).value).decoded));
		    if (_res)
			return _res;
		    _s_oss_tmp_2 = _s_oss_tmp_2->next;
		    _d_oss_tmp_2 = _d_oss_tmp_2->next;
		}
		if (_s_oss_tmp_2 || _d_oss_tmp_2)
		    return 1;
	    }
	} break;
	case 11: {
	    if (((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask & 0x80000000) {
		{
		    _CellId_Broadcast_List *  _s_oss_tmp_2 = (_CellId_Broadcast_List *)(*(_Broadcast_Scheduled_Area_List  *)_odata).cellId_Broadcast_List;
		    _CellId_Broadcast_List *  _d_oss_tmp_2 = (_CellId_Broadcast_List *)(*(_Broadcast_Scheduled_Area_List  *)_cdata).cellId_Broadcast_List;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmEUTRAN_CGI(_g, &((_s_oss_tmp_2->value).eCGI), &((_d_oss_tmp_2->value).eCGI));
			if (_res)
			    return _res;
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List  *)_cdata).bit_mask) & 0x40000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask & 0x40000000) {
		{
		    _TAI_Broadcast_List *  _s_oss_tmp_2 = (_TAI_Broadcast_List *)(*(_Broadcast_Scheduled_Area_List  *)_odata).tAI_Broadcast_List;
		    _TAI_Broadcast_List *  _d_oss_tmp_2 = (_TAI_Broadcast_List *)(*(_Broadcast_Scheduled_Area_List  *)_cdata).tAI_Broadcast_List;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmTAI(_g, &((_s_oss_tmp_2->value).tAI), &((_d_oss_tmp_2->value).tAI));
			if (_res)
			    return _res;
			{
			    _CellId_Broadcast_List * * _odata_3 = &((_s_oss_tmp_2->value).scheduledCellinTAI);
			    _CellId_Broadcast_List * * _cdata_3 = &((_d_oss_tmp_2->value).scheduledCellinTAI);

			    {
				_CellId_Broadcast_List *  _s_oss_tmp_4 = (_CellId_Broadcast_List *)*_odata_3;
				_CellId_Broadcast_List *  _d_oss_tmp_4 = (_CellId_Broadcast_List *)*_cdata_3;

				while (_s_oss_tmp_4 && _d_oss_tmp_4) {
				    _res = _cmEUTRAN_CGI(_g, &((_s_oss_tmp_4->value).eCGI), &((_d_oss_tmp_4->value).eCGI));
				    if (_res)
					return _res;
				    if (((_s_oss_tmp_4->value).bit_mask ^ (_d_oss_tmp_4->value).bit_mask) & 0x80000000)
					return 1;
				    if ((_s_oss_tmp_4->value).bit_mask & 0x80000000) {
					{
					    _seqof38 *  _s_oss_tmp_6 = (_s_oss_tmp_4->value).iE_Extensions;
					    _seqof38 *  _d_oss_tmp_6 = (_d_oss_tmp_4->value).iE_Extensions;

					    while (_s_oss_tmp_6 && _d_oss_tmp_6) {
						{
						    _seq42  * _odata_6 = &(_s_oss_tmp_6->value);
						    _seq42  * _cdata_6 = &(_d_oss_tmp_6->value);

						    if ((*_cdata_6).id != (*_odata_6).id)
							return 1;
						    if ((*_cdata_6).criticality != (*_odata_6).criticality)
							return 1;
						    _res = _oss_cmp_new_open_type(_g, ((*_odata_6).extensionValue).pduNum, ((*_cdata_6).extensionValue).pduNum, &(((*_odata_6).extensionValue).encoded), &(((*_cdata_6).extensionValue).encoded), *(void **)&(((*_odata_6).extensionValue).decoded), *(void **)&(((*_cdata_6).extensionValue).decoded));
						    if (_res)
							return _res;
						}
						_s_oss_tmp_6 = _s_oss_tmp_6->next;
						_d_oss_tmp_6 = _d_oss_tmp_6->next;
					    }
					    if (_s_oss_tmp_6 || _d_oss_tmp_6)
						return 1;
					}
				    }
				    _s_oss_tmp_4 = _s_oss_tmp_4->next;
				    _d_oss_tmp_4 = _d_oss_tmp_4->next;
				}
				if (_s_oss_tmp_4 || _d_oss_tmp_4)
				    return 1;
			    }
			}
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List  *)_cdata).bit_mask) & 0x20000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask & 0x20000000) {
		_res = _cm14EmergencyAreaID_Broadcast_(_g, &((*(_Broadcast_Scheduled_Area_List  *)_odata).emergencyAreaID_Broadcast_List), &((*(_Broadcast_Scheduled_Area_List  *)_cdata).emergencyAreaID_Broadcast_List));
		if (_res)
		    return _res;
	    }
	    if (((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List  *)_cdata).bit_mask) & 0x10000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List  *)_odata).bit_mask & 0x10000000) {
		{
		    _seqof38 *  _s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List  *)_odata).iE_Extensions;
		    _seqof38 *  _d_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List  *)_cdata).iE_Extensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 12: {
	    if (((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask & 0x80000000) {
		{
		    _CellId_Broadcast_List_5GS *  _s_oss_tmp_2 = (_CellId_Broadcast_List_5GS *)(*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).cellId_Broadcast_List_5GS;
		    _CellId_Broadcast_List_5GS *  _d_oss_tmp_2 = (_CellId_Broadcast_List_5GS *)(*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).cellId_Broadcast_List_5GS;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmNR_CGI(_g, &((_s_oss_tmp_2->value).nR_CGI), &((_d_oss_tmp_2->value).nR_CGI));
			if (_res)
			    return _res;
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).bit_mask) & 0x40000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask & 0x40000000) {
		{
		    _TAI_Broadcast_List_5GS *  _s_oss_tmp_2 = (_TAI_Broadcast_List_5GS *)(*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).tAI_Broadcast_List_5GS;
		    _TAI_Broadcast_List_5GS *  _d_oss_tmp_2 = (_TAI_Broadcast_List_5GS *)(*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).tAI_Broadcast_List_5GS;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmTAI_5GS(_g, &((_s_oss_tmp_2->value).tAI_5GS), &((_d_oss_tmp_2->value).tAI_5GS));
			if (_res)
			    return _res;
			{
			    _CellId_Broadcast_List_5GS * * _odata_3 = &((_s_oss_tmp_2->value).scheduledCellinTAI_5GS);
			    _CellId_Broadcast_List_5GS * * _cdata_3 = &((_d_oss_tmp_2->value).scheduledCellinTAI_5GS);

			    {
				_CellId_Broadcast_List_5GS *  _s_oss_tmp_4 = (_CellId_Broadcast_List_5GS *)*_odata_3;
				_CellId_Broadcast_List_5GS *  _d_oss_tmp_4 = (_CellId_Broadcast_List_5GS *)*_cdata_3;

				while (_s_oss_tmp_4 && _d_oss_tmp_4) {
				    _res = _cmNR_CGI(_g, &((_s_oss_tmp_4->value).nR_CGI), &((_d_oss_tmp_4->value).nR_CGI));
				    if (_res)
					return _res;
				    if (((_s_oss_tmp_4->value).bit_mask ^ (_d_oss_tmp_4->value).bit_mask) & 0x80000000)
					return 1;
				    if ((_s_oss_tmp_4->value).bit_mask & 0x80000000) {
					{
					    _seqof38 *  _s_oss_tmp_6 = (_s_oss_tmp_4->value).iE_Extensions;
					    _seqof38 *  _d_oss_tmp_6 = (_d_oss_tmp_4->value).iE_Extensions;

					    while (_s_oss_tmp_6 && _d_oss_tmp_6) {
						{
						    _seq42  * _odata_6 = &(_s_oss_tmp_6->value);
						    _seq42  * _cdata_6 = &(_d_oss_tmp_6->value);

						    if ((*_cdata_6).id != (*_odata_6).id)
							return 1;
						    if ((*_cdata_6).criticality != (*_odata_6).criticality)
							return 1;
						    _res = _oss_cmp_new_open_type(_g, ((*_odata_6).extensionValue).pduNum, ((*_cdata_6).extensionValue).pduNum, &(((*_odata_6).extensionValue).encoded), &(((*_cdata_6).extensionValue).encoded), *(void **)&(((*_odata_6).extensionValue).decoded), *(void **)&(((*_cdata_6).extensionValue).decoded));
						    if (_res)
							return _res;
						}
						_s_oss_tmp_6 = _s_oss_tmp_6->next;
						_d_oss_tmp_6 = _d_oss_tmp_6->next;
					    }
					    if (_s_oss_tmp_6 || _d_oss_tmp_6)
						return 1;
					}
				    }
				    _s_oss_tmp_4 = _s_oss_tmp_4->next;
				    _d_oss_tmp_4 = _d_oss_tmp_4->next;
				}
				if (_s_oss_tmp_4 || _d_oss_tmp_4)
				    return 1;
			    }
			}
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).bit_mask) & 0x20000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask & 0x20000000) {
		_res = _cm14EmergencyAreaID_Broadcast_(_g, &((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).emergencyAreaID_Broadcast_List), &((*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).emergencyAreaID_Broadcast_List));
		if (_res)
		    return _res;
	    }
	    if (((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).bit_mask) & 0x10000000)
		return 1;
	    if ((*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).bit_mask & 0x10000000) {
		{
		    _seqof38 *  _s_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List_5GS  *)_odata).iE_Extensions;
		    _seqof38 *  _d_oss_tmp_2 = (*(_Broadcast_Scheduled_Area_List_5GS  *)_cdata).iE_Extensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 13: {
	    if (((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask & 0x80000000) {
		{
		    _CellID_Cancelled_List *  _s_oss_tmp_2 = (_CellID_Cancelled_List *)(*(_Broadcast_Cancelled_Area_List  *)_odata).cellID_Cancelled_List;
		    _CellID_Cancelled_List *  _d_oss_tmp_2 = (_CellID_Cancelled_List *)(*(_Broadcast_Cancelled_Area_List  *)_cdata).cellID_Cancelled_List;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmEUTRAN_CGI(_g, &((_s_oss_tmp_2->value).eCGI), &((_d_oss_tmp_2->value).eCGI));
			if (_res)
			    return _res;
			if ((_d_oss_tmp_2->value).numberOfBroadcasts != (_s_oss_tmp_2->value).numberOfBroadcasts)
			    return 1;
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List  *)_cdata).bit_mask) & 0x40000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask & 0x40000000) {
		{
		    _TAI_Cancelled_List *  _s_oss_tmp_2 = (_TAI_Cancelled_List *)(*(_Broadcast_Cancelled_Area_List  *)_odata).tAI_Cancelled_List;
		    _TAI_Cancelled_List *  _d_oss_tmp_2 = (_TAI_Cancelled_List *)(*(_Broadcast_Cancelled_Area_List  *)_cdata).tAI_Cancelled_List;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmTAI(_g, &((_s_oss_tmp_2->value).tAI), &((_d_oss_tmp_2->value).tAI));
			if (_res)
			    return _res;
			{
			    _CellID_Cancelled_List * * _odata_3 = &((_s_oss_tmp_2->value).cancelledCellinTAI);
			    _CellID_Cancelled_List * * _cdata_3 = &((_d_oss_tmp_2->value).cancelledCellinTAI);

			    {
				_CellID_Cancelled_List *  _s_oss_tmp_4 = (_CellID_Cancelled_List *)*_odata_3;
				_CellID_Cancelled_List *  _d_oss_tmp_4 = (_CellID_Cancelled_List *)*_cdata_3;

				while (_s_oss_tmp_4 && _d_oss_tmp_4) {
				    _res = _cmEUTRAN_CGI(_g, &((_s_oss_tmp_4->value).eCGI), &((_d_oss_tmp_4->value).eCGI));
				    if (_res)
					return _res;
				    if ((_d_oss_tmp_4->value).numberOfBroadcasts != (_s_oss_tmp_4->value).numberOfBroadcasts)
					return 1;
				    if (((_s_oss_tmp_4->value).bit_mask ^ (_d_oss_tmp_4->value).bit_mask) & 0x80000000)
					return 1;
				    if ((_s_oss_tmp_4->value).bit_mask & 0x80000000) {
					{
					    _seqof38 *  _s_oss_tmp_6 = (_s_oss_tmp_4->value).iE_Extensions;
					    _seqof38 *  _d_oss_tmp_6 = (_d_oss_tmp_4->value).iE_Extensions;

					    while (_s_oss_tmp_6 && _d_oss_tmp_6) {
						{
						    _seq42  * _odata_6 = &(_s_oss_tmp_6->value);
						    _seq42  * _cdata_6 = &(_d_oss_tmp_6->value);

						    if ((*_cdata_6).id != (*_odata_6).id)
							return 1;
						    if ((*_cdata_6).criticality != (*_odata_6).criticality)
							return 1;
						    _res = _oss_cmp_new_open_type(_g, ((*_odata_6).extensionValue).pduNum, ((*_cdata_6).extensionValue).pduNum, &(((*_odata_6).extensionValue).encoded), &(((*_cdata_6).extensionValue).encoded), *(void **)&(((*_odata_6).extensionValue).decoded), *(void **)&(((*_cdata_6).extensionValue).decoded));
						    if (_res)
							return _res;
						}
						_s_oss_tmp_6 = _s_oss_tmp_6->next;
						_d_oss_tmp_6 = _d_oss_tmp_6->next;
					    }
					    if (_s_oss_tmp_6 || _d_oss_tmp_6)
						return 1;
					}
				    }
				    _s_oss_tmp_4 = _s_oss_tmp_4->next;
				    _d_oss_tmp_4 = _d_oss_tmp_4->next;
				}
				if (_s_oss_tmp_4 || _d_oss_tmp_4)
				    return 1;
			    }
			}
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List  *)_cdata).bit_mask) & 0x20000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask & 0x20000000) {
		_res = _cm16EmergencyAreaID_Cancelled_(_g, &((*(_Broadcast_Cancelled_Area_List  *)_odata).emergencyAreaID_Cancelled_List), &((*(_Broadcast_Cancelled_Area_List  *)_cdata).emergencyAreaID_Cancelled_List));
		if (_res)
		    return _res;
	    }
	    if (((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List  *)_cdata).bit_mask) & 0x10000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List  *)_odata).bit_mask & 0x10000000) {
		{
		    _seqof38 *  _s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List  *)_odata).iE_Extensions;
		    _seqof38 *  _d_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List  *)_cdata).iE_Extensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 14: {
	    if (((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask & 0x80000000) {
		{
		    _CellID_Cancelled_List_5GS *  _s_oss_tmp_2 = (_CellID_Cancelled_List_5GS *)(*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).cellID_Cancelled_List_5GS;
		    _CellID_Cancelled_List_5GS *  _d_oss_tmp_2 = (_CellID_Cancelled_List_5GS *)(*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).cellID_Cancelled_List_5GS;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmNR_CGI(_g, &((_s_oss_tmp_2->value).nR_CGI), &((_d_oss_tmp_2->value).nR_CGI));
			if (_res)
			    return _res;
			if ((_d_oss_tmp_2->value).numberOfBroadcasts != (_s_oss_tmp_2->value).numberOfBroadcasts)
			    return 1;
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).bit_mask) & 0x40000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask & 0x40000000) {
		{
		    _TAI_Cancelled_List_5GS *  _s_oss_tmp_2 = (_TAI_Cancelled_List_5GS *)(*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).tAI_Cancelled_List_5GS;
		    _TAI_Cancelled_List_5GS *  _d_oss_tmp_2 = (_TAI_Cancelled_List_5GS *)(*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).tAI_Cancelled_List_5GS;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			_res = _cmTAI_5GS(_g, &((_s_oss_tmp_2->value).tAI_5GS), &((_d_oss_tmp_2->value).tAI_5GS));
			if (_res)
			    return _res;
			{
			    _CellID_Cancelled_List_5GS * * _odata_3 = &((_s_oss_tmp_2->value).cancelledCellinTAI_5GS);
			    _CellID_Cancelled_List_5GS * * _cdata_3 = &((_d_oss_tmp_2->value).cancelledCellinTAI_5GS);

			    {
				_CellID_Cancelled_List_5GS *  _s_oss_tmp_4 = (_CellID_Cancelled_List_5GS *)*_odata_3;
				_CellID_Cancelled_List_5GS *  _d_oss_tmp_4 = (_CellID_Cancelled_List_5GS *)*_cdata_3;

				while (_s_oss_tmp_4 && _d_oss_tmp_4) {
				    _res = _cmNR_CGI(_g, &((_s_oss_tmp_4->value).nR_CGI), &((_d_oss_tmp_4->value).nR_CGI));
				    if (_res)
					return _res;
				    if ((_d_oss_tmp_4->value).numberOfBroadcasts != (_s_oss_tmp_4->value).numberOfBroadcasts)
					return 1;
				    if (((_s_oss_tmp_4->value).bit_mask ^ (_d_oss_tmp_4->value).bit_mask) & 0x80000000)
					return 1;
				    if ((_s_oss_tmp_4->value).bit_mask & 0x80000000) {
					{
					    _seqof38 *  _s_oss_tmp_6 = (_s_oss_tmp_4->value).iE_Extensions;
					    _seqof38 *  _d_oss_tmp_6 = (_d_oss_tmp_4->value).iE_Extensions;

					    while (_s_oss_tmp_6 && _d_oss_tmp_6) {
						{
						    _seq42  * _odata_6 = &(_s_oss_tmp_6->value);
						    _seq42  * _cdata_6 = &(_d_oss_tmp_6->value);

						    if ((*_cdata_6).id != (*_odata_6).id)
							return 1;
						    if ((*_cdata_6).criticality != (*_odata_6).criticality)
							return 1;
						    _res = _oss_cmp_new_open_type(_g, ((*_odata_6).extensionValue).pduNum, ((*_cdata_6).extensionValue).pduNum, &(((*_odata_6).extensionValue).encoded), &(((*_cdata_6).extensionValue).encoded), *(void **)&(((*_odata_6).extensionValue).decoded), *(void **)&(((*_cdata_6).extensionValue).decoded));
						    if (_res)
							return _res;
						}
						_s_oss_tmp_6 = _s_oss_tmp_6->next;
						_d_oss_tmp_6 = _d_oss_tmp_6->next;
					    }
					    if (_s_oss_tmp_6 || _d_oss_tmp_6)
						return 1;
					}
				    }
				    _s_oss_tmp_4 = _s_oss_tmp_4->next;
				    _d_oss_tmp_4 = _d_oss_tmp_4->next;
				}
				if (_s_oss_tmp_4 || _d_oss_tmp_4)
				    return 1;
			    }
			}
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).bit_mask) & 0x20000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask & 0x20000000) {
		_res = _cm16EmergencyAreaID_Cancelled_(_g, &((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).emergencyAreaID_Cancelled_List), &((*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).emergencyAreaID_Cancelled_List));
		if (_res)
		    return _res;
	    }
	    if (((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask ^ (*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).bit_mask) & 0x10000000)
		return 1;
	    if ((*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).bit_mask & 0x10000000) {
		{
		    _seqof38 *  _s_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List_5GS  *)_odata).iE_Extensions;
		    _seqof38 *  _d_oss_tmp_2 = (*(_Broadcast_Cancelled_Area_List_5GS  *)_cdata).iE_Extensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 15: {
	    {
		_Broadcast_Empty_Area_List *  _s_oss_tmp_1 = *(_Broadcast_Empty_Area_List * *)_odata;
		_Broadcast_Empty_Area_List *  _d_oss_tmp_1 = *(_Broadcast_Empty_Area_List * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmGlobal_ENB_ID(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 16: {
	    {
		_Broadcast_Empty_Area_List_5GS *  _s_oss_tmp_1 = *(_Broadcast_Empty_Area_List_5GS * *)_odata;
		_Broadcast_Empty_Area_List_5GS *  _d_oss_tmp_1 = *(_Broadcast_Empty_Area_List_5GS * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmGlobal_RAN_Node_ID(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 17: {
	    if (*(OSS_UINT32  *)_cdata != *(OSS_UINT32  *)_odata)
		return 1;
	} break;
	case 18: {
	    if (*(enum Concurrent_Warning_Message_Indicator  *)_cdata != *(enum Concurrent_Warning_Message_Indicator  *)_odata)
		return 1;
	} break;
	case 19: {
	    if (((*(_Criticality_Diagnostics  *)_odata).bit_mask ^ (*(_Criticality_Diagnostics  *)_cdata).bit_mask) & 0x80000000)
		return 1;
	    if ((*(_Criticality_Diagnostics  *)_odata).bit_mask & 0x80000000) {
		if ((*(_Criticality_Diagnostics  *)_cdata).procedureCode != (*(_Criticality_Diagnostics  *)_odata).procedureCode)
		    return 1;
	    }
	    if (((*(_Criticality_Diagnostics  *)_odata).bit_mask ^ (*(_Criticality_Diagnostics  *)_cdata).bit_mask) & 0x40000000)
		return 1;
	    if ((*(_Criticality_Diagnostics  *)_odata).bit_mask & 0x40000000) {
		if ((*(_Criticality_Diagnostics  *)_cdata).triggeringMessage != (*(_Criticality_Diagnostics  *)_odata).triggeringMessage)
		    return 1;
	    }
	    if (((*(_Criticality_Diagnostics  *)_odata).bit_mask ^ (*(_Criticality_Diagnostics  *)_cdata).bit_mask) & 0x20000000)
		return 1;
	    if ((*(_Criticality_Diagnostics  *)_odata).bit_mask & 0x20000000) {
		if ((*(_Criticality_Diagnostics  *)_cdata).procedureCriticality != (*(_Criticality_Diagnostics  *)_odata).procedureCriticality)
		    return 1;
	    }
	    if (((*(_Criticality_Diagnostics  *)_odata).bit_mask ^ (*(_Criticality_Diagnostics  *)_cdata).bit_mask) & 0x10000000)
		return 1;
	    if ((*(_Criticality_Diagnostics  *)_odata).bit_mask & 0x10000000) {
		{
		    _CriticalityDiagnostics_IE_List *  _s_oss_tmp_2 = (_CriticalityDiagnostics_IE_List *)(*(_Criticality_Diagnostics  *)_odata).iE_CriticalityDiagnostics;
		    _CriticalityDiagnostics_IE_List *  _d_oss_tmp_2 = (_CriticalityDiagnostics_IE_List *)(*(_Criticality_Diagnostics  *)_cdata).iE_CriticalityDiagnostics;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).iECriticality != (_s_oss_tmp_2->value).iECriticality)
			    return 1;
			if ((_d_oss_tmp_2->value).iE_ID != (_s_oss_tmp_2->value).iE_ID)
			    return 1;
			if ((_d_oss_tmp_2->value).typeOfError != (_s_oss_tmp_2->value).typeOfError)
			    return 1;
			if (((_s_oss_tmp_2->value).bit_mask ^ (_d_oss_tmp_2->value).bit_mask) & 0x80000000)
			    return 1;
			if ((_s_oss_tmp_2->value).bit_mask & 0x80000000) {
			    {
				_seqof38 * * _odata_3 = &((_s_oss_tmp_2->value).iE_Extensions);
				_seqof38 * * _cdata_3 = &((_d_oss_tmp_2->value).iE_Extensions);

				{
				    _seqof38 *  _s_oss_tmp_4 = *_odata_3;
				    _seqof38 *  _d_oss_tmp_4 = *_cdata_3;

				    while (_s_oss_tmp_4 && _d_oss_tmp_4) {
					if ((_d_oss_tmp_4->value).id != (_s_oss_tmp_4->value).id)
					    return 1;
					if ((_d_oss_tmp_4->value).criticality != (_s_oss_tmp_4->value).criticality)
					    return 1;
					_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_4->value).extensionValue).pduNum, ((_d_oss_tmp_4->value).extensionValue).pduNum, &(((_s_oss_tmp_4->value).extensionValue).encoded), &(((_d_oss_tmp_4->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_4->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_4->value).extensionValue).decoded));
					if (_res)
					    return _res;
					_s_oss_tmp_4 = _s_oss_tmp_4->next;
					_d_oss_tmp_4 = _d_oss_tmp_4->next;
				    }
				    if (_s_oss_tmp_4 || _d_oss_tmp_4)
					return 1;
				}
			    }
			}
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	    if (((*(_Criticality_Diagnostics  *)_odata).bit_mask ^ (*(_Criticality_Diagnostics  *)_cdata).bit_mask) & 0x8000000)
		return 1;
	    if ((*(_Criticality_Diagnostics  *)_odata).bit_mask & 0x8000000) {
		{
		    _seqof38 *  _s_oss_tmp_2 = (*(_Criticality_Diagnostics  *)_odata).iE_Extensions;
		    _seqof38 *  _d_oss_tmp_2 = (*(_Criticality_Diagnostics  *)_cdata).iE_Extensions;

		    while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			if ((_d_oss_tmp_2->value).id != (_s_oss_tmp_2->value).id)
			    return 1;
			if ((_d_oss_tmp_2->value).criticality != (_s_oss_tmp_2->value).criticality)
			    return 1;
			_res = _oss_cmp_new_open_type(_g, ((_s_oss_tmp_2->value).extensionValue).pduNum, ((_d_oss_tmp_2->value).extensionValue).pduNum, &(((_s_oss_tmp_2->value).extensionValue).encoded), &(((_d_oss_tmp_2->value).extensionValue).encoded), *(void **)&(((_s_oss_tmp_2->value).extensionValue).decoded), *(void **)&(((_d_oss_tmp_2->value).extensionValue).decoded));
			if (_res)
			    return _res;
			_s_oss_tmp_2 = _s_oss_tmp_2->next;
			_d_oss_tmp_2 = _d_oss_tmp_2->next;
		    }
		    if (_s_oss_tmp_2 || _d_oss_tmp_2)
			return 1;
		}
	    }
	} break;
	case 20: {
	    if (_oss_cmp_arrbits((*(OSSC::COssBitString  *)_odata).value, (*(OSSC::COssBitString  *)_cdata).value, (*(OSSC::COssBitString  *)_odata).length, (*(OSSC::COssBitString  *)_cdata).length))
		return 1;
	} break;
	case 21: {
	    if (*(OSS_UINT32  *)_cdata != *(OSS_UINT32  *)_odata)
		return 1;
	} break;
	case 22: {
	    {
		_ECGIList *  _s_oss_tmp_1 = *(_ECGIList * *)_odata;
		_ECGIList *  _d_oss_tmp_1 = *(_ECGIList * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmEUTRAN_CGI(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 23: {
	    {
		_NR_CGIList *  _s_oss_tmp_1 = *(_NR_CGIList * *)_odata;
		_NR_CGIList *  _d_oss_tmp_1 = *(_NR_CGIList * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmNR_CGI(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 24: {
	    _res = _cmGlobal_ENB_ID(_g, (_Global_ENB_ID  *)_odata, (_Global_ENB_ID  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 25: {
	    _res = _cmGlobal_RAN_Node_ID(_g, (_Global_RAN_Node_ID  *)_odata, (_Global_RAN_Node_ID  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 26: {
	    _res = _cmGlobal_GNB_ID(_g, (_Global_GNB_ID  *)_odata, (_Global_GNB_ID  *)_cdata);
	    if (_res)
		return _res;
	} break;
	case 27: {
	    {
		_List_of_TAIs *  _s_oss_tmp_1 = *(_List_of_TAIs * *)_odata;
		_List_of_TAIs *  _d_oss_tmp_1 = *(_List_of_TAIs * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cm_seq43(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 28: {
	    {
		_List_of_TAIs *  _s_oss_tmp_1 = *(_List_of_TAIs * *)_odata;
		_List_of_TAIs *  _d_oss_tmp_1 = *(_List_of_TAIs * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cm_seq43(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 29: {
	    {
		_Emergency_Area_ID_List *  _s_oss_tmp_1 = *(_Emergency_Area_ID_List * *)_odata;
		_Emergency_Area_ID_List *  _d_oss_tmp_1 = *(_Emergency_Area_ID_List * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    if (_oss_cmp_unbnd_octet_ia(&(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value), sizeof((_d_oss_tmp_1->value).length), sizeof((_d_oss_tmp_1->value).value[0]), (unsigned int)((char *)&(_s_oss_tmp_1->value).value - (char *)&(_s_oss_tmp_1->value))))
			return 1;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 30: {
	    {
		_List_of_5GS_TAIs *  _s_oss_tmp_1 = *(_List_of_5GS_TAIs * *)_odata;
		_List_of_5GS_TAIs *  _d_oss_tmp_1 = *(_List_of_5GS_TAIs * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmTAI_5GS(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 31: {
	    {
		_NR_CGIList *  _s_oss_tmp_1 = *(_NR_CGIList * *)_odata;
		_NR_CGIList *  _d_oss_tmp_1 = *(_NR_CGIList * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmNR_CGI(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 32: {
	    {
		_List_of_5GS_TAIs *  _s_oss_tmp_1 = *(_List_of_5GS_TAIs * *)_odata;
		_List_of_5GS_TAIs *  _d_oss_tmp_1 = *(_List_of_5GS_TAIs * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmTAI_5GS(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 33: {
	    if (_oss_cmp_arrbits((*(OSSC::COssBitString  *)_odata).value, (*(OSSC::COssBitString  *)_cdata).value, (*(OSSC::COssBitString  *)_odata).length, (*(OSSC::COssBitString  *)_cdata).length))
		return 1;
	} break;
	case 34: {
	    if (*(OSS_UINT32  *)_cdata != *(OSS_UINT32  *)_odata)
		return 1;
	} break;
	case 35: {
	    if ((*(_NgENB_ID  *)_odata).choice != (*(_NgENB_ID  *)_cdata).choice)
		return 1;
	    switch ((*(_NgENB_ID  *)_odata).choice) {
		case 1: {
		    if (_oss_cmp_arrbits(((*(_NgENB_ID  *)_odata).u.macroNgENB_ID).value, ((*(_NgENB_ID  *)_cdata).u.macroNgENB_ID).value, ((*(_NgENB_ID  *)_odata).u.macroNgENB_ID).length, ((*(_NgENB_ID  *)_cdata).u.macroNgENB_ID).length))
			return 1;
		}   break;
		case 2: {
		    if (_oss_cmp_arrbits(((*(_NgENB_ID  *)_odata).u.shortMacroNgENB_ID).value, ((*(_NgENB_ID  *)_cdata).u.shortMacroNgENB_ID).value, ((*(_NgENB_ID  *)_odata).u.shortMacroNgENB_ID).length, ((*(_NgENB_ID  *)_cdata).u.shortMacroNgENB_ID).length))
			return 1;
		}   break;
		case 3: {
		    if (_oss_cmp_arrbits(((*(_NgENB_ID  *)_odata).u.longMacroNgENB_ID).value, ((*(_NgENB_ID  *)_cdata).u.longMacroNgENB_ID).value, ((*(_NgENB_ID  *)_odata).u.longMacroNgENB_ID).length, ((*(_NgENB_ID  *)_cdata).u.longMacroNgENB_ID).length))
			return 1;
		}   break;
		case 0:
		    break;
		default:
		    return 1;
	    }
	} break;
	case 36: {
	    if (_oss_cmp_unbnd_octet_ia((OSSC::COssString  *)_odata, (OSSC::COssString  *)_cdata, sizeof((*(OSSC::COssString  *)_cdata).length), sizeof((*(OSSC::COssString  *)_cdata).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)_odata).value - (char *)(OSSC::COssString  *)_odata)))
		return 1;
	} break;
	case 37: {
	    if (*(OSS_UINT32  *)_cdata != *(OSS_UINT32  *)_odata)
		return 1;
	} break;
	case 38: {
	    {
		_ECGIList *  _s_oss_tmp_1 = *(_ECGIList * *)_odata;
		_ECGIList *  _d_oss_tmp_1 = *(_ECGIList * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmEUTRAN_CGI(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 39: {
	    if (*(enum RAT_Selector_5GS  *)_cdata != *(enum RAT_Selector_5GS  *)_odata)
		return 1;
	} break;
	case 40: {
	    {
		_NR_CGIList *  _s_oss_tmp_1 = *(_NR_CGIList * *)_odata;
		_NR_CGIList *  _d_oss_tmp_1 = *(_NR_CGIList * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmNR_CGI(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 41: {
	    if (*(enum Send_Write_Replace_Warning_Indication  *)_cdata != *(enum Send_Write_Replace_Warning_Indication  *)_odata)
		return 1;
	} break;
	case 42: {
	    if (*(enum Send_Stop_Warning_Indication  *)_cdata != *(enum Send_Stop_Warning_Indication  *)_odata)
		return 1;
	} break;
	case 43: {
	    if (_oss_cmp_arrbits((*(OSSC::COssBitString  *)_odata).value, (*(OSSC::COssBitString  *)_cdata).value, (*(OSSC::COssBitString  *)_odata).length, (*(OSSC::COssBitString  *)_cdata).length))
		return 1;
	} break;
	case 44: {
	    if (*(enum Stop_All_Indicator  *)_cdata != *(enum Stop_All_Indicator  *)_odata)
		return 1;
	} break;
	case 45: {
	    {
		_TAI_List_for_Warning *  _s_oss_tmp_1 = *(_TAI_List_for_Warning * *)_odata;
		_TAI_List_for_Warning *  _d_oss_tmp_1 = *(_TAI_List_for_Warning * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmTAI(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 46: {
	    {
		_List_of_5GS_TAIs *  _s_oss_tmp_1 = *(_List_of_5GS_TAIs * *)_odata;
		_List_of_5GS_TAIs *  _d_oss_tmp_1 = *(_List_of_5GS_TAIs * *)_cdata;

		while (_s_oss_tmp_1 && _d_oss_tmp_1) {
		    _res = _cmTAI_5GS(_g, &(_s_oss_tmp_1->value), &(_d_oss_tmp_1->value));
		    if (_res)
			return _res;
		    _s_oss_tmp_1 = _s_oss_tmp_1->next;
		    _d_oss_tmp_1 = _d_oss_tmp_1->next;
		}
		if (_s_oss_tmp_1 || _d_oss_tmp_1)
		    return 1;
	    }
	} break;
	case 47: {
	    if ((*(_Warning_Area_List  *)_odata).choice != (*(_Warning_Area_List  *)_cdata).choice)
		return 1;
	    switch ((*(_Warning_Area_List  *)_odata).choice) {
		case 1: {
		    _res = _cmECGIList(_g, &((*(_Warning_Area_List  *)_odata).u.cell_ID_List), &((*(_Warning_Area_List  *)_cdata).u.cell_ID_List));
		    if (_res)
			return _res;
		}   break;
		case 2: {
		    {
			_TAI_List_for_Warning *  _s_oss_tmp_2 = (_TAI_List_for_Warning *)(*(_Warning_Area_List  *)_odata).u.tracking_Area_List_for_Warning;
			_TAI_List_for_Warning *  _d_oss_tmp_2 = (_TAI_List_for_Warning *)(*(_Warning_Area_List  *)_cdata).u.tracking_Area_List_for_Warning;

			while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			    _res = _cmTAI(_g, &(_s_oss_tmp_2->value), &(_d_oss_tmp_2->value));
			    if (_res)
				return _res;
			    _s_oss_tmp_2 = _s_oss_tmp_2->next;
			    _d_oss_tmp_2 = _d_oss_tmp_2->next;
			}
			if (_s_oss_tmp_2 || _d_oss_tmp_2)
			    return 1;
		    }
		}   break;
		case 3: {
		    _res = _cmEmergency_Area_ID_List(_g, &((*(_Warning_Area_List  *)_odata).u.emergency_Area_ID_List), &((*(_Warning_Area_List  *)_cdata).u.emergency_Area_ID_List));
		    if (_res)
			return _res;
		}   break;
		case 0:
		    break;
		default:
		    return 1;
	    }
	} break;
	case 48: {
	    if (_oss_cmp_unbnd_octet_ia((OSSC::COssString  *)_odata, (OSSC::COssString  *)_cdata, sizeof((*(OSSC::COssString  *)_cdata).length), sizeof((*(OSSC::COssString  *)_cdata).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)_odata).value - (char *)(OSSC::COssString  *)_odata)))
		return 1;
	} break;
	case 49: {
	    if (_oss_cmp_unbnd_octet_ia((OSSC::COssString  *)_odata, (OSSC::COssString  *)_cdata, sizeof((*(OSSC::COssString  *)_cdata).length), sizeof((*(OSSC::COssString  *)_cdata).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)_odata).value - (char *)(OSSC::COssString  *)_odata)))
		return 1;
	} break;
	case 50: {
	    if (_oss_cmp_unbnd_octet_ia((OSSC::COssString  *)_odata, (OSSC::COssString  *)_cdata, sizeof((*(OSSC::COssString  *)_cdata).length), sizeof((*(OSSC::COssString  *)_cdata).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)_odata).value - (char *)(OSSC::COssString  *)_odata)))
		return 1;
	} break;
	case 51: {
	    if (_oss_cmp_unbnd_octet_ia((OSSC::COssString  *)_odata, (OSSC::COssString  *)_cdata, sizeof((*(OSSC::COssString  *)_cdata).length), sizeof((*(OSSC::COssString  *)_cdata).value[0]), (unsigned int)((char *)&(*(OSSC::COssString  *)_odata).value - (char *)(OSSC::COssString  *)_odata)))
		return 1;
	} break;
	case 52: {
	    if ((*(_Warning_Area_List_5GS  *)_odata).choice != (*(_Warning_Area_List_5GS  *)_cdata).choice)
		return 1;
	    switch ((*(_Warning_Area_List_5GS  *)_odata).choice) {
		case 1: {
		    _res = _cmECGIList(_g, &((*(_Warning_Area_List_5GS  *)_odata).u.cell_ID_List), &((*(_Warning_Area_List_5GS  *)_cdata).u.cell_ID_List));
		    if (_res)
			return _res;
		}   break;
		case 2: {
		    {
			_NR_CGIList *  _s_oss_tmp_2 = (_NR_CGIList *)(*(_Warning_Area_List_5GS  *)_odata).u.nR_CGIList;
			_NR_CGIList *  _d_oss_tmp_2 = (_NR_CGIList *)(*(_Warning_Area_List_5GS  *)_cdata).u.nR_CGIList;

			while (_s_oss_tmp_2 && _d_oss_tmp_2) {
			    _res = _cmNR_CGI(_g, &(_s_oss_tmp_2->value), &(_d_oss_tmp_2->value));
			    if (_res)
				return _res;
			    _s_oss_tmp_2 = _s_oss_tmp_2->next;
			    _d_oss_tmp_2 = _d_oss_tmp_2->next;
			}
			if (_s_oss_tmp_2 || _d_oss_tmp_2)
			    return 1;
		    }
		}   break;
		case 3: {
		    _res = _cmTAI_5GS(_g, (*(_Warning_Area_List_5GS  *)_odata).u.tAIList_5GS, (*(_Warning_Area_List_5GS  *)_cdata).u.tAIList_5GS);
		    if (_res)
			return _res;
		}   break;
		case 4: {
		    _res = _cmEmergency_Area_ID_List(_g, &((*(_Warning_Area_List_5GS  *)_odata).u.emergencyAreaIDList), &((*(_Warning_Area_List_5GS  *)_cdata).u.emergencyAreaIDList));
		    if (_res)
			return _res;
		}   break;
		case 0:
		    break;
		default:
		    return 1;
	    }
	} break;
	default:
	    return PDU_RANGE;
    }
    (void)_g;

    return _res;
}
#endif /* OSS_COMPARE_VALUE */

#ifdef OSS_COMPARE_VALUE
int _oss_cmp_new_open_type (OssGlobal *_g, int _pduNum1, int _pduNum2,
		OssBuf *_obuf1, OssBuf *_obuf2, void *_decoded1, void *_decoded2)
{
    unsigned long   apiFlags = _g->decodingFlags | _g->encodingFlags;

    if (!(apiFlags & DONT_DO_DECODED) && (_decoded1 || _decoded2)) {
	if (!_decoded1 || !_decoded2 || _pduNum1 != _pduNum2 || _pduNum1 == 0 ||
		_CMSBC_AP_Containers(_g, _pduNum1, _decoded1, _decoded2))
	    return VALUES_NOT_EQUAL;
    } else if (!(apiFlags & DONT_DO_ENCODED) && (_obuf1->value || _obuf2->value)) {
	if (!_obuf1->value || !_obuf2->value || _obuf1->length != _obuf2->length ||
		(_obuf2->length && OSS_MEMCMP(_g, _obuf1->value, _obuf1->length, _obuf2->value, _obuf1->length, _g->_res)))
	    return VALUES_NOT_EQUAL;
    }

    return VALUES_EQUAL;
}
#endif /* OSS_COMPARE_VALUE */

/* Entry points */
static const _entry_point_struct _entry_points = {_ossinit_sbcap,  NULL, NULL, 
#if (OSS_TOED_API_LEVEL < 22 ) || !defined(OSSNOFREEPDU)
_fmSBC_AP_Containers,
#else
NULL, 
#endif
17,
_peSBC_AP_Containers, _pdSBC_AP_Containers, 16, 0, NULL,
#ifdef OSSPRINT
_pmSBC_AP_Containers
#else
NULL
#endif
};
static void _oss_post_init(struct ossGlobal *world) {
    static const unsigned char _oss_typeinfo[] = {
        0x00, 0xc0, 0x33, 0xaf, 0x33, 0xd3, 0x7c, 0x0a, 0xc9, 0xdd,
        0x56, 0x51, 0xc9, 0x57, 0x56, 0x8e, 0x21, 0x73, 0xa0, 0x63,
        0x8f, 0x29, 0x20, 0x71, 0x5b, 0x31, 0x04, 0x67, 0xe6, 0x64,
        0x89, 0xa5, 0x9b, 0xce, 0xa1, 0xdd, 0x8f, 0xf9, 0xd3, 0x7b,
        0x16, 0x14, 0xe4, 0x94, 0xbe, 0xc5, 0x00, 0xd0, 0x7a, 0x5e,
        0x48, 0x42, 0x89, 0x06, 0xf3, 0xba, 0x1d, 0x5a, 0x97, 0x8e,
        0x80, 0x84, 0x29, 0xc8, 0x3b, 0xb9, 0x86, 0x3e, 0xbd, 0x04,
        0xce, 0x4e, 0x2b, 0xa2, 0xc8, 0xb0, 0x70, 0x51, 0x0c, 0xa4,
        0x45, 0x0d, 0xd2, 0x42, 0x83, 0xd4, 0xa9, 0x16, 0xa1, 0xda,
        0x4e, 0xe9, 0x53, 0x1e, 0xbc, 0xcc, 0x13, 0x71, 0x37, 0x7e,
        0x70, 0x26, 0x8f, 0x17, 0xc3, 0xb7, 0xd2, 0xb1, 0xdb, 0xda,
        0x61, 0xa1, 0x60, 0x21, 0xdb, 0x2e, 0x77, 0xc0, 0x65, 0x54,
        0x29, 0xb0, 0x95, 0x34, 0xc6, 0x0c, 0x9d, 0x8a, 0x6d, 0x2d,
        0x24, 0x9f, 0xbf, 0x80, 0x2a, 0x39, 0x6a, 0x61, 0xbd, 0xac,
        0xd4, 0x3f, 0x96, 0x98, 0x57, 0x2d, 0xc0, 0x98, 0x1e, 0xa1,
        0xc5, 0x9a, 0x4a, 0xe7, 0x2b, 0xa3, 0xb4, 0xdb, 0xa6, 0x3c,
        0x47, 0x9b, 0x40, 0x7f, 0x37, 0x2f, 0xfb, 0xe6, 0x1a, 0xc1,
        0x26, 0x4b, 0xaf, 0xb2, 0x90, 0x30, 0x05, 0xf1, 0xe2, 0xe8,
        0x84, 0x89, 0xc6, 0x6d, 0xa5, 0x72, 0x20, 0x17, 0xd1, 0x31,
        0xcd, 0x21, 0x73, 0xbd
    };
    ossInitRootContext(world, (unsigned char *)_oss_typeinfo);
#if (OSS_TOED_API_LEVEL > 35)
#if (OSSDEBUG == 0)
    ossLinkZeroMsgs(world);
#elif defined(OSS_REDUCED_ERROR_MSGS)
    ossLinkIdMsgs(world);
#else
    ossLinkFullMsgs(world);
#endif
#endif
}

} /* extern "C" */

void *sbcap_TableType::internal = (void *)&_entry_points;
